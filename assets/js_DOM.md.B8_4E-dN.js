import{_ as s,c as i,o as a,aR as e,bC as t,bD as n,bE as l,bF as p}from"./chunks/framework.DLAwTCsc.js";const y=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[],"relativePath":"js/DOM.md","filePath":"01_前端/03_js/10_DOM.md","lastUpdated":1739447932000}'),h={name:"js/DOM.md"},r=e(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h1><p>DOM（文档对象模型，Document Object Model）是 HTML 和 XML 文档的编程接口，DOM 表示由多层节点构成的文档，通过它开发者可以添加、删除和修改页面的各个部分。脱胎于网景和微软早期的动态 HTML（DHTML，Dynamic HTML），<strong>DOM 现在是真正跨平台、语言无关的表示和操作网页的方式。</strong></p><p>开始的时候，JS 和 DOM 是交织在一起的，但是最终演变成了两个独立的实体。JS 通过 DOM 提供的 API，可以用来访问和操作页面。因此我们可以写成这个近似的等式：</p><p><strong>API (web 或 XML 页面) = DOM + JS (脚本语言)</strong></p><p>DOM 被设计成与特定编程语言相独立，使文档的结构化表述可以通过单一，一致的 API 获得。在其他语言中也可以访问和操作 DOM，例如 Python：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python DOM example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xml.dom.minidom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.parse(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Projects</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">chap1.xml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.nodeName </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DOM property of document object;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.getElementsByTagName(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;para&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>IE8 及更低版本中的 DOM 是通过 COM 对象实现的。这意味着这些版本的 IE 中，DOM 对象跟原生 JavaScript 对象具有不同的行为和功能。</p></div><h2 id="dom-的演进" tabindex="-1">DOM 的演进 <a class="header-anchor" href="#dom-的演进" aria-label="Permalink to &quot;DOM 的演进&quot;">​</a></h2><p>DOM Level 1 在 1998 年成为 W3C 推荐标准，主要定义了 HTML 和 XML 文档的底层结构。DOM2（DOM Level 2）和 DOM3（DOM Level 3）在这些结构之上加入更多交互能力</p><p>实际上，DOM2 和 DOM3 是按照模块化的思路来制定标准的，每个模块之间有一定关联，但分别针对某个 DOM 子集。</p><ul><li><p>DOM Core：在 DOM1 核心部分的基础上，为节点增加方法和属性。</p></li><li><p>DOM Views(视图)：定义基于样式信息的不同视图。</p><p><em>这个模块比较小，主要定义了新的属性和方法。</em></p></li><li><p>DOM Events(事件）：定义通过事件实现 DOM 文档交互。</p></li><li><p>DOM Style(样式)：定义以编程方式访问和修改 CSS 样式的接口。</p></li><li><p>DOM Traversal and Range(遍历和范围)：新增遍历 DOM 文档及选择文档内容的接口。</p></li><li><p>DOM HTML：在 DOM1 HTML 部分的基础上，增加属性、方法和新接口。</p><p><em>这个模块比较小，主要定义了新的属性和方法。</em></p></li><li><p>DOM Mutation Observers：定义基于 DOM 变化触发回调的接口。这个模块是 DOM4 级模块， 用于取代 Mutation Events。</p></li></ul><p>DOM3 还有 XPath 模块和 Load and Save 模块，一般不常用</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>尽管 DOM API 已经比较完善，但仍然不断有标准或专有的扩展出现，以支持更多功能。这些扩展也逐渐被 W3C 写入标准，但还会有一些扩展是浏览器专有扩展，浏览器仍然没有停止对专有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。</p></div><h2 id="节点层级" tabindex="-1">节点层级 <a class="header-anchor" href="#节点层级" aria-label="Permalink to &quot;节点层级&quot;">​</a></h2><p>任何 HTML 或 XML 文档都可以用 DOM 表示为一个由节点构成的层级结构。节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系。<strong>这些关系构成了层级，让标记可以表示为一个以特定节点为根的树形结构。</strong></p><p>HTML 的每段标记（元素、属性、注释等）都可以表示为 DOM 树的一个节点。DOM 中总共有 12 种节点类型，这些类型都继承一种基本类型（Node 类型）。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>虽然节点类型有很多种，但浏览器并不支持所有节点类型。开发者最常用到的是元素节点和文本节点。</p></div><h3 id="_1-node-类型" tabindex="-1">1. Node 类型 <a class="header-anchor" href="#_1-node-类型" aria-label="Permalink to &quot;1. Node 类型&quot;">​</a></h3><p>Node 类型是其他节点类型的基类，所有节点类型都继承了 Node 类型，因此所有类型都共享相同的基本属性和方法 。</p><ul><li><p>属性：</p><ul><li>nodeType：表示节点的类型</li><li>nodeName：如果是元素节点而言，表示元素的标签名</li><li>nodeValue：如果是元素节点，则为 null。</li></ul></li><li><p>方法：</p><p>多为节点操作方法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noreferrer">MDN-Node 接口</a></p></li></ul><h3 id="_2-document-类型" tabindex="-1">2. Document 类型 <a class="header-anchor" href="#_2-document-类型" aria-label="Permalink to &quot;2. Document 类型&quot;">​</a></h3><p>Document 表示文档节点类型，在浏览器中，文档对象 document 是 HTMLDocument 的实例(HTMLDocument 继承 Document)，表示整个 HTML 页面</p><p>Document 类型继承图：</p><p><img src="`+t+'" alt="image-20211201171629229" loading="lazy"></p><p>document 对象的继承图：</p><p><img src="'+n+'" alt="image-20211201172139769" loading="lazy"></p><p>如上图所示，document 对象不止继承了 Document 类型，还通过 HTMLDcument 类型扩展了属性和方法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noreferrer">具体属性和方法参考 MDN</a></p><h3 id="_3-element-类型" tabindex="-1">3. Element 类型 <a class="header-anchor" href="#_3-element-类型" aria-label="Permalink to &quot;3. Element 类型&quot;">​</a></h3><p>Element 类型表示 XML 或 HTML 元素，对外暴露出元素的签名、子节点和属性的能力。</p><p><strong>所有的 HTML 元素都是 HTMLElement(继承至 Element 类型) 类型或子类型的实例，具体可见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model#html_%E6%8E%A5%E5%8F%A3" target="_blank" rel="noreferrer">MDN-HTML 接口</a></strong></p><p>继承关系如下图：</p><p><img src="'+l+'" alt="image-20211201194019406" loading="lazy"></p><h3 id="_4-text-类型" tabindex="-1">4. Text 类型 <a class="header-anchor" href="#_4-text-类型" aria-label="Permalink to &quot;4. Text 类型&quot;">​</a></h3><p>Text 类型表示文档中的文本，包含按字面解释的纯文本，也可能包含转义后的 HTML 字符，但不含 HTML 代码</p><h3 id="_5-comment-类型" tabindex="-1">5. Comment 类型 <a class="header-anchor" href="#_5-comment-类型" aria-label="Permalink to &quot;5. Comment 类型&quot;">​</a></h3><p>Comment 类型表示文档的注释</p><p><img src="'+p+`" alt="image-20211201194844354" loading="lazy"></p><h3 id="_6-cdatasection-类型" tabindex="-1">6. CDATASection 类型 <a class="header-anchor" href="#_6-cdatasection-类型" aria-label="Permalink to &quot;6. CDATASection 类型&quot;">​</a></h3><p>CDATASection 类型表示 XML 中特有的 CDATA 区块。CDATA 区块只在 XML 文档中有效。</p><h3 id="_7-documenttype-类型" tabindex="-1">7. DocumentType 类型 <a class="header-anchor" href="#_7-documenttype-类型" aria-label="Permalink to &quot;7. DocumentType 类型&quot;">​</a></h3><p>DocumentType 类型的节点包含文档的文档类型（doctype）信息</p><h3 id="_8-documentfragment-类型" tabindex="-1">8. DocumentFragment 类型 <a class="header-anchor" href="#_8-documentfragment-类型" aria-label="Permalink to &quot;8. DocumentFragment 类型&quot;">​</a></h3><p>DocumentFragment 类型表示文档片段。<strong>在所有的节点类型中，只有 DocumentFragment 在文档(DOM 树)中没有对应的标记，也就是说，DocumentFragment 类型创建的节点不属于 DOM 树的一部分，不会渲染到页面上。</strong></p><p>通常我们通过 DocumentFragment 节点来操作节点，不会像操作 DOM 树一样占用性能。</p><p>在把文档片段添加到文档（DOM 树）时，这个文档片段的所有子节点会被添加到文档中相应的位置。<strong>但是文档片段本身永远不会被添加到文档树。</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  li.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Item \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(li);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_9-attr-类型" tabindex="-1">9. Attr 类型 <a class="header-anchor" href="#_9-attr-类型" aria-label="Permalink to &quot;9. Attr 类型&quot;">​</a></h3><p>Attr 类型表示元素的特性，技术上讲，特性就是存在于元素 attributes 属性中的节点。</p><p>属性节点尽管是节点，却不被认为是 DOM 文档树的一部分。虽然存在一些操作方法，但不推荐使用这些方法进行属性的操作</p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>所有的 DOM 接口可以在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noreferrer">MDN</a>上找到</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noreferrer">MDN-DOM 概述</a></li><li><a href="https://zh.javascript.info/basic-dom-node-properties" target="_blank" rel="noreferrer">JS 教程-节点属性：type，tag 和 content</a></li><li>书籍 - JS 高级程序设计</li></ul>`,53),k=[r];function o(d,c,E,m,g,u){return a(),i("div",null,k)}const b=s(h,[["render",o]]);export{y as __pageData,b as default};
