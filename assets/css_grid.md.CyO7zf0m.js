import{_ as s,c as i,o as a,aR as n,b5 as l,b6 as e}from"./chunks/framework.DLAwTCsc.js";const m=JSON.parse('{"title":"网格布局","description":"","frontmatter":{"title":"网格布局","date":"2021-10-21T15:00:00.000Z","permalink":"/css/grid","categories":"-- css -- 网格布局","tags":[null]},"headers":[],"relativePath":"css/grid.md","filePath":"01_前端/02_css/15_网格布局.md","lastUpdated":1739447932000}'),t={name:"css/grid.md"},p=n('<h1 id="网格布局" tabindex="-1">网格布局 <a class="header-anchor" href="#网格布局" aria-label="Permalink to &quot;网格布局&quot;">​</a></h1><p>网格布局是一种二维布局系统，网格布局试讲容器划分为“行”和“列”，产生单元格，然后指定&quot;项目所在&quot;的单元格，可以看作是<strong>二维布局</strong>。</p><p>Flex 布局是轴线布局，只能指定&quot;项目&quot;针对轴线的位置，可以看作是<strong>一维布局</strong>。</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="容器和项目" tabindex="-1">容器和项目 <a class="header-anchor" href="#容器和项目" aria-label="Permalink to &quot;容器和项目&quot;">​</a></h3><ul><li>容器(container)：采用网格布局的区域。</li><li>项目(item)：容器内部采用网格定位的子元素。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>项目只能是容器的顶层子元素，不包含项目的子元素</p></div><h3 id="行和列" tabindex="-1">行和列 <a class="header-anchor" href="#行和列" aria-label="Permalink to &quot;行和列&quot;">​</a></h3><p>容器里面的水平区域称为&quot;行&quot;（row），垂直区域称为&quot;列&quot;（column）。</p><p><img src="'+l+'" alt="flex-direction" loading="lazy"></p><p>上图中，水平的深色区域就是&quot;行&quot;，垂直的深色区域就是&quot;列&quot;。</p><h3 id="单元格" tabindex="-1">单元格 <a class="header-anchor" href="#单元格" aria-label="Permalink to &quot;单元格&quot;">​</a></h3><p>行和列的交叉区域，称为&quot;单元格&quot;（cell）。</p><h3 id="网格线" tabindex="-1">网格线 <a class="header-anchor" href="#网格线" aria-label="Permalink to &quot;网格线&quot;">​</a></h3><p>划分网格的线，称为&quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，n 行有 n + 1 根水平网格线，m 列有 m + 1 根垂直网格线，比如三行就有四根水平网格线。</p><p><img src="'+e+`" alt="flex-direction" loading="lazy"></p><h2 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">​</a></h2><h3 id="创建网格容器-display-grid" tabindex="-1">创建网格容器 - display: grid <a class="header-anchor" href="#创建网格容器-display-grid" aria-label="Permalink to &quot;创建网格容器 - display: grid&quot;">​</a></h3><ul><li><code>display: grid</code> 指定一个容器采用网格布局。</li><li><code>display: inline-grid</code> 指定一个容器采用行内网格布局。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>设为网格布局以后，容器子元素（项目）的 <code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p></div><h3 id="划分行和列-grid-template-columns-rows" tabindex="-1">划分行和列 - grid-template-columns(rows) <a class="header-anchor" href="#划分行和列-grid-template-columns-rows" aria-label="Permalink to &quot;划分行和列 - grid-template-columns(rows)&quot;">​</a></h3><ul><li><code>grid-template-columns: xxx</code>: 定义每一列的列宽以及列数</li><li><code>grid-template-rows: xxx</code>: 定义每一行的行高以及行数</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 指定了一个三行三列的网格，列宽和行高都是 100px。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 也可以使用百分比 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** grid-template-columns: 33.33% 33.33% 33.33%; */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** grid-template-rows: 33.33% 33.33% 33.33%; */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_1-repeat-重复次数" tabindex="-1">(1) repeat() - 重复次数 <a class="header-anchor" href="#_1-repeat-重复次数" aria-label="Permalink to &quot;(1) repeat() - 重复次数&quot;">​</a></h4><p>repeat()函数：行(列)重复部分，以一种更简洁的方式去表示大量而且重复列的表达式。</p><ul><li>第一个参数是重复的次数</li><li>第二个参数是所要重复的值</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 指定了一个三行三列的网格，列宽和行高都是 33% */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.33</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.33</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 重复某种模式也是可以的 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_2-auto-fill-和-auto-fill-关键字" tabindex="-1">(2) auto-fill 和 auto-fill 关键字 <a class="header-anchor" href="#_2-auto-fill-和-auto-fill-关键字" aria-label="Permalink to &quot;(2) auto-fill 和 auto-fill 关键字&quot;">​</a></h4><ul><li><p><code>auto-fill</code>：有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 auto-fill 关键字表示自动填充。</p></li><li><p><code>auto-fit</code>：两者的行为基本是相同的。只有当容器足够宽，可以在一行容纳所有单元格，并且单元格宽度不固定的时候，才会有<a href="https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/" target="_blank" rel="noreferrer">行为差异</a>：<code>auto-fill</code>会用空格子填满剩余宽度，<code>auto-fit</code> 则会尽量扩大单元格的宽度。</p></li></ul><p><a href="https://jsbin.com/cusenas/5/edit?html,css,output" target="_blank" rel="noreferrer">查看该示例</a></p><h4 id="_3-fr-关键字" tabindex="-1">(3) fr 关键字 <a class="header-anchor" href="#_3-fr-关键字" aria-label="Permalink to &quot;(3) fr 关键字&quot;">​</a></h4><p>fr 关键字（fraction 的缩写，意为&quot;片段&quot;）：表示比例关系。可以与绝对长度的单位结合使用</p><p><a href="https://jsbin.com/cusenas/6/edit?html,css,output" target="_blank" rel="noreferrer">查看该示例</a></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-minmax-长度范围" tabindex="-1">(4) minmax() - 长度范围 <a class="header-anchor" href="#_4-minmax-长度范围" aria-label="Permalink to &quot;(4) minmax() - 长度范围&quot;">​</a></h4><p>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 表示列宽不小于100px，不大于1fr */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1fr 1fr minmax(100px, 1fr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_5-auto-关键字-由浏览器自己决定长度" tabindex="-1">(5) auto 关键字 - 由浏览器自己决定长度 <a class="header-anchor" href="#_5-auto-关键字-由浏览器自己决定长度" aria-label="Permalink to &quot;(5) auto 关键字 - 由浏览器自己决定长度&quot;">​</a></h4><p>auto 关键字表示由浏览器自己决定长度。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 第二列的宽度，基本上等于该列单元格的最大宽度，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">除非单元格内容设置了min-width，且这个值大于最大宽度。 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 100px auto 100px;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_6-网格线的名称" tabindex="-1">(6) 网格线的名称 <a class="header-anchor" href="#_6-网格线的名称" aria-label="Permalink to &quot;(6) 网格线的名称&quot;">​</a></h4><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display: grid;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">方括号里面依次是这八根线的名字。 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] auto [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] auto [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="设置行-列-间距-row-column-gap" tabindex="-1">设置行(列)间距 - row(column)-gap <a class="header-anchor" href="#设置行-列-间距-row-column-gap" aria-label="Permalink to &quot;设置行(列)间距 - row(column)-gap&quot;">​</a></h3><ul><li><code>row-gap</code>: 设置行间距</li><li><code>column-gap</code>: 设置列间距</li><li><code>gap</code>: 是<code>column-gap</code>和<code>row-gap</code>的合并简写形式 --&gt; <code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code></li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>规范的早期版本将此这些属性命名为 grid-row(column)-gap，为了保持与旧网站的兼容性，浏览器仍然会将 grid-row(column)-gap 视为 row(column)-gap 的别名。</p><p><strong>同时支持 <code>flex</code> 布局的行(列)间距</strong></p></div><h3 id="设置区域-area-grid-template-areas" tabindex="-1">设置区域(area) - grid-template-areas <a class="header-anchor" href="#设置区域-area-grid-template-areas" aria-label="Permalink to &quot;设置区域(area) - grid-template-areas&quot;">​</a></h3><p>暂略</p><h3 id="控制自动布局算法-grid-auto-flow" tabindex="-1">控制自动布局算法 - grid-auto-flow <a class="header-anchor" href="#控制自动布局算法-grid-auto-flow" aria-label="Permalink to &quot;控制自动布局算法 - grid-auto-flow&quot;">​</a></h3><p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。</p><p>属性有两种形式：</p><ul><li>单个关键字：row、column，或 dense 中的一个。</li><li>两个关键字：row dense 或 column dense。</li></ul><p>取值:</p><ul><li><code>row</code>(默认值): 该关键字指定自动布局算法按照通过逐行填充来排列元素，在必要时增加新行。</li><li><code>column</code>: 该关键字指定自动布局算法通过逐列填充来排列元素，在必要时增加新列。</li><li><code>dense</code>: 该关键字指定自动布局算法使用一种“稠密”堆积算法，如果后面出现了稍小的元素，则会试图去填充网格中前面留下的空白。这样做会填上稍大元素留下的空白，但同时也可能导致原来出现的次序被打乱。</li></ul><p>如果省略它，使用一种「稀疏」算法，在网格中布局元素时，布局算法只会「向前」移动，永远不会倒回去填补空白。这保证了所有自动布局元素「按照次序」出现，即使可能会留下被后面元素填充的空白。</p><h3 id="整个内容区域在容器里面的水平-垂直-位置-justify-content、align-content、place-content" tabindex="-1">整个内容区域在容器里面的水平(垂直)位置 - justify-content、align-content、place-content <a class="header-anchor" href="#整个内容区域在容器里面的水平-垂直-位置-justify-content、align-content、place-content" aria-label="Permalink to &quot;整个内容区域在容器里面的水平(垂直)位置 - justify-content、align-content、place-content&quot;">​</a></h3><ul><li><code>justify-content</code>：设置整个内容区域在容器里面的水平位置（左中右）</li><li><code>align-content</code>：设置整个内容区域在容器里面的垂直位置（左中右）</li><li><code>place-content</code>：是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式</li></ul><p>取值:</p><ul><li>start - 对齐容器的起始边框。</li><li>end - 对齐容器的结束边框。</li><li>center - 容器内部居中。</li><li>stretch(默认值) - 项目大小没有指定时，拉伸占据整个网格容器。 <ul><li>如果项目都是固定大小的, 就不会拉伸。</li></ul></li><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li></ul><p><a href="https://jsbin.com/cusenas/10/edit?html,css,output" target="_blank" rel="noreferrer">查看该示例</a></p><h3 id="单元格内容的水平-垂直-位置-justify-items、align-items、place-items" tabindex="-1">单元格内容的水平(垂直)位置 - justify-items、align-items、place-items <a class="header-anchor" href="#单元格内容的水平-垂直-位置-justify-items、align-items、place-items" aria-label="Permalink to &quot;单元格内容的水平(垂直)位置 - justify-items、align-items、place-items&quot;">​</a></h3><ul><li><code>justify-items</code>：设置单元格内容的水平位置（左中右）</li><li><code>align-items</code>：设置单元格内容的垂直位置（上中下）</li><li><code>place-items</code>：是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</li></ul><p>取值:</p><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch（默认值）：拉伸，占满单元格的整个宽度。</li></ul><p><a href="https://jsbin.com/cusenas/10/edit?html,css,output" target="_blank" rel="noreferrer">查看该示例</a></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="隐式创建的行列大小-grid-auto-columns、grid-auto-rows" tabindex="-1">隐式创建的行列大小 - grid-auto-columns、grid-auto-rows <a class="header-anchor" href="#隐式创建的行列大小-grid-auto-columns、grid-auto-rows" aria-label="Permalink to &quot;隐式创建的行列大小 - grid-auto-columns、grid-auto-rows&quot;">​</a></h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有 3 列，但是某一个项目指定在第 5 行。这时，浏览器会自动生成多余的网格，以便放置项目。</p><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。</p><p><strong>如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</strong></p><h2 id="项目属性" tabindex="-1">项目属性 <a class="header-anchor" href="#项目属性" aria-label="Permalink to &quot;项目属性&quot;">​</a></h2><h3 id="指定网格项目的大小和位置-grid-column-row-start、grid-column-row-end" tabindex="-1">指定网格项目的大小和位置 - grid-column(row)-start、grid-column(row)-end <a class="header-anchor" href="#指定网格项目的大小和位置-grid-column-row-start、grid-column-row-end" aria-label="Permalink to &quot;指定网格项目的大小和位置 - grid-column(row)-start、grid-column(row)-end&quot;">​</a></h3><p>指定网格项目的大小和位置：</p><ul><li><code>grid-column-start</code>：左边框所在的垂直网格线位置</li><li><code>grid-column-end</code>：右边框所在的垂直网格线位置</li><li><code>grid-column</code>：是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的简写属性</li><li><code>grid-row-start</code>：上边框所在的水平网格线位置</li><li><code>grid-row-end</code>：下边框所在的水平网格线位置</li><li><code>grid-row</code>: 是 <code>grid-row-start</code> 和 <code>grid-row-end</code> 的简写属性</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** auto 关键字: 表示对网格的布置行为不做干涉，即自动布置，自动的 span 或者默认 span 值为 1。 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto / auto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 指定网格线的名字 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> / </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 整数: 网格线的位置, 如果给定一个负整数，则从显式网格的末端开始，反向计数 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 4;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1 / -1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** span 关键字, 跨越多少个网格 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><a href="https://jsbin.com/cusenas/11/edit?html,css,output" target="_blank" rel="noreferrer">查看此示例</a></p><h3 id="指定项目的区域-grid-area" tabindex="-1">指定项目的区域 - grid-area <a class="header-anchor" href="#指定项目的区域-grid-area" aria-label="Permalink to &quot;指定项目的区域 - grid-area&quot;">​</a></h3><p>暂略</p><h3 id="单个项目内容的水平-垂直-位置-justify-self、align-self、place-self" tabindex="-1">单个项目内容的水平(垂直)位置 - justify-self、align-self、place-self <a class="header-anchor" href="#单个项目内容的水平-垂直-位置-justify-self、align-self、place-self" aria-label="Permalink to &quot;单个项目内容的水平(垂直)位置 - justify-self、align-self、place-self&quot;">​</a></h3><p>与 <a href="#单元格内容的水平-垂直-位置-justify-items、align-items、place-items">单元格内容的水平(垂直)位置</a> 属性用法一致，但是只作用于单个项目</p><ul><li><code>justify-self</code>：设置单元格内容的水平位置（左中右）</li><li><code>align-self</code>：设置单元格内容的垂直位置（左中右）</li><li><code>place-self</code>：是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout" target="_blank" rel="noreferrer">MDN-网格布局</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">CSS Grid 网格布局教程</a></li></ul>`,84),r=[p];function h(d,k,o,c,g,u){return a(),i("div",null,r)}const b=s(t,[["render",h]]);export{m as __pageData,b as default};
