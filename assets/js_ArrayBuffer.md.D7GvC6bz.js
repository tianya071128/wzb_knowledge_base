import{_ as e,c as r,o as a,aR as o,bK as t}from"./chunks/framework.DLAwTCsc.js";const A=JSON.parse('{"title":"ArrayBuffer","description":"","frontmatter":{},"headers":[],"relativePath":"js/ArrayBuffer.md","filePath":"01_前端/03_js/18_ArrayBuffer.md","lastUpdated":1739447932000}'),c={name:"js/ArrayBuffer.md"},d=o('<h1 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h1><p>在 Web 开发中，经常会在以下两个场景遇到二进制数据：</p><ul><li>处理文件；</li><li>图像处理；</li></ul><p>基本的二进制对象是 <code>ArrayBuffer</code> ——对固定长度的连续内存空间的引用。</p><p><strong><code>ArrayBuffer</code></strong> 的特性：</p><ul><li>它的长度是固定的，我们无法增加或减少它的长度。</li><li>它正好占用了内存中的那么多空间。</li><li>要访问单个字节，需要另一个“视图”对象，而不是 <code>buffer[index]</code>。</li></ul><p>几乎任何对 <code>ArrayBuffer</code> 的操作，都需要一个视图。</p><ul><li>它可以是 TypedArray <ul><li><code>Uint8Array</code>，<code>Uint16Array</code>，<code>Uint32Array</code> —— 用于 8 位、16 位和 32 位无符号整数。</li><li><code>Uint8ClampedArray</code> —— 用于 8 位整数，在赋值时便“固定”其值。</li><li><code>Int8Array</code>，<code>Int16Array</code>，<code>Int32Array</code> —— 用于有符号整数（可以为负数）。</li><li><code>Float32Array</code>，<code>Float64Array</code> —— 用于 32 位和 64 位的有符号浮点数。</li></ul></li><li>或 <code>DataView</code> —— 使用方法来指定格式的视图，例如，<code>getUint8(offset)</code>。</li></ul><p><img src="'+t+'" alt="image-20211220091518429" loading="lazy"></p>',9),i=[d];function l(f,_,n,s,u,p){return a(),r("div",null,i)}const m=e(c,[["render",l]]);export{A as __pageData,m as default};
