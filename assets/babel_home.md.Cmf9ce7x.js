import{_ as s,c as a,o as e,aR as i}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"babel","description":"","frontmatter":{},"headers":[],"relativePath":"babel/home.md","filePath":"02_工程化/05_babel/01_index.md","lastUpdated":1739447932000}'),l={name:"babel/home.md"},n=i(`<h1 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;babel&quot;">​</a></h1><h2 id="babel-是什么" tabindex="-1">babel 是什么？ <a class="header-anchor" href="#babel-是什么" aria-label="Permalink to &quot;babel 是什么？&quot;">​</a></h2><p><strong>Babel 是一个工具链，主要用于将 ECMAScript 2015+ 代码转换为当前和旧版浏览器或环境中向后兼容的 JavaScript 版本。</strong></p><h2 id="babel-的用途" tabindex="-1">babel 的用途 <a class="header-anchor" href="#babel-的用途" aria-label="Permalink to &quot;babel 的用途&quot;">​</a></h2><ul><li><p>转换语法</p><blockquote><p>将代码中的 <code>esnext</code> 、<code>typescript</code>、<code>flow</code>等语法转换为目标环境支持的语法</p></blockquote></li><li><p>目标环境缺少的 <code>Polyfill</code> 功能</p><blockquote><p>有些语法是无法进行转换的，例如：<code>promise</code>、<code>Array.prototype.includes</code> 等语法，通过第三方 <code>polyfill</code>，填充这些语法(例如 core-js，配置 <code>preset-env</code> 预设的配置，只包含你需要的 polyfill)</p></blockquote></li><li><p>源代码转换</p><blockquote><p>babel 是一个转译器，暴露了很多 api，用这些可以完成 <strong>parse(源码到 AST 转换) -&gt; transform(AST 到 AST 转换) -&gt; generate(AST 生成 源码)</strong> ，可以利用特性，在 AST 层面上对源码进行转换</p></blockquote></li></ul><h2 id="babel-不能做什么" tabindex="-1">babel 不能做什么？ <a class="header-anchor" href="#babel-不能做什么" aria-label="Permalink to &quot;babel 不能做什么？&quot;">​</a></h2><ul><li><p>babel 是对 <code>ECMAScript</code> 语法的转换，对 <code>DOM</code>、<code>BOM</code> 的兼容性无法实现</p></li><li><p>对 <code>ES</code> 的有些语法规范无法转换(也不能 <code>Polyfill</code>)，例如： <code>Object.defineProperty</code>、<code>Proxy</code> 等一些语法规范无法处理</p><blockquote><p>还有一些语法的特性无法转换，例如 <code>promise</code> 的微任务特性，<a href="https://es6.ruanyifeng.com/#docs/class-extends#%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF" target="_blank" rel="noreferrer">class 的继承</a>等语法特性</p></blockquote></li></ul><h2 id="babel-的使用方式" tabindex="-1">babel 的使用方式 <a class="header-anchor" href="#babel-的使用方式" aria-label="Permalink to &quot;babel 的使用方式&quot;">​</a></h2><p>由于 JavaScript 社区没有统一的构建工具、框架、平台等等，因此 Babel 正式集成了对所有主流工具的支持</p><h3 id="babel-cli-babel-官方-cli" tabindex="-1">@babel/cli：babel 官方 cli <a class="header-anchor" href="#babel-cli-babel-官方-cli" aria-label="Permalink to &quot;@babel/cli：babel 官方 cli&quot;">​</a></h3><p>Babel 带有一个内置的 CLI，可用于从命令行编译文件。</p><p><a href="https://www.babeljs.cn/docs/babel-cli" target="_blank" rel="noreferrer">详细介绍</a></p><h3 id="babel-register-node-环境下实时编译" tabindex="-1">@babel/register：node 环境下实时编译 <a class="header-anchor" href="#babel-register-node-环境下实时编译" aria-label="Permalink to &quot;@babel/register：node 环境下实时编译&quot;">​</a></h3><p>通过 require 钩子（hook）。require 钩子 将自身绑定到 node 的 <code>require</code> 模块上，并在运行时进行即时编译(不会输出编译文件，而是边执行边编译)。</p><p><strong>但请注意这种方法并不适合正式产品环境使用。 直接部署用此方式编译的代码不是好的做法。 在部署之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</strong></p><p><a href="https://www.babeljs.cn/docs/babel-register" target="_blank" rel="noreferrer">详细介绍</a></p><h3 id="babel-standalone-浏览器和其他非-node-js-环境运行" tabindex="-1">@babel/standalone：浏览器和其他非 Node.js 环境运行 <a class="header-anchor" href="#babel-standalone-浏览器和其他非-node-js-环境运行" aria-label="Permalink to &quot;@babel/standalone：浏览器和其他非 Node.js 环境运行&quot;">​</a></h3><p>@babel/standalone 提供了一个独立的 Babel 构建，<strong>用于浏览器和其他非 Node.js 环境</strong>。</p><p>浏览器简单用法：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Load Babel --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- data-presets：指定的预设 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 自定义脚本 - type为 text/babel，会使用 babel 进行编译 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/babel&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-presets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;env,stage-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://www.babeljs.cn/docs/babel-standalone" target="_blank" rel="noreferrer">详细介绍</a></p><h3 id="前端主流工具集成" tabindex="-1">前端主流工具集成 <a class="header-anchor" href="#前端主流工具集成" aria-label="Permalink to &quot;前端主流工具集成&quot;">​</a></h3><p>Babel 正式集成了对所有主流工具的支持。</p><p>例如：<a href="https://github.com/tianya071128/wzb_knowledge_base/tree/master/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/webpack%405.68.0/loaders/babel-loader%408.2.3" target="_blank" rel="noreferrer">babel-loader(源码解读)</a></p><p><a href="https://www.babeljs.cn/setup" target="_blank" rel="noreferrer">其他工具集成</a></p><h3 id="babel-core-编程的方式" tabindex="-1">@babel/core：编程的方式 <a class="header-anchor" href="#babel-core-编程的方式" aria-label="Permalink to &quot;@babel/core：编程的方式&quot;">​</a></h3><p>这个包是 <code>babel</code> 的核心工具包，其他的方式都在集成了 <code>@babel/code</code> 包，一般情况下我们不需要直接使用。</p><p>简单使用例子：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">babel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transformFileAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 配置项 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // node 执行一下，会打印出转译后的结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意：<code>@babel/core</code> 内部会去加载配置(按照配置规则)，也可以传递一些<a href="https://www.babeljs.cn/docs/options#primary-options" target="_blank" rel="noreferrer">特定的配置项</a></p><p><a href="https://www.babeljs.cn/docs/babel-core" target="_blank" rel="noreferrer">详细介绍</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/user-handbook.md#making-your-own-preset" target="_blank" rel="noreferrer">babel 手册</a></li><li><a href="https://www.babeljs.cn/docs/config-files" target="_blank" rel="noreferrer">babel 中文文档</a></li></ul>`,33),t=[n];function r(p,h,k,b,o,d){return e(),a("div",null,t)}const g=s(l,[["render",r]]);export{E as __pageData,g as default};
