import{_ as s,c as e,o as a,aR as i}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"CSS 伪元素(CSS Pseudo-classes)","description":"","frontmatter":{"title":"CSS 伪元素(CSS Pseudo-classes)","date":"2021-10-21T15:00:00.000Z","permalink":"/css/pseudoClasses","categories":"-- css -- 伪元素","tags":[null]},"headers":[],"relativePath":"css/pseudoClasses.md","filePath":"01_前端/02_css/04_伪类.md","lastUpdated":1739447932000}'),t={name:"css/pseudoClasses.md"},l=i(`<h1 id="伪类" tabindex="-1">伪类 <a class="header-anchor" href="#伪类" aria-label="Permalink to &quot;伪类&quot;">​</a></h1><p>伪类并没有抽离出单独模块，主要是在 <a href="https://drafts.csswg.org/selectors-4/" target="_blank" rel="noreferrer">Selectors Level 3/4</a> 选择器模块中定义，还有一些在<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes#%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">其他规范</a>中定义</p><p>CSS <strong>伪类</strong> 是添加到选择器的关键字，指定要选择的元素的特殊状态。</p><h2 id="伪类和伪元素的区别" tabindex="-1">伪类和伪元素的区别 <a class="header-anchor" href="#伪类和伪元素的区别" aria-label="Permalink to &quot;伪类和伪元素的区别&quot;">​</a></h2><p><a href="/wzb_knowledge_base/css/pseudoElements.html#伪元素和伪类的区别">参考</a></p><h2 id="dom-树结构伪类" tabindex="-1">DOM 树结构伪类 <a class="header-anchor" href="#dom-树结构伪类" aria-label="Permalink to &quot;DOM 树结构伪类&quot;">​</a></h2><p>这一部分的伪类，是用来基于位于文档树中但不能由其他简单选择器或组合器表示的额外信息进行选择。</p><p><strong>注意：仅适用于文档树中的元素，不能匹配伪元素</strong></p><h3 id="root-匹配根元素" tabindex="-1">:root 匹配根元素 <a class="header-anchor" href="#root-匹配根元素" aria-label="Permalink to &quot;:root 匹配根元素&quot;">​</a></h3><p><strong>作用</strong>；匹配文档树的根元素。对于 HTML 来说，<code>:root</code> 表示 <code>&lt;html&gt;</code> 元素，除了优先级更高之外，与 html 选择器相同</p><p><strong>语法</strong>：<code>:root { 样式声明 }</code></p><p><strong>示例</strong>：在声明全局 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*" target="_blank" rel="noreferrer">CSS 变量</a>时 <strong><code>:root</code></strong> 会很有用：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --main-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hotpink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --pane-padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="empty-匹配没有子元素的元素" tabindex="-1">:empty 匹配没有子元素的元素 <a class="header-anchor" href="#empty-匹配没有子元素的元素" aria-label="Permalink to &quot;:empty 匹配没有子元素的元素&quot;">​</a></h3><p><strong>作用</strong>；匹配没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。注释或处理指令或<strong>伪元素</strong>都不会产生影响。</p><p><strong>语法</strong>：<code>选择器:empty { 样式声明 }</code></p><h3 id="child-子索引伪类" tabindex="-1">:*-child 子索引伪类 <a class="header-anchor" href="#child-子索引伪类" aria-label="Permalink to &quot;:\\*-child 子索引伪类&quot;">​</a></h3><p><strong>作用</strong>：这些伪类根据<strong>全部兄弟元素的索引</strong>来选择元素</p><p><strong>语法</strong>：<code>选择器:*-child </code></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>要选中元素，必须要同时满足两个条件：</p><ol><li>元素需要满足 <code>选择器:*-child</code> 选择器的部分</li><li>元素在其兄弟元素(全部兄弟)的索引满足 <code>*-child</code> 设置的索引条件</li></ol><p><strong>因为这是根据全部兄弟元素来排序的，所以也就可能会造成 <code>选择器:*-child</code> 选择器满足，但是索引不满足的情况</strong></p></div><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child" target="_blank" rel="noreferrer">:nth-child(an+b)</a>：找到所有兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为 CSS 伪类:nth-child 括号中表达式（an+b）匹配到的元素集合（n=0，1，2，3...）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-child" target="_blank" rel="noreferrer">:nth-last-child(an+b)</a>：从兄弟节点中从后往前匹配处于某些位置的元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child" target="_blank" rel="noreferrer">:first-child</a>：表示在一组兄弟元素中的第一个元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-child" target="_blank" rel="noreferrer">:last-child</a>：表示在一组兄弟元素中的最后一个元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child" target="_blank" rel="noreferrer">:only-child</a>：匹配没有任何兄弟元素的元素。等效的选择器还可以写成 <code>:first-child:last-child</code>或者<code>:nth-child(1):nth-last-child(1)</code>,当然,前者的权重会低一点.</li></ul><h3 id="of-type-类型化子索引伪类" tabindex="-1">:*-of-type 类型化子索引伪类 <a class="header-anchor" href="#of-type-类型化子索引伪类" aria-label="Permalink to &quot;:\\*-of-type 类型化子索引伪类&quot;">​</a></h3><p><strong>作用</strong>：这些伪类类似于 <code>*-child</code>，但是是<strong>基于具有相同类型的兄弟元素的索引</strong>来选择元素</p><p><strong>语法</strong>：<code>选择器:*-of-type </code></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>要命中元素，与 <code>*-child</code> 一样，需要满足选择器和索引两个条件，唯一的区别就是<strong>这个索引是基于具有相同类型(满足选择器)的兄弟元素</strong>，也就排除了 不满足选择器的兄弟元素</p></div><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type" target="_blank" rel="noreferrer">:nth-of-type(an+b)</a>：找到所有相同类型的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为 CSS 伪类:nth-child 括号中表达式（an+b）匹配到的元素集合（n=0，1，2，3...）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-of-type" target="_blank" rel="noreferrer">:nth-last-of-type()</a>：从相同类型兄弟节点中从后往前匹配处于某些位置的元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-of-type" target="_blank" rel="noreferrer">:first-of-type</a>：表示一组兄弟元素中其类型的第一个元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-of-type" target="_blank" rel="noreferrer">:last-of-type</a>：表示一组兄弟元素中其类型的最后一个元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-of-type" target="_blank" rel="noreferrer">:only-of-type</a>：任意一个元素，这个元素没有其他相同类型的兄弟元素。</li></ul><h2 id="否定伪类" tabindex="-1">否定伪类 <a class="header-anchor" href="#否定伪类" aria-label="Permalink to &quot;否定伪类&quot;">​</a></h2><h3 id="not-匹配不符合条件元素" tabindex="-1">:not() 匹配不符合条件元素 <a class="header-anchor" href="#not-匹配不符合条件元素" aria-label="Permalink to &quot;:not() 匹配不符合条件元素&quot;">​</a></h3><p><strong>作用</strong>； 用来匹配不符合一组选择器的元素</p><p><strong>语法</strong>：<code>:not(选择器) { 样式声明 }</code>，将一个或多个以逗号分隔的选择器列表作为其参数。<strong>选择器中不得包含另一个否定选择符或 伪元素。</strong></p><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li><code>:not()</code> 伪类不能被嵌套，这意味着 <code>:not(:not(...))</code> 是无效的。</li><li>由于伪元素不是简单的选择器，他们不能被当作 <code>:not()</code> 中的参数，形如 <code>:not(p::before)</code> 这样的选择器将不会工作。</li><li>可以利用这个伪类写一个完全没有用处的选择器。例如， <code>:not(*)</code> 匹配任何非元素的元素，因此，这个规则将永远不会被应用。</li><li>可以利用这个伪类提高规则的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity" target="_blank" rel="noreferrer">优先级</a>。例如， <code>#foo:not(#bar)</code> 和 <code>#foo</code> 会匹配相同的元素，但是前者的优先级更高。</li><li><code>:not(.foo)</code> 将匹配任何非 <code>.foo</code> 的元素，包括 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code>。</li><li>这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， body :not(table) a 依旧会应用到表格元素 <code>&lt;table&gt;</code> 内部的 <code>&lt;a&gt;</code> 上, 因为 <code>&lt;tr&gt;</code>将会被 :not(table) 这部分选择器匹配。</li></ul></div><h2 id="用户操作伪类" tabindex="-1">用户操作伪类 <a class="header-anchor" href="#用户操作伪类" aria-label="Permalink to &quot;用户操作伪类&quot;">​</a></h2><p>此类用于选择<strong>用户正在操作的元素</strong>，这些伪类并不相互排斥。一个元素可以同时匹配多个这样的伪类。</p><h3 id="hover-指针悬停伪类" tabindex="-1">:hover 指针悬停伪类 <a class="header-anchor" href="#hover-指针悬停伪类" aria-label="Permalink to &quot;:hover 指针悬停伪类&quot;">​</a></h3><p><strong>作用</strong>：用户使用指示设备虚指一个元素（没有激活它）的情况</p><p><strong>语法</strong>：<code>选择器:hover { 样式声明 }</code></p><h3 id="active-激活伪类" tabindex="-1">:active 激活伪类 <a class="header-anchor" href="#active-激活伪类" aria-label="Permalink to &quot;:active 激活伪类&quot;">​</a></h3><p><strong>作用</strong>：匹配被用户激活的元素，<strong>当用鼠标交互时，它代表的是用户按下按键和松开按键之间的时间。</strong></p><p><strong>语法</strong>：<code>选择器:active { 样式声明 }</code></p><h3 id="focus-获得焦点伪类" tabindex="-1">:focus 获得焦点伪类 <a class="header-anchor" href="#focus-获得焦点伪类" aria-label="Permalink to &quot;:focus 获得焦点伪类&quot;">​</a></h3><p><strong>作用</strong>：获得焦点的元素（如表单输入）。当用户点击或触摸元素或<strong>通过键盘的 “tab” 键</strong>选择它时会被触发。</p><p><strong>语法</strong>：<code>选择器:focus { 样式声明 }</code></p><p><strong>注意</strong>：</p><ul><li>此伪类仅适用于焦点元素本身。如果要选择包含焦点元素的元素，请使用 <code>:focus-within</code></li><li>对于哪些元素可以获取 <code>:focus</code> 可能存在文档语言或实现特定的限制。例如，[<a href="https://drafts.csswg.org/selectors-4/#biblio-html" target="_blank" rel="noreferrer">HTML]</a>定义了一个<a href="https://html.spec.whatwg.org/multipage/interaction.html#focusable-area" target="_blank" rel="noreferrer">可聚焦区域</a>列表。</li></ul><h3 id="focus-within-焦点容器伪类" tabindex="-1">:focus-within 焦点容器伪类 <a class="header-anchor" href="#focus-within-焦点容器伪类" aria-label="Permalink to &quot;:focus-within 焦点容器伪类&quot;">​</a></h3><p><strong>作用</strong>：<strong>元素自身</strong>或者<strong>它的某个后代</strong>匹配 <code>:focus</code> 伪类，就会触发 <code>:focus-within</code></p><p><strong>语法</strong>：<code>选择器:focus-within { 样式声明 }</code></p><p><strong>注意</strong>：IE 不支持</p><h2 id="位置伪类" tabindex="-1">位置伪类 <a class="header-anchor" href="#位置伪类" aria-label="Permalink to &quot;位置伪类&quot;">​</a></h2><h3 id="链接伪类-link-和-visited" tabindex="-1">链接伪类 :link 和 :visited <a class="header-anchor" href="#链接伪类-link-和-visited" aria-label="Permalink to &quot;链接伪类 :link 和 :visited&quot;">​</a></h3><ul><li>:link：选中所有尚未访问的链接</li><li>:visited：用户已访问过的链接，出于隐私原因，可以使用此选择器<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited#%E9%99%90%E5%88%B6" target="_blank" rel="noreferrer">修改的样式</a>非常有限。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>对于 <code>a</code> 链接，<code>:hover</code>、<code>:active</code>、<code>:link</code>、<code>:visited</code> 这几个伪类可能会相互覆盖影响(优先级问题)，最好遵循 LVHA 的先后顺序进行设置，即：<code>:link</code> — <code>:visited</code> — <code>:hover</code> — <code>:active</code></p></div><p><strong>例子</strong>：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 未访问链接 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:visited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 已访问链接 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 用户鼠标悬停 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 激活链接 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#eee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 激活段落 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="目标伪类-target" tabindex="-1">目标伪类 :target <a class="header-anchor" href="#目标伪类-target" aria-label="Permalink to &quot;目标伪类 :target&quot;">​</a></h3><p><strong>作用</strong>：代表一个唯一的页面元素(目标元素)，其 id 与当前 URL 片段匹配 .</p><p><strong>语法</strong>：<code>:target { 样式声明 }</code></p><p><strong>例如</strong>：当前页面 URL 为 <code>http://www.example.com/index.html#section2</code>，那么元素 <code>&lt;section id=&quot;section2&quot;&gt;Example&lt;/section&gt;</code> 就会被 <code>:target</code> 选中</p><h2 id="输入-表单-伪类" tabindex="-1">输入(表单)伪类 <a class="header-anchor" href="#输入-表单-伪类" aria-label="Permalink to &quot;输入(表单)伪类&quot;">​</a></h2><p>此类主要适用于接受用户输入的元素，一般为表单元素</p><h3 id="启用-禁用-伪类-enabled-和-disabled" tabindex="-1">启用(禁用)伪类 :enabled 和 :disabled <a class="header-anchor" href="#启用-禁用-伪类-enabled-和-disabled" aria-label="Permalink to &quot;启用(禁用)伪类 :enabled 和 :disabled&quot;">​</a></h3><ul><li><p>:enabled 启用元素</p><p><strong>作用</strong>：表示任何被启用的元素。如果一个元素能够被激活（如选择、点击或接受文本输入），或者能够获取焦点，则该元素是启用的。</p><p><strong>注意</strong>：此类元素具有相应的禁用状态。也就是说，使用属性 <code>contenteditable</code> 可编辑元素(即富文本编辑器)不会被选中</p></li><li><p>:disabled 禁用元素</p><p><strong>作用</strong>：任何被禁用的元素</p></li></ul><h3 id="可写-只读-伪类-可变性伪类-read-write-和-read-only" tabindex="-1">可写(只读)伪类(可变性伪类) :read-write 和 :read-only <a class="header-anchor" href="#可写-只读-伪类-可变性伪类-read-write-和-read-only" aria-label="Permalink to &quot;可写(只读)伪类(可变性伪类) :read-write 和 :read-only&quot;">​</a></h3><ul><li>:read-only：表示元素不可被用户编辑的状态</li><li>:read-write：表示元素可以被用户编辑</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>IE 中不支持，Firefox 中需要加前缀(<code>-moz-</code>)</li><li>这两个伪类不只是支持表单元素 <ol><li>对于 <code>:read-write</code>：会选择所有可以被用户编辑的元素，例如设置了 <code>contenteditable</code> 属性的元素。</li><li>对于 <code>:read-only</code>：会选择所有的不能被用户编辑的元素。</li></ol></li></ol></div><h3 id="选中伪类-checked" tabindex="-1">选中伪类 :checked <a class="header-anchor" href="#选中伪类-checked" aria-label="Permalink to &quot;选中伪类 :checked&quot;">​</a></h3><p><strong>作用</strong>：表示任何处于选中状态的<strong>radio</strong>(<code>&lt;input type=&quot;radio&quot;&gt;</code>), <strong>checkbox</strong> (<code>&lt;input type=&quot;checkbox&quot;&gt;</code>) 或(&quot;select&quot;) 元素中的<strong>option</strong> HTML 元素(&quot;option&quot;)。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://drafts.csswg.org/selectors-4/#child-index" target="_blank" rel="noreferrer">w3c-Selectors Level 4</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" target="_blank" rel="noreferrer">MDN</a></p>`,70),n=[l];function o(r,h,d,p,c,k){return a(),e("div",null,n)}const u=s(t,[["render",o]]);export{b as __pageData,u as default};
