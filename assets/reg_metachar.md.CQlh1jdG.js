import{_ as t,c as a,o as e,aR as d}from"./chunks/framework.DLAwTCsc.js";const q=JSON.parse('{"title":"元字符","description":"","frontmatter":{},"headers":[],"relativePath":"reg/metachar.md","filePath":"04_更多/03_正则/02_元字符.md","lastUpdated":1739447932000}'),r={name:"reg/metachar.md"},o=d('<h1 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h1><h2 id="元字符类型" tabindex="-1">元字符类型 <a class="header-anchor" href="#元字符类型" aria-label="Permalink to &quot;元字符类型&quot;">​</a></h2><p>JavaScript 支持的元字符可分为成如下类型：</p><h3 id="基础元字符" tabindex="-1">基础元字符 <a class="header-anchor" href="#基础元字符" aria-label="Permalink to &quot;基础元字符&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符(\\n、\\r)之外的任何单个字符。<br>要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用像 (.|\\n) 的模式</td></tr><tr><td>\\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、<br>或一个八进制转义符。例如，&#39;n&#39; 匹配字符 &quot;n&quot;。&#39;\\n&#39; 匹配一个换行符。<br>序列 &#39;\\&#39; 匹配 &quot;&quot; 而 &quot;(&quot; 则匹配 &quot;(&quot;。</td></tr><tr><td>[]</td><td>字符集合。匹配该字符集合中的一个字符</td></tr><tr><td>[^]</td><td>负值字符集合。排除该字符集合</td></tr><tr><td>-</td><td>定义一个范围（例如[A-Z]），需与 [] 配合使用</td></tr><tr><td>|</td><td>逻辑或操作符</td></tr></tbody></table><h3 id="特殊字符元字符" tabindex="-1">特殊字符元字符 <a class="header-anchor" href="#特殊字符元字符" aria-label="Permalink to &quot;特殊字符元字符&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\\w</td><td>匹配字母、数字、下划线。等价于&#39;[A-Za-z0-9_]&#39;。</td></tr><tr><td>\\W</td><td>匹配非字母、数字、下划线。等价于 &#39;[^A-Za-z0-9_]&#39;。</td></tr><tr><td>\\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td></tr></tbody></table><ul><li><p>非常用特殊字符元字符</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\\f</td><td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td></tr><tr><td>\\n</td><td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td></tr><tr><td>\\r</td><td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td></tr><tr><td>\\t</td><td>匹配一个制表符。等价于 \\x09 和 \\cI。</td></tr><tr><td>\\v</td><td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td></tr><tr><td>\\cx</td><td>匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。<br>x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</td></tr><tr><td>\\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。<br>例如，&#39;\\x41&#39; 匹配 &quot;A&quot;。&#39;\\x041&#39; 则等价于 &#39;\\x04&#39; &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。</td></tr></tbody></table></li></ul><h3 id="量词元字符" tabindex="-1">量词元字符 <a class="header-anchor" href="#量词元字符" aria-label="Permalink to &quot;量词元字符&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符（子表达式）的零次或多次重复</td></tr><tr><td>*?</td><td>*的懒惰型版本</td></tr><tr><td>+</td><td>匹配前一个字符（子表达式）的一次或多次重复</td></tr><tr><td>+?</td><td>+的懒惰型版本</td></tr><tr><td>?</td><td>匹配前一个字符（子表达式）的零次或一次重复</td></tr><tr><td>{n}</td><td>匹配前一个字符（子表达式）的 <em>n</em> 次重复</td></tr><tr><td>{m, n}</td><td>匹配前一个字符（子表达式）的至少 <em>m</em> 次且至多 <em>n</em> 次重复</td></tr><tr><td>{n, }</td><td>匹配前一个字符（子表达式）的 <em>n</em> 次或更多次重复</td></tr><tr><td>{n, }?</td><td>{n, }的懒惰型版本。{n} 等其他不是贪婪型的量词, 没有对应的懒惰型</td></tr></tbody></table><h3 id="位置元字符" tabindex="-1">位置元字符 <a class="header-anchor" href="#位置元字符" aria-label="Permalink to &quot;位置元字符&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的开始位置。<br>如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。<br>如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之前的位置。</td></tr><tr><td>\\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。<br>例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</td></tr><tr><td>\\B</td><td>匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</td></tr></tbody></table><h3 id="反向引用和环视" tabindex="-1">反向引用和环视 <a class="header-anchor" href="#反向引用和环视" aria-label="Permalink to &quot;反向引用和环视&quot;">​</a></h3><table><thead><tr><th><div style="width:90px;">字符</div></th><th>描述</th></tr></thead><tbody><tr><td>(pattern)</td><td>定义一个子表达式。匹配 pattern 并获取这一匹配。<br>所获取的匹配可以从产生的 Matches 集合得到</td></tr><tr><td>(?&lt;Name&gt;x)</td><td>**具名捕获组：**匹配&quot;x&quot;并将其存储在返回的匹配项的 groups 属性中，该属性位于``指定的名称下。<a href="https://es6.ruanyifeng.com/#docs/regex#%E5%85%B7%E5%90%8D%E7%BB%84%E5%8C%B9%E9%85%8D" target="_blank" rel="noreferrer">ES2018中新增</a></td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</td></tr><tr><td>x(?=y)</td><td>肯定式向前查看，匹配&#39;x&#39;仅仅当&#39;x&#39;后面跟着&#39;y&#39;<br>这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，&quot;Windows(?=95|98|NT|2000)能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;。<strong>不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</strong>。</td></tr><tr><td>x(?!y)</td><td>否定式向前查看。仅仅当&#39;x&#39;后面不跟着&#39;y&#39;时匹配&#39;x&#39;。<strong>不消耗字符</strong>。</td></tr><tr><td>(?&lt;=y)x</td><td>肯定式向后查看。匹配&#39;x&#39;仅当&#39;x&#39;前面是&#39;y&#39;。<strong>不消耗字符</strong>。</td></tr><tr><td>(?&lt;!y)x</td><td>仅仅当&#39;x&#39;前面不是&#39;y&#39;时匹配&#39;x&#39;。<strong>不消耗字符</strong>。</td></tr><tr><td>\\n</td><td>匹配第n个子表达式；\\2 匹配第二个子表达式，以此类推</td></tr><tr><td>\\k&lt;组名&gt;</td><td>在正则表达式内部引用某个“具名组匹配”; <a href="https://es6.ruanyifeng.com/#docs/regex#%E5%BC%95%E7%94%A8" target="_blank" rel="noreferrer">ES2018中新增</a></td></tr></tbody></table><h2 id="基本元字符" tabindex="-1">基本元字符 <a class="header-anchor" href="#基本元字符" aria-label="Permalink to &quot;基本元字符&quot;">​</a></h2><h3 id="匹配单个字符" tabindex="-1">匹配单个字符(.) <a class="header-anchor" href="#匹配单个字符" aria-label="Permalink to &quot;匹配单个字符(.)&quot;">​</a></h3><p>.字符可以匹配除 <strong>行终止符(<code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or <code>\\u2029</code>. )</strong> 之外的任何单个字符、字母、数字甚至是 . <strong>字符本身</strong>。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>在字符集（<code>[]</code>）内，点失去了它的特殊意义，并与文字点匹配。</li></ul></div><h3 id="转义字符" tabindex="-1">转义字符(\\) <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符(\\\\)&quot;">​</a></h3><p>应特殊处理或“转义”后面的字符：</p><ul><li>对于通常按字面处理的字符，表示下一个字符是特殊的，不能按字面解释。例如，<code>/b/</code> 匹配字符“b”。通过在“b”前面放置反斜杠，即使用 <code>/\\b/</code>，字符变得特殊以表示匹配单词边界。</li><li>对于通常被特殊对待的字符，表示下一个字符不是特殊的，应该按字面意思解释。例如，“*”是一个特殊字符，表示应该匹配前面的字符出现 0 次或多次；例如，<code>/a*/</code> 示匹配 0 个或多个“a”。要从字面上匹配 <code>*</code> 需在其前面加上反斜杠；例如，<code>/a\\*/</code> 匹配“a*”。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>要从字面上匹配此字符，请将其转义。换句话说就是搜索 <code>\\</code> 需要使用 <code>/\\\\/</code>。</p></div><h3 id="字符集合-和字符范围" tabindex="-1">字符集合([])和字符范围(-) <a class="header-anchor" href="#字符集合-和字符范围" aria-label="Permalink to &quot;字符集合([])和字符范围(-)&quot;">​</a></h3><p>在正则表达式里，可以使用元字符<code>[</code>和<code>]</code>来定义一个字符集合：</p><ul><li><p>出现在<code>[</code>和<code>]</code>之间的所有字符都是该集合的组成部分，必须<strong>匹配其中某个成员</strong>。各个字符之间是 OR 的关系，而不是 AND 的关系</p></li><li><p>可以使用连字符指定字符范围。<strong>但如果连字符出现在方括号中的第一个或最后一个字符，则将其视为字面连字符，作为普通字符包含在字符类中。</strong></p><ul><li>**字符区间的首、尾字符可以是 ASCII 字符表里的任意字符。**但在实际工作中，最常用的字符区间还是数字字符区间和字母字符区间。</li><li>A-Z，匹配从 A 到 Z 的所有大写字母。</li><li>a-z，匹配从 a 到 z 的所有小写字母。</li><li>A-F，匹配从 A 到 F 的所有大写字母。</li><li>A-z，匹配从 ASCII 字符 A 到 ASCII 字符 z 的所有字母。这个模 式一般不常用，因为它还包含[和^等在 ASCII 字符表里排列在 Z 和 a 之间的字符。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>在定义一个字符区间的时候，一定要避免让这个区间的尾字符小于它的首字符（例如[3-1]）。这种区间是没有意义的，而且往往会让整个模式失效。</li><li>-（连字符）是一个特殊的元字符，它只有出现在<code>[</code>和<code>]</code>之间的时候才是元字符。在字符集合以外的地方，<code>-</code>只是一个普通字符，只能与-本身相匹配。因此，在正则表达式里，<code>-</code> 字符不需要被转义。</li></ul></div></li><li><p>在同一个字符集合里可以给出多个字符区间。</p></li></ul><h3 id="负值字符集合" tabindex="-1">负值字符集合([^]) <a class="header-anchor" href="#负值字符集合" aria-label="Permalink to &quot;负值字符集合([^])&quot;">​</a></h3><p>与字符集合(<code>[]</code>)的作用相反，<strong>排除字符集合里指定的那些字符</strong>：</p><ul><li><code>^</code> 的效果将作用于给定字符集合里的所有字符或字符区间，而不是仅限于紧跟在^字符后面的那一个字符或字符区间。</li></ul><h3 id="逻辑或操作符" tabindex="-1">逻辑或操作符(|) <a class="header-anchor" href="#逻辑或操作符" aria-label="Permalink to &quot;逻辑或操作符(|)&quot;">​</a></h3><p>x|y：匹配‘x’或者‘y’。例如，/green|red/匹配“green apple”中的‘green’和“red apple”中的‘red’</p><h2 id="特殊字符元字符-1" tabindex="-1">特殊字符元字符 <a class="header-anchor" href="#特殊字符元字符-1" aria-label="Permalink to &quot;特殊字符元字符&quot;">​</a></h2><h3 id="匹配数字-d" tabindex="-1">匹配数字(\\d) <a class="header-anchor" href="#匹配数字-d" aria-label="Permalink to &quot;匹配数字(\\d)&quot;">​</a></h3><p>匹配任何数字 (阿拉伯数字)。相当于 <code>[0-9]</code>。</p><h3 id="匹配非数字-d" tabindex="-1">匹配非数字(\\D) <a class="header-anchor" href="#匹配非数字-d" aria-label="Permalink to &quot;匹配非数字(\\D)&quot;">​</a></h3><p>匹配任何非数字 (阿拉伯数字) 的字符。相当于<code>[^0-9]</code>。</p><h3 id="匹配字母数字-w" tabindex="-1">匹配字母数字(\\w) <a class="header-anchor" href="#匹配字母数字-w" aria-label="Permalink to &quot;匹配字母数字(\\w)&quot;">​</a></h3><p>任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）</p><h3 id="匹配非字母数字-w" tabindex="-1">匹配非字母数字(\\W) <a class="header-anchor" href="#匹配非字母数字-w" aria-label="Permalink to &quot;匹配非字母数字(\\W)&quot;">​</a></h3><p>任何一个非字母数字或非下划线字符（等价于[^a-zA-Z0-9_]）</p><h3 id="匹配空白字符-s" tabindex="-1">匹配空白字符(\\s) <a class="header-anchor" href="#匹配空白字符-s" aria-label="Permalink to &quot;匹配空白字符(\\s)&quot;">​</a></h3><p>匹配单个空白字符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。相当于 <code>[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>。</p><h3 id="匹配非空白字符-s" tabindex="-1">匹配非空白字符(\\S) <a class="header-anchor" href="#匹配非空白字符-s" aria-label="Permalink to &quot;匹配非空白字符(\\S)&quot;">​</a></h3><p>匹配单个非空白字符</p><h3 id="匹配单个空白字符-f、-n、-r、-t、-v" tabindex="-1">匹配单个空白字符(\\f、\\n、\\r、\\t、\\v) <a class="header-anchor" href="#匹配单个空白字符-f、-n、-r、-t、-v" aria-label="Permalink to &quot;匹配单个空白字符(\\f、\\n、\\r、\\t、\\v)&quot;">​</a></h3><p>匹配文本中的非打印空白字符</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\\f</td><td>换页符</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车符</td></tr><tr><td>\\t</td><td>制表符（Tab 键）</td></tr><tr><td>\\v</td><td>垂直制表符</td></tr></tbody></table><h2 id="量词元字符-1" tabindex="-1">量词元字符 <a class="header-anchor" href="#量词元字符-1" aria-label="Permalink to &quot;量词元字符&quot;">​</a></h2><p>量词表示要匹配的字符或表达式的数量。</p><h3 id="匹配一个或多个字符" tabindex="-1">匹配一个或多个字符(+) <a class="header-anchor" href="#匹配一个或多个字符" aria-label="Permalink to &quot;匹配一个或多个字符(+)&quot;">​</a></h3><p>匹配 1 次或更多次。等价于 <code>{1,}</code>：</p><ul><li>一般来说，当在字 符集合里使用的时候，像<code>.</code>和<code>+</code>这样的元字符将被解释为普通字 符，不需要转义，但转义了也没有坏处。</li></ul><h3 id="匹配零个或多个字符" tabindex="-1">匹配零个或多个字符(*) <a class="header-anchor" href="#匹配零个或多个字符" aria-label="Permalink to &quot;匹配零个或多个字符(*)&quot;">​</a></h3><p><code>*</code>的用法与<code>+</code>完全一样，只要把它放在某个字符（或字符集合）的后面，就可以匹配该字符（或字符集合）出现零次或多次的情况。</p><h3 id="匹配零个或一个字符" tabindex="-1">匹配零个或一个字符(?) <a class="header-anchor" href="#匹配零个或一个字符" aria-label="Permalink to &quot;匹配零个或一个字符(?)&quot;">​</a></h3><p><code>?</code>只能匹配某个字符（或字符集合）的零次或一次出现，最多不超过一次</p><h3 id="重复匹配" tabindex="-1">重复匹配({}) <a class="header-anchor" href="#重复匹配" aria-label="Permalink to &quot;重复匹配({})&quot;">​</a></h3><p>正则表达式里的+、*和?解决了许多问题，但存在一些问题：</p><ul><li>+和*匹配的字符个数没有上限。我们无法为其匹配的字符个数设定一个最大值。</li><li>+、*和?匹配的字符最小数量是零个或一个。我们无法明确地为其匹配的字符个数另行设定一个最小值。</li><li>我们无法指定具体的匹配次数。</li></ul><p>为了解决这些问题并对重复性匹配有<strong>更多的控制权</strong>，正则表达式允许使用<strong>重复范围（interval）</strong>。重复范围在{和}之间指定。</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><em>x</em>{<em>n</em>}</td><td>具体的重复匹配。其中“n”是一个非负整数，与前一项“x”至少匹配“n”次。</td></tr><tr><td><em>x</em>{<em>n</em>,<em>m</em>}</td><td>区间范围。其中“n”和“m”为非负整数，并且 <code>*m* &gt;= *n*</code>。与项“x”至少匹配“n”次，至多匹配“m”次。</td></tr><tr><td><em>x</em>{<em>n</em>,}</td><td>匹配“至少重复多少次”。其中“n”是一个非负整数，与前一项“x”至少匹配“n”次。</td></tr></tbody></table><h3 id="懒惰型量词" tabindex="-1">懒惰型量词 <a class="header-anchor" href="#懒惰型量词" aria-label="Permalink to &quot;懒惰型量词&quot;">​</a></h3><p><code>*</code>和<code>+</code>等都是所谓的“贪婪型”（greedy）元字符，其匹配行为是多多益善而不是适可而止。会尽可能地从一段文本的开头一直匹配到末尾，而不是碰到第一个匹配时就停止。</p><p>与之对应的，“懒惰型”（lazy）版本：<strong>其匹配尽可能少的字符，而非尽可能多地去匹配</strong>。懒惰型量词的写法是在贪婪型量词后面加上一个?。</p><table><thead><tr><th>贪婪型量词</th><th>懒惰型量词</th></tr></thead><tbody><tr><td>*</td><td>*?</td></tr><tr><td>+</td><td>+?</td></tr><tr><td>{n,}</td><td>{n,}?</td></tr><tr><td>{n,m}</td><td>{n,m}?</td></tr></tbody></table><h2 id="位置元字符-1" tabindex="-1">位置元字符 <a class="header-anchor" href="#位置元字符-1" aria-label="Permalink to &quot;位置元字符&quot;">​</a></h2><p>对某段文本内的特定位置进行匹配，这就引出了位置匹配的概念。</p><h3 id="单词边界-b、-b" tabindex="-1">单词边界(\\b、\\B) <a class="header-anchor" href="#单词边界-b、-b" aria-label="Permalink to &quot;单词边界(\\b、\\B)&quot;">​</a></h3><p>\\b：匹配一个单词的边界</p><p>\\B: 匹配非单词边界</p><ul><li>\\b 到底匹配什么东西呢？正则表达式引擎不懂英语（事实上，它不懂任何人类语言），所以也不知道什么是单词边界。简单地说，\\b 匹配的是字符之间的一个位置：一边是单词（能够被\\w 匹配的字母数字字符和下划线），另一边是其他内容（能够被\\W 匹配的字符）。</li><li>\\b 匹配的是一个位置，而不是任何实际的字符。</li></ul><h3 id="字符串边界-、" tabindex="-1">字符串边界(^、$) <a class="header-anchor" href="#字符串边界-、" aria-label="Permalink to &quot;字符串边界(^、$)&quot;">​</a></h3><p>^: 字符串开头，如果多行模式设为 true，<code>^</code> 也可以匹配换行符之后的起始位置（新行）</p><p>$: 字符串结尾，如果多行模式设为 true，<code>$</code> 还能匹配换行符之后的结束位置</p><ul><li>有些元字符拥有多种用途，^就是其中之一。当它出现在字符集合里（位于[和]之间）且紧跟在左方括号[的后面时，它才表示排除该字符集合。</li></ul><h2 id="子表达式和反向引用" tabindex="-1">子表达式和反向引用 <a class="header-anchor" href="#子表达式和反向引用" aria-label="Permalink to &quot;子表达式和反向引用&quot;">​</a></h2><h3 id="子表达式" tabindex="-1">子表达式(()) <a class="header-anchor" href="#子表达式" aria-label="Permalink to &quot;子表达式(())&quot;">​</a></h3><p>划分子表达式的目的是为了将其视为单一的实体来使用，对表达式进行分组：</p><ul><li><p>此时量词元字符作用的就是整个子表达式：/(foo)+/ 匹配 foo、foofoo</p></li><li><p>其中括号被称为<em>捕获括号</em>，子表达式里面的内容分成 Group，可在反向引用和正则表达式的替换环节中引用</p></li><li><p>子表达式允许嵌套。</p></li></ul><h3 id="非捕获子表达式" tabindex="-1">非捕获子表达式((:)) <a class="header-anchor" href="#非捕获子表达式" aria-label="Permalink to &quot;非捕获子表达式((\\:))&quot;">​</a></h3><p>匹配子表达式 但是不记住匹配项，这种括号叫作<em>非捕获括号</em>。</p><ul><li>与 () 子表达式捕获括号相反，子表达式里面的内容不会分成 Group，也就无法在反向引用和正则表达式的替换环节中引用</li></ul><h3 id="具名捕获子表达式-组名" tabindex="-1">具名捕获子表达式((?&lt;组名&gt;)) <a class="header-anchor" href="#具名捕获子表达式-组名" aria-label="Permalink to &quot;具名捕获子表达式((?&lt;组名&gt;))&quot;">​</a></h3><p>(?&lt;Name&gt;x)：**具名捕获组：**匹配&quot;x&quot;并将其存储在返回的匹配项的 groups 属性中，该属性位于``指定的名称下。尖括号 (<code>&lt;</code> 和 <code>&gt;</code>) 用于组名。</p><p>例如，使用正则 <code>/-(?&lt;customName&gt;\\w)/</code> 匹配“web-doc” 中的“d”</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;web-doc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">-(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customName</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).groups </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{customName: &quot;d&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="反向引用-n" tabindex="-1">反向引用(\\n) <a class="header-anchor" href="#反向引用-n" aria-label="Permalink to &quot;反向引用(\\n)&quot;">​</a></h3><p>“反向引用”指的是这些实体引用的是先前的子表达式，返回最后的第 n 个子捕获匹配的子字符串 (捕获的数目以左括号计数)。例如，&#39;(.)\\1&#39; 匹配两个连续的相同字符。</p><ul><li>可以把反向引用想象成变量。</li><li>反向引用只能用来引用括号里的子表达式。</li></ul><h3 id="反向引用具名组-k-组名" tabindex="-1">反向引用具名组(\\k&lt;组名&gt;) <a class="header-anchor" href="#反向引用具名组-k-组名" aria-label="Permalink to &quot;反向引用具名组(\\k&lt;组名&gt;)&quot;">​</a></h3><p>在正则表达式内部引用某个“具名组匹配”; <a href="https://es6.ruanyifeng.com/#docs/regex#%E5%BC%95%E7%94%A8" target="_blank" rel="noreferrer">在ES2018中新增</a></p><h2 id="环视" tabindex="-1">环视 <a class="header-anchor" href="#环视" aria-label="Permalink to &quot;环视&quot;">​</a></h2><p>该模式中包含一些不用被返回的匹配——<strong>这些匹配是为了找出正确的匹配位置，其自身不属于最终的匹配结果</strong>。</p><p><strong>环视不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</strong></p><h3 id="向前查看" tabindex="-1">向前查看((?=)) <a class="header-anchor" href="#向前查看" aria-label="Permalink to &quot;向前查看((?=))&quot;">​</a></h3><p><strong>先行断言 x(?=y)</strong>：x 被 y 跟随时匹配 x。</p><p>向前查看指定了一个必须匹配但不用在结果中返回的模式，向前查看其实就是一个子表达式，而且从格式上看也确实如此。</p><p>例如：&quot;Windows(?=95|98|NT|2000)&quot;能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;。</p><h3 id="否定式向前查看" tabindex="-1">否定式向前查看((?!)) <a class="header-anchor" href="#否定式向前查看" aria-label="Permalink to &quot;否定式向前查看((?!))&quot;">​</a></h3><p><strong>先行否定断言 x(?!y)：</strong> x 没有被 y 紧随时匹配 x。</p><p>与向前查看的作用相反，否定式向前查看（negative lookahead）会向前查看不匹配指定模式的文本</p><h3 id="向后查看" tabindex="-1">向后查看((?&lt;=)) <a class="header-anchor" href="#向后查看" aria-label="Permalink to &quot;向后查看((?&lt;=))&quot;">​</a></h3><p><strong>后行断言 (?&lt;=y)x：</strong> x 跟随 y 的情况下匹配 x。</p><p>向后查看<strong>查看出现在已匹配文本之前的内容</strong>。与正向肯定预查类似，只是方向相反。</p><p>例如，&quot;<code>(?&lt;=95|98|NT|2000)Windows</code>&quot;能匹配&quot;<code>2000Windows</code>&quot;中的&quot;<code>Windows</code>&quot;，但不能匹配&quot;<code>3.1Windows</code>&quot;中的&quot;<code>Windows</code>&quot;。</p><h3 id="否定式向后查看" tabindex="-1">否定式向后查看((?&lt;!)) <a class="header-anchor" href="#否定式向后查看" aria-label="Permalink to &quot;否定式向后查看((?&lt;!))&quot;">​</a></h3><p><strong>后行否定断言 (?&lt;!y)x：</strong> x 不跟随 y 时匹配 x。</p><p>否定式向后查看（negative lookbehind）则向后查看不匹配指定模式的文本</p>',107),l=[o];function i(h,n,s,c,u,p){return e(),a("div",null,l)}const m=t(r,[["render",i]]);export{q as __pageData,m as default};
