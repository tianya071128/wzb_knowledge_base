import{_ as e,c as a,o,aR as l,cC as c,cD as i,cE as s,cF as n,cG as d}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"配置","description":"","frontmatter":{},"headers":[],"relativePath":"npm/config.md","filePath":"02_工程化/06_npm/08_配置.md","lastUpdated":1739447932000}'),p={name:"npm/config.md"},r=l('<h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h1><p>npm 从以下源获取其配置值，按优先级排序：</p><ul><li>命令行标志</li><li>环境变量</li><li>npmrc 文件</li><li>默认配置</li></ul><h2 id="命令行标志" tabindex="-1">命令行标志 <a class="header-anchor" href="#命令行标志" aria-label="Permalink to &quot;命令行标志&quot;">​</a></h2><p>在终端中运行 npm 时，可通过 <code>--key value</code> 来配置参数：</p><ul><li><code>--foo bar</code>：会将 <code>foo</code> 配置参数设置为 <code>“bar”</code></li><li><code>--flag</code>：不指定任何值时会将值设置为 <code>true</code></li><li><code>--</code>：一个 <code>--</code> 参数告诉 cli 解析器停止读取标志。</li></ul><p>示例：</p><ul><li><code>--flag1 --flag2</code>：得到两个参数 <code>flag1=true</code>、<code>flag2=true</code></li><li><code>--flag1 --flag2 bar</code>：得到两个参数 <code>flag1=true</code>、<code>flag2=bar</code></li><li><code>--flag1 --flag2 -- bar</code>：得到两个<strong>配置参数</strong> <code>flag1=true</code>、<code>flag2=true</code>，并将 <code>bar</code> 作为<strong>命令参数</strong>。</li></ul><h3 id="标志简写" tabindex="-1">标志简写 <a class="header-anchor" href="#标志简写" aria-label="Permalink to &quot;标志简写&quot;">​</a></h3><p>在命令行上可以简写标志，以 <code>-</code> 开头：</p><ul><li><code>-a</code>: <code>--all</code></li><li><code>-g</code>: <code>--global</code></li><li><code>-B</code>：<code>--save-bundle</code></li><li><code>-D</code>: <code>--save-dev</code></li><li><code>-E</code>: <code>--save-exact</code></li><li><code>-O</code>: <code>--save-optional</code></li><li><code>-P</code>: <code>--save-prod</code></li><li><code>-v</code>: <code>--version</code></li><li><code>-y</code>: <code>--yes</code></li></ul><p>更多简写标志，请查看<a href="https://docs.npmjs.com/cli/v8/using-npm/config#shorthands-and-other-cli-niceties" target="_blank" rel="noreferrer">官网清单</a></p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>任何以 <code>npm_config_</code> 开头的环境变量都将被解释为配置参数。如何设置？ -- 待续</p><h2 id="npmrc-文件" tabindex="-1">npmrc 文件 <a class="header-anchor" href="#npmrc-文件" aria-label="Permalink to &quot;npmrc 文件&quot;">​</a></h2><p>四个相关配置文件，按照优先级排序：</p><ul><li>项目的配置文件：项目根目录下的 <code>.npmrc</code> 文件</li><li>用户的配置文件 (~/.npmrc)</li><li>全局配置文件($PREFIX/etc/npmrc)</li><li>npm 内置配置文件(/path/to/npm/npmrc)：在全局包安装目录中 <code>node_modules/npm/.npmrc</code></li></ul><p><strong>这些文件中的每一个都被加载，配置选项按优先顺序解析。例如，项目配置文件中的设置将覆盖全局配置文件中的设置。</strong></p><h3 id="项目的配置文件" tabindex="-1">项目的配置文件 <a class="header-anchor" href="#项目的配置文件" aria-label="Permalink to &quot;项目的配置文件&quot;">​</a></h3><p>在项目本地工作中，项目根目录中的 <code>.npmrc</code> 文件将设置<strong>特定于该项目的配置值</strong>。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在全局模式下不会读取此文件，例如在运行 <code>npm install -g</code> 时。</p></div><h3 id="用户配置文件" tabindex="-1">用户配置文件 <a class="header-anchor" href="#用户配置文件" aria-label="Permalink to &quot;用户配置文件&quot;">​</a></h3><p>默认位于 <code>$HOME/.npmrc</code> ，可通过 <code>userconfig</code> 参数进行设置文件路径</p><ul><li><p><code>$HOME</code> 暂时不清楚代表什么（应该表示该电脑当前用户的目录），可以通过 <code>npm config list</code> 查询到对应的地址</p><p><img src="'+c+'" alt="img" loading="lazy"></p></li><li><p>可以通过命令行查询到 <code>userconfig</code> 参数的地址</p><p><img src="'+i+'" alt="img" loading="lazy"></p></li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p><strong>如果不存在这个文件，可能是因为没有配置过，此时只需要配置一下即可</strong></p></div><h3 id="全局配置文件" tabindex="-1">全局配置文件 <a class="header-anchor" href="#全局配置文件" aria-label="Permalink to &quot;全局配置文件&quot;">​</a></h3><p>默认位于 <code>$PREFIX/etc/npmrc</code>，也可通过 <code>globalconfig</code> 参数进行设置</p><ul><li><p><code>$PREFIX</code> 表示 <code>Node</code> 程序的路径</p><p><img src="'+s+'" alt="img" loading="lazy"></p></li><li><p>可以通过命令行查询到 <code>globalconfig</code> 参数的地址</p><p><img src="'+n+'" alt="img" loading="lazy"></p></li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>如果不存在这个文件，可能是因为没有配置过，此时只需要配置一下即可</p></div><h3 id="内置配置文件" tabindex="-1">内置配置文件 <a class="header-anchor" href="#内置配置文件" aria-label="Permalink to &quot;内置配置文件&quot;">​</a></h3><p>位于 <code>path/to/npm/itself/npmrc</code>，这是一个不可更改的“内置”配置文件，<code>npm</code> 在更新中保持一致。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>文件位于全局包安装目录中 <code>node_modules/npm/.npmrc</code></p><p><img src="'+d+`" alt="img" loading="lazy"></p></div><h3 id="配置文件格式" tabindex="-1">配置文件格式 <a class="header-anchor" href="#配置文件格式" aria-label="Permalink to &quot;配置文件格式&quot;">​</a></h3><p>所有的配置文件都是 <code>key=value</code> 的参数列表，可以使用 <code>\${VARIABLE_NAME}</code> 替换环境变量。</p><p>通过在键名后添加“[]”来指定数组值。</p><p>文件中以 <code>;</code> 或 <code>#</code> 都是注释行。</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; 这一行是注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 这一行也是注释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># key=value 形式配置参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init.author.name=wenshuli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init.author.email=wenzubiao@126.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># key[] 形式定义数组值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key[] = &quot;first value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key[] = &quot;second value&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="默认配置" tabindex="-1">默认配置 <a class="header-anchor" href="#默认配置" aria-label="Permalink to &quot;默认配置&quot;">​</a></h2><p>运行 <code>npm config ls -l</code> 以查看一组 <code>npm</code> 内部的配置参数，如果未指定其他参数，则为默认值。</p><h2 id="配置选项" tabindex="-1">配置选项 <a class="header-anchor" href="#配置选项" aria-label="Permalink to &quot;配置选项&quot;">​</a></h2><p>有关可配置选项的详情，参阅 <a href="https://docs.npmjs.com/cli/v10/using-npm/config#config-settings" target="_blank" rel="noreferrer">config</a></p>`,41),t=[r];function h(m,u,g,b,k,f){return o(),a("div",null,t)}const v=e(p,[["render",h]]);export{E as __pageData,v as default};
