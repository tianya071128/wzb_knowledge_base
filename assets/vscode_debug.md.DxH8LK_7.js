import{_ as s,c as a,o as n,aR as i}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"调试","description":"","frontmatter":{},"headers":[],"relativePath":"vscode/debug.md","filePath":"02_工程化/01_vscode/03_调试.md","lastUpdated":1739447932000}'),l={name:"vscode/debug.md"},e=i(`<h1 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h1><p>vscode 内置 Node.js 的调试器，如需其他的调试器，可安装其扩展</p><h2 id="launch-json-属性解析" tabindex="-1">launch.json 属性解析 <a class="header-anchor" href="#launch-json-属性解析" aria-label="Permalink to &quot;launch.json 属性解析&quot;">​</a></h2><p><a href="https://github.com/microsoft/vscode-js-debug/blob/main/OPTIONS.md" target="_blank" rel="noreferrer">js 调试器 - 参数文档</a></p><p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes" target="_blank" rel="noreferrer">Node 调试-文档</a></p><p>感觉这样记录作用不大， 还是参考下面给出的 launch.json 文件吧</p><h3 id="公共属性" tabindex="-1">公共属性 <a class="header-anchor" href="#公共属性" aria-label="Permalink to &quot;公共属性&quot;">​</a></h3><ul><li>type：用于此启动配置的调试器类型。内置 node 调试器，支持 <code>pwa-node</code>、<code>pwa-chrome</code>、<code>pwa-msedge</code> 等</li><li>request：请求配置类型。目前支持 <code>launch</code> 和 <code>attach</code> 两种 <ul><li>launch：启动一个应用程序或进程并进行调试</li><li>attach：附加连接到一个已经启动应用程序或进程</li></ul></li><li>name：显示在调试启动配置下拉列表中易于阅读的名称</li><li>skipFiles：自动跳过这些 glob 模式覆盖的文件。</li></ul><h3 id="launch-模式属性" tabindex="-1">launch 模式属性 <a class="header-anchor" href="#launch-模式属性" aria-label="Permalink to &quot;launch 模式属性&quot;">​</a></h3><ul><li>runtimeExecutable：要使用的运行时可执行文件的绝对路径。默认为 node。请参阅<a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-support-for-npm-and-other-tools" target="_blank" rel="noreferrer">“npm”和其他工具的启动配置支持部分</a>。</li><li>runtimeArgs - 传递给运行时可执行文件的可选参数。</li><li>...</li></ul><h2 id="node-调试" tabindex="-1">node 调试 <a class="header-anchor" href="#node-调试" aria-label="Permalink to &quot;node 调试&quot;">​</a></h2><p>有几种方式用于调试 Node.js</p><ul><li>auto attach(自动附加)：以附加模式调试在集成终端中运行的进程</li><li>JavaScript debug terminal(JavaScript 调试终端)：类似于第一种</li><li>launch.json：使用配置文件</li></ul><h3 id="auto-attach-自动附加" tabindex="-1">auto attach(自动附加) <a class="header-anchor" href="#auto-attach-自动附加" aria-label="Permalink to &quot;auto attach(自动附加)&quot;">​</a></h3><p>启动 auto attach 功能，Node 调试器会自动附加到某些集成终端启动的 Node.js 进程。</p><p>启动方式：</p><ul><li><code>Ctrl + Shift + p</code> 启动命令面板 -&gt; <code>Toggle Auto Attach</code> 或 <code>切换开关自动附加</code> 命令 -&gt; 选择具体模式</li><li>当激活后，在底部状态栏中会显示，点击可进行操作</li></ul><p>自动附加有三种模式：</p><ul><li><p>always(始终)：将调试所有在集成终端中启动的所有 Node.js 进程</p></li><li><p>smart(智能)：默认值，通过 <code>node_modules</code> 启动的程序不会被调试，可通过 <code>debug.javascript.autoAttachSmartPattern</code> 进行配置</p></li><li><p>onlyWithFlag(仅带标志)：只调试带有<code>--inspect</code>或<code>--inspect-brk</code>标志的进程。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inspect .\\app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><div class="tip custom-block"><p class="custom-block-title">附加配置</p><p>可以在 <code>settings.json</code> 中配置调试的其他配置项</p><p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_additional-configuration" target="_blank" rel="noreferrer">详见</a></p></div><h3 id="javascript-debug-terminal-javascript-调试终端" tabindex="-1">JavaScript debug terminal(JavaScript 调试终端) <a class="header-anchor" href="#javascript-debug-terminal-javascript-调试终端" aria-label="Permalink to &quot;JavaScript debug terminal(JavaScript 调试终端)&quot;">​</a></h3><p>与 <a href="#auto-attach-自动附加">auto attach</a> 类似, 区别在于 <strong>通过启动一个终端, 在这个终端启动的 node 进程会被附加调试</strong>.</p><p>启动方式:</p><ul><li><code>Ctrl + Shift + p</code> 启动命令面板 -&gt; <code>JavaScript Debug Terminal</code> 命令 -&gt; 在打开的终端处启动命令</li><li>直接在终端下拉菜单中选择创建 JavaScript 调试终端来创建调试终端</li></ul><p>通过 <code>资源管理器</code> 的 <code>NPM脚本</code> 栏中点击调试也是通过这种方式进行调试的</p><div class="tip custom-block"><p class="custom-block-title">附加配置</p><p>与 <a href="#auto-attach-自动附加">auto attach</a> 类似</p></div><h3 id="启动配置-launch-json" tabindex="-1">启动配置(launch.json) <a class="header-anchor" href="#启动配置-launch-json" aria-label="Permalink to &quot;启动配置(launch.json)&quot;">​</a></h3><p>通过配置 <code>launch.json</code> 文件, 可以实现配置的多样化、定制化。</p><p><code>launch.json</code> 通过配置在工作区或项目文件夹的 <code>.vscode</code> 文件夹中的 <code>launch.json</code> 文件, 虽然也可以<a href="https://code.visualstudio.com/docs/editor/debugging#_global-launch-configuration" target="_blank" rel="noreferrer">全局配置</a>, 但并不推荐</p><p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes" target="_blank" rel="noreferrer"><code>launch.json</code>特定于 Node.js 调试器的公共属性的参考</a></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 IntelliSense 了解相关属性。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 悬停以查看现有属性的描述。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pwa-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node调试单文件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 自动跳过这些 glob 模式覆盖的文件。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;skipFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&lt;node_internals&gt;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳过 Node 的核心模块</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;\${workspaceFolder}/**/node_modules/**/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳过 node_modules 的模块</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;!\${workspaceFolder}/**/node_modules/mime-types/**/*.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不跳过 node_modules 中 mime-types 模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * 程序的绝对路径 - 启动文件 - 相当与 node {program} 启动</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * vscode 的预定义变量，参考：https://code.visualstudio.com/docs/editor/variables-reference</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${file}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * 传递给程序以进行调试的参数，node 中 args 参考 http://nodejs.cn/api/process.html#processargv</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * 如下添加的 args 参数相当于启动命令（ D:\\node\\node.exe .\\client\\docs\\06_工程化\\01_vscode\\vscode调试\\01_测试args.js Administrator test）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * node [options] [V8 options] [script.js | -e &quot;script&quot; | -] [--] [arguments] -- args 参数放在 node 启动命令的最后 [arguments]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       * \${env:USERNAME}：用于访问环境变量 USERNAME，在这里是 Administrator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${env:USERNAME}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果添加了这个，启动命令（D:\\node\\node.exe --no-experimental-repl-await .\\client\\docs\\06_工程化\\01_vscode\\vscode调试\\01_测试args.js Administrator test）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // &quot;runtimeArgs&quot;: [&quot;--no-experimental-repl-await&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // args 和 env 使用可见 client\\docs\\06_工程化\\01_vscode\\vscode调试\\01_测试args和env.js 文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;BASE_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;URL&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 支持 npm 脚本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 例如启动 server 文件夹中的 npm run dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 请求配置类型。 launch(启动): 启动一个进程 | attach(附加): 见下面的配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 传递给运行时可执行文件的可选参数。 -- 相当于执行 npm run-script dev</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;runtimeArgs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run-script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 运行时的程序, 默认为 node. 此处可为 npm</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;runtimeExecutable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 自动跳过这些 glob 模式覆盖的文件。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;skipFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;node_internals&gt;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 被调试程序的工作目录的绝对路径。 如果您已设置 localRoot(包含程序的本地目录的路径。默认为 null)则 cwd 将匹配该值，否则返回到您的 workspaceFolder(当前配置根文件夹路径)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;cwd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}/sever&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pwa-node&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 支持 nodemon 等启动程序启动 -- 可见 launch 启动 nodemon https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_restarting-debug-sessions-automatically-when-source-is-edited</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 官方文档中说按下停止调试会话只会断开调试, 而 nodemon(和 node.js) 将继续运行. 但是在 1.62.3(2021/11/30) 中, 如果 &quot;request&quot;: &quot;launch&quot;, 那么 nodemon 也会断开</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 例如启动 server 文件夹中的 app.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;console&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;integratedTerminal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 控制何时打开内部调试控制台。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;internalConsoleOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;neverOpen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodemon 启动&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 程序的绝对路径 - 启动文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sever</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果我们失去连接，请尝试重新连接到程序。如果设置为&#39;true&#39;，我们将每秒尝试一次，直到永远。您可以通过在对象中指定&#39;delay&#39;和&#39;maxAttempts&#39;来自定义尝试的间隔和最大次数。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;restart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 运行时的程序, 默认为 node. 此处可为 nodemon</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;runtimeExecutable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodemon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 调试时自动跳过这些 glob 模式覆盖的文件。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;skipFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;node_internals&gt;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pwa-node&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h2 id="浏览器调试" tabindex="-1">浏览器调试 <a class="header-anchor" href="#浏览器调试" aria-label="Permalink to &quot;浏览器调试&quot;">​</a></h2><p>浏览器调试还是以浏览器的开发者工具为准较好。</p><p><a href="https://code.visualstudio.com/docs/nodejs/browser-debugging" target="_blank" rel="noreferrer">vscode 中的浏览器调试参考</a></p><p><a href="https://github.com/microsoft/vscode-recipes/tree/main/vuejs-cli" target="_blank" rel="noreferrer">vscode 中调试 vue</a></p>`,35),p=[e];function t(h,r,k,o,d,c){return n(),a("div",null,p)}const g=s(l,[["render",t]]);export{E as __pageData,g as default};
