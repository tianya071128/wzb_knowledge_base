import{_ as a,c as e,o as s,aR as i}from"./chunks/framework.DLAwTCsc.js";const k=JSON.parse('{"title":"init 初始化工程","description":"","frontmatter":{},"headers":[],"relativePath":"npm/npm-init.md","filePath":"02_工程化/06_npm/09_命令_init_初始化工程.md","lastUpdated":1739447932000}'),n={name:"npm/npm-init.md"},l=i(`<h1 id="init-初始化工程" tabindex="-1">init 初始化工程 <a class="header-anchor" href="#init-初始化工程" aria-label="Permalink to &quot;init 初始化工程&quot;">​</a></h1><p><a href="https://docs.npmjs.com/cli/v10/commands/npm-init" target="_blank" rel="noreferrer"><code>npm init</code></a> 用户初始化工程, 创建一个 <code>package.json</code> 文件</p><div class="language-bas vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bas</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm init &lt;package-spec&gt; (等同于 \`npx &lt;package-spec&gt;)</span></span>
<span class="line"><span>npm init &lt;@scope&gt; (等同于 \`npx &lt;@scope&gt;/create\`)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>aliases: create, innit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><ul><li><p><code>npm init </code> 可用于设置新的或现有的 npm 包。</p><ul><li><p>如果调用 <code>npm init</code> 的话，将回退到旧的行为。会问你一堆问题，然后给你写一个<code>package.json</code>。可以使用 <code>-y/--yes</code> 完全跳过问卷。如果您传递 <code>--scope</code>，它将创建一个作用域包。</p></li><li><p>如果指定包的话，在这种情况下，<code>&lt;initializer&gt;</code> 是一个名为 <code>create-&lt;initializer&gt;</code> 的 <code>npm</code> 包，它将由 <code>npm-exec</code> 安装，然后执行其主 <code>bin</code> -- 大概是创建或更新 package.json 并运行任何其他与初始化相关的操作。</p><p>init 命令转化为对应的 <code>npm exec</code> 操作如下：</p><ul><li>npm init foo -&gt; npm exec create-foo</li><li>npm init @usr/foo -&gt; npm exec @usr/create-foo</li><li>npm init @usr -&gt; npm exec @usr/create</li><li>npm init @usr@2.0.0 -&gt; npm exec @usr/create@2.0.0</li><li>npm init @usr/foo@2.0.0 -&gt; npm exec @usr/create-foo@2.0.0</li></ul></li></ul></li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 create-react-app 创建一个新的基于 React 的项目：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行 react-app 脚手架, 后面的即为传入 react-app 的参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my-react-app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 init 生成一个普通的旧 package.json：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="yes-y-在命令行上打印的任何提示自动回答-是-。" tabindex="-1">--yes, -y 在命令行上打印的任何提示自动回答“是”。 <a class="header-anchor" href="#yes-y-在命令行上打印的任何提示自动回答-是-。" aria-label="Permalink to &quot;--yes, -y 在命令行上打印的任何提示自动回答“是”。&quot;">​</a></h3><ul><li>默认值：null</li><li>类型：null、string <ul><li>true 对 npm 可能在命令行上打印的任何提示自动回答“是”。</li></ul></li></ul><h3 id="force-隐式设置-yes。" tabindex="-1">--force 隐式设置 <code>--yes</code>。 <a class="header-anchor" href="#force-隐式设置-yes。" aria-label="Permalink to &quot;--force 隐式设置 \`--yes\`。&quot;">​</a></h3><ul><li>默认值：false</li><li>类型：Boolean</li></ul><p>同 <code>--yes</code>，意义不大。</p><h3 id="scope-创建作用域包" tabindex="-1">--scope 创建作用域包 <a class="header-anchor" href="#scope-创建作用域包" aria-label="Permalink to &quot;--scope 创建作用域包&quot;">​</a></h3><ul><li>默认值：当前项目的范围（如果有）或 &quot;&quot;</li><li>类型：String</li></ul>`,15),t=[l];function p(c,r,o,d,h,u){return s(),e("div",null,t)}const b=a(n,[["render",p]]);export{k as __pageData,b as default};
