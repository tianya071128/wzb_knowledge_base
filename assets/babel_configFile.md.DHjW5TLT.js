import{_ as s,c as a,o as i,aR as e}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"babel/configFile.md","filePath":"02_工程化/05_babel/02_配置文件.md","lastUpdated":1739447932000}'),n={name:"babel/configFile.md"},l=e(`<h1 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h1><h2 id="配置文件类型" tabindex="-1">配置文件类型 <a class="header-anchor" href="#配置文件类型" aria-label="Permalink to &quot;配置文件类型&quot;">​</a></h2><p><code>babel7</code> 的配置文件真正所解决的痛点 [monorepo 类型的项目]</p><div class="warning custom-block"><p class="custom-block-title">monorepo</p><p>简单理解，就是<code>单个大项目但是包含多个子项目</code></p></div><p>例如如下项目结构：</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- backend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  |- .babelrc.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  |-package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- frontend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  |- .babelrc.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  |-package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- node_modules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- .babelrc.js // 如果根目录下的代码有区别于子 package 的 babel 配置，则需要使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- babel.config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|- package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><p>项目范围的配置(全局配置)：<code>babel.config.json</code>文件，具有不同的扩展名 ( <code>.js</code>, <code>.cjs</code>, <code>.mjs</code>)</p><blockquote><p>此时 <code>babel.config.js</code> 就是全局配置/项目配置，该 babel 配置对 backend、frontend、甚至 node_modules 中的模块全部生效。</p></blockquote></li><li><p>相对于文件的配置(局部配置)</p><ul><li><code>.babelrc.json</code>文件，具有不同的扩展名 ( <code>.babelrc</code>, <code>.js</code>, <code>.cjs</code>, <code>.mjs</code>)</li><li>带有 &quot;babel&quot; key 的 package.json 文件</li></ul><blockquote><p>此时 <code>backend/.babelrc.js</code> 或 <code>frontend/.babelrc.js</code> 就是局部配置，他们的生效范围是与待编译文件的位置有关的。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>局部配置也可以通过 <code>overrides</code> 来配置</p></div></blockquote></li></ul><h2 id="配置文件支持的语法" tabindex="-1">配置文件支持的语法 <a class="header-anchor" href="#配置文件支持的语法" aria-label="Permalink to &quot;配置文件支持的语法&quot;">​</a></h2><ul><li><p>支持的文件扩展名：可以使用 Node.js 原生支持的任何文件扩展名进行配置：可以使用 <code>.json</code>、<code>.js</code>、<code>.cjs</code>、<code>.mjs</code></p></li><li><p>支持导出的类型：<strong>当使用 JavaScript 配置文件时，既可以导出一个对象，也可以导出一个函数(调用该函数将返回生成的配置)</strong></p><div class="warning custom-block"><p class="custom-block-title">导出一个函数</p><p>函数返回配置被赋予了一些特殊的权力，因为它们可以访问 Babel 本身公开的 API。有关详细信息，请参阅<a href="https://babeljs.io/docs/config-files#config-function-api" target="_blank" rel="noreferrer">配置函数 API</a>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div></li></ul><h2 id="单个项目的配置" tabindex="-1">单个项目的配置 <a class="header-anchor" href="#单个项目的配置" aria-label="Permalink to &quot;单个项目的配置&quot;">​</a></h2><p>单个项目比较常见，一般只需要在项目根目录中使用全局配置 <code>babel.config.js</code> 配置，如果需要针对某个文件夹进行单独配置，可以使用如下两种方式：</p><ul><li><p>使用 <a href="https://babeljs.io/docs/options#overrides" target="_blank" rel="noreferrer"><code>overrides</code></a> 对文件级别的配置</p></li><li><p>使用 相对于文件 的配置，会被合并到项目范围的配置</p><p>此时需要在全局配置文件 <code>babel.config.js</code> 中指定 <code>babelrcRoots</code>，否则会完全跳过搜索</p></li></ul><h2 id="多个子项目的配置-monorepo-类型" tabindex="-1">多个子项目的配置(monorepo 类型) <a class="header-anchor" href="#多个子项目的配置-monorepo-类型" aria-label="Permalink to &quot;多个子项目的配置(monorepo 类型)&quot;">​</a></h2><p>以如下代码结构为例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backend</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .babelrc.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frontend</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .babelrc.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .babelrc.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这份配置在本场景下不需要（如果根目录下的代码有区别于子package的babel配置，则需要使用）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>此时，根目录下的 <code>babel.config.js</code> 中设置共用的配置，<code>backend/.babelrc.js</code> 是针对于 <code>/backend</code> 文件级别的。</p><ul><li><p>问题一：当工作目录不在根目录时，无法加载到全局配置。</p><p>例如在 <code>/backend</code> 启动时，工作目录就是 <code>/backend</code>，默认情况下是无法加载到 <code>babel.config.js</code> 的，此时需要设置 <a href="https://babeljs.io/docs/options#rootmode" target="_blank" rel="noreferrer"><code>rootMode</code></a> 进行配置</p><blockquote><p>设置方式：只允许在 babel 的程序化选项</p><ul><li>webpack：在 babel-loader 的配置上设置 rootMode: &#39;upward&#39;</li><li>CLI：<code>babel --rootMode=upward </code> 启动</li></ul></blockquote></li><li><p>问题二：需要在全局配置中设置 <code>babelrcRoots</code> 选项</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">babelrcRoots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;packages/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.babeljs.cn/docs/config-files" target="_blank" rel="noreferrer">官网-配置文件</a></li><li><a href="https://segmentfault.com/a/1190000018358854" target="_blank" rel="noreferrer">思否-一文读懂 babel7 的配置文件加载逻辑</a></li></ul>`,19),p=[l];function t(r,o,c,d,h,k){return i(),a("div",null,p)}const u=s(n,[["render",t]]);export{E as __pageData,u as default};
