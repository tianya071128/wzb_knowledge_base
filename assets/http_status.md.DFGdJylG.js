import{_ as a,c as e,o as t,aR as o}from"./chunks/framework.DLAwTCsc.js";const _=JSON.parse('{"title":"状态码","description":"","frontmatter":{},"headers":[],"relativePath":"http/status.md","filePath":"03_网络协议/01_http/03_状态码.md","lastUpdated":1739447932000}'),r={name:"http/status.md"},i=o('<h1 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h1><p>状态码可以用来表达 HTTP 处理的状态, 客户端可以根据状态码进行特定处理, 如重定向、缓存、切换协议等。</p><p>状态码取值范围为 000 ~ 999, 但目前 RFC 标准把状态码分为五类, 数字的第一位表示分类:</p><ul><li>1××：提示信息，表示目前是协议处理的中间状态，还需要后续的操作；</li><li>2××：成功，报文已经收到并被正确处理；</li><li>3××：重定向，资源位置发生变动，需要客户端重新发送请求；</li><li>4××：客户端错误，请求报文有误，服务器无法处理；</li><li>5××：服务器错误，服务器在处理请求时内部发生了错误。</li></ul><h2 id="_1xx-提示信息" tabindex="-1">1xx: 提示信息 <a class="header-anchor" href="#_1xx-提示信息" aria-label="Permalink to &quot;1xx: 提示信息&quot;">​</a></h2><p>1xx 状态码实际用到的比较少</p><h3 id="_101-switching-protocols-交换协议" tabindex="-1">101 Switching Protocols 交换协议 <a class="header-anchor" href="#_101-switching-protocols-交换协议" aria-label="Permalink to &quot;101 Switching Protocols 交换协议&quot;">​</a></h3><p>有些协议(如 h2, ws)会通过 http 的 Upgrade 头部字段来通知服务器切换协议, 如果服务器支持的话, 就会返回 101 状态码, 同意切换协议, 之后改用其他协议通信</p><h2 id="_2xx-成功" tabindex="-1">2xx: 成功 <a class="header-anchor" href="#_2xx-成功" aria-label="Permalink to &quot;2xx: 成功&quot;">​</a></h2><p>2xx 表示服务器成功处理了客户端的请求</p><h3 id="_200-ok" tabindex="-1">200 OK <a class="header-anchor" href="#_200-ok" aria-label="Permalink to &quot;200 OK&quot;">​</a></h3><p>最常见的状态码, 表示一切正常</p><h3 id="_204-no-content-没有内容" tabindex="-1">204 No Content 没有内容 <a class="header-anchor" href="#_204-no-content-没有内容" aria-label="Permalink to &quot;204 No Content 没有内容&quot;">​</a></h3><p>与 200 的区别就是没有响应体</p><h3 id="_206-partial-content-部分内容" tabindex="-1">206 Partial Content 部分内容 <a class="header-anchor" href="#_206-partial-content-部分内容" aria-label="Permalink to &quot;206 Partial Content 部分内容&quot;">​</a></h3><p>是 HTTP 分块下载或断点续传的基础, 在客户端发送“范围请求”、要求获取资源的部分数据时出现, 表示 body 响应体的数据不是资源的全部</p><p>通常需要客户端发送头部字段: “Content-Range”, 表示需要获取资源的范围</p><h2 id="_3xx-资源发生变动" tabindex="-1">3xx: 资源发生变动 <a class="header-anchor" href="#_3xx-资源发生变动" aria-label="Permalink to &quot;3xx: 资源发生变动&quot;">​</a></h2><p>表示客户端请求的资源发生了变动，客户端必须用新的 URI 重新发送请求获取资源，也就是通常所说的“重定向”，包括著名的 301、302 跳转。</p><h3 id="_301-moved-permanently-永久重定向" tabindex="-1">301 Moved Permanently 永久重定向 <a class="header-anchor" href="#_301-moved-permanently-永久重定向" aria-label="Permalink to &quot;301 Moved Permanently 永久重定向&quot;">​</a></h3><p>表示此次的资源已经不存在了, 需要改用新的 URI 进行重定向, 在响应字段 <strong>Location</strong> 中指定跳转 URI</p><p><strong>浏览器会缓存此次 URI 的重定向, 当下次在访问时, 不会请求服务器而是直接重定向</strong></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>例如：<code>Location</code> 返回 <code>https://www.baidu.com/</code>, 浏览器会自动重定向(在 ajax 表现上, 就会在请求一次<code>https://www.baidu.com/</code>) , 并且下次请求时, 会直接重定向</p><p>可以通过 <strong>选择请求的连接 右键 Clear browser cache</strong> 清除 301 缓存</p></div><h3 id="_302-found-临时重定向" tabindex="-1">302 Found 临时重定向 <a class="header-anchor" href="#_302-found-临时重定向" aria-label="Permalink to &quot;302 Found 临时重定向&quot;">​</a></h3><p>与 301 的区别在于不会缓存此次的重定向</p><h3 id="_304-not-modified-资源未修改" tabindex="-1">304 Not Modified 资源未修改 <a class="header-anchor" href="#_304-not-modified-资源未修改" aria-label="Permalink to &quot;304 Not Modified 资源未修改&quot;">​</a></h3><p>表示资源是新鲜, 表示客户端可以使用缓存的资源</p><h3 id="其他状态码" tabindex="-1">其他状态码 <a class="header-anchor" href="#其他状态码" aria-label="Permalink to &quot;其他状态码&quot;">​</a></h3><p>在 3xx 还有一下几种(有的客户端不一定支持):</p><ul><li>303 See Other：类似 302，但要求重定向后的请求改为 GET 方法，访问一个结果页面，避免 POST/PUT 重复操作；</li><li>307 Temporary Redirect：类似 302，但重定向后请求里的方法和实体不允许变动，含义比 302 更明确；</li><li>308 Permanent Redirect：类似 307，不允许重定向后的请求变动，但它是 301“永久重定向”的含义。</li></ul><h2 id="_4xx-客户端错误" tabindex="-1">4xx: 客户端错误 <a class="header-anchor" href="#_4xx-客户端错误" aria-label="Permalink to &quot;4xx: 客户端错误&quot;">​</a></h2><p>表示客户端发送的请求报文有误，服务器无法处理，它就是真正的“错误码”含义了。</p><h3 id="_400-bad-request-报文错误" tabindex="-1">400 Bad Request 报文错误 <a class="header-anchor" href="#_400-bad-request-报文错误" aria-label="Permalink to &quot;400 Bad Request 报文错误&quot;">​</a></h3><p>表示报文错误, 但是没有明确错误的地方</p><h3 id="_401-unauthorized-未经授权" tabindex="-1">401 Unauthorized 未经授权 <a class="header-anchor" href="#_401-unauthorized-未经授权" aria-label="Permalink to &quot;401 Unauthorized 未经授权&quot;">​</a></h3><p>表示未经授权, 需要进行授权操作</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>配合 <code>www-authenticate: Basic realm=&quot;Usagidesign Auth&quot;</code> 响应字段, 当状态码为 401 时, 浏览器会根据 <code>www-authenticate</code> 字段弹出验证框</p><p>输入完账号密码后再次发送请求(原请求会一直挂起, 等待结果), 然后根据服务器返回的报文做出对应的反应</p><p>这样的密码验证意义不大</p></div><h3 id="_403-forbidden-禁止访问" tabindex="-1">403 Forbidden 禁止访问 <a class="header-anchor" href="#_403-forbidden-禁止访问" aria-label="Permalink to &quot;403 Forbidden 禁止访问&quot;">​</a></h3><p>表示客户端没有权限访问该资源, 禁止访问的可能性很多, 可以通过 body 请求体表示禁止访问的原因</p><h3 id="_404-not-found-没有资源" tabindex="-1">404 Not Found 没有资源 <a class="header-anchor" href="#_404-not-found-没有资源" aria-label="Permalink to &quot;404 Not Found 没有资源&quot;">​</a></h3><p>含义为服务器上没有对应的资源</p><h3 id="其他状态码-1" tabindex="-1">其他状态码 <a class="header-anchor" href="#其他状态码-1" aria-label="Permalink to &quot;其他状态码&quot;">​</a></h3><p>4×× 里剩下的一些代码较明确地说明了错误的原因，都很好理解，开发中常用的有：</p><ul><li>405 Method Not Allowed：不允许使用某些方法操作资源，例如不允许 POST 只能 GET；</li><li>406 Not Acceptable：资源无法满足客户端请求的条件，例如请求中文但只有英文；</li><li>408 Request Timeout：请求超时，服务器等待了过长的时间；</li><li>409 Conflict：多个请求发生了冲突，可以理解为多线程并发时的竞态；</li><li>413 Request Entity Too Large：请求报文里的 body 太大；</li><li>414 Request-URI Too Long：请求行里的 URI 太大；</li><li>429 Too Many Requests：客户端发送了太多的请求，通常是由于服务器的限连策略；</li><li>431 Request Header Fields Too Large：请求头某个字段或总体太大；</li></ul><h2 id="_5xx-服务器错误" tabindex="-1">5xx: 服务器错误 <a class="header-anchor" href="#_5xx-服务器错误" aria-label="Permalink to &quot;5xx: 服务器错误&quot;">​</a></h2><p>表示请求报文正确, 但是服务器内部错误, 如果返回了状态码, 就说明已经连接到服务器了</p><p>如果请求了不正确的域名或 ip, 直接是 <code>failed</code> 状态</p><h3 id="_500-internal-server-error-内部服务器错误" tabindex="-1">500 Internal Server Error 内部服务器错误 <a class="header-anchor" href="#_500-internal-server-error-内部服务器错误" aria-label="Permalink to &quot;500 Internal Server Error 内部服务器错误&quot;">​</a></h3><p>服务器未知错误</p><h3 id="_503-service-unavailable-服务不可用" tabindex="-1">503 Service Unavailable 服务不可用 <a class="header-anchor" href="#_503-service-unavailable-服务不可用" aria-label="Permalink to &quot;503 Service Unavailable 服务不可用&quot;">​</a></h3><p>服务器当前很忙，暂时无法响应服务</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>很可能过几秒钟后服务器就不那么忙了，可以继续提供服务，所以 503 响应报文里通常还会有一个“Retry-After”字段，指示客户端可以在多久以后再次尝试发送请求。</p></div>',52),l=[i];function n(d,h,c,s,p,u){return t(),e("div",null,l)}const b=a(r,[["render",n]]);export{_ as __pageData,b as default};
