import{_ as a,c as l,o as e,aR as s,cI as i}from"./chunks/framework.DLAwTCsc.js";const k=JSON.parse('{"title":"ls 查看已安装包","description":"","frontmatter":{},"headers":[],"relativePath":"npm/npm-ls.md","filePath":"02_工程化/06_npm/14_命令_ls_查看已安装包.md","lastUpdated":1739447932000}'),o={name:"npm/npm-ls.md"},n=s(`<h1 id="ls-查看已安装包" tabindex="-1">ls 查看已安装包 <a class="header-anchor" href="#ls-查看已安装包" aria-label="Permalink to &quot;ls 查看已安装包&quot;">​</a></h1><p><a href="https://docs.npmjs.com/cli/v10/commands/npm-ls" target="_blank" rel="noreferrer"><code>npm ls</code></a> 用于列出已安装的包</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-spe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><ul><li>此命令以树结构输出所有已安装的软件包或者指定包版本，以及它们的依赖关系</li><li>--all, -a ：在 npm v6 默认为 true，在 npm v8 默认为 false。设置 --all 将显示所有已安装的包，而不仅仅是当前项目直接依赖的包。</li><li>--depth：递归查看包的深度。如果设置了 --all，则为无穷大，否则为 1</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p><img src="`+i+'" alt="image.png" loading="lazy"></p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="all-a-显示所有安装包" tabindex="-1"><code>--all, -a</code> 显示所有安装包 <a class="header-anchor" href="#all-a-显示所有安装包" aria-label="Permalink to &quot;`--all, -a` 显示所有安装包&quot;">​</a></h3><ul><li>默认值: <code>false</code></li><li>类型：<code>boolean</code><ul><li><code>true</code> 将显示所有已安装的包</li><li><code>false</code> 当前项目直接依赖的包</li></ul></li></ul><h3 id="long-l-显示更多扩展信息" tabindex="-1"><code>--long, -l</code> 显示更多扩展信息 <a class="header-anchor" href="#long-l-显示更多扩展信息" aria-label="Permalink to &quot;`--long, -l` 显示更多扩展信息&quot;">​</a></h3><ul><li>默认值: <code>false</code></li><li>类型：<code>boolean</code><ul><li><code>true</code> 将显示更多扩展信息, 但是似乎作用不大</li></ul></li></ul><h3 id="global-g-全局模式" tabindex="-1"><code>--global, -g</code> 全局模式 <a class="header-anchor" href="#global-g-全局模式" aria-label="Permalink to &quot;`--global, -g` 全局模式&quot;">​</a></h3><ul><li>默认值：<code>false</code></li><li>类型：<code>boolean</code><ul><li><code>true</code>在“全局”模式下运行, 检查安装的包</li></ul></li></ul><h3 id="depth-递归包时要达到的深度" tabindex="-1"><code>--depth</code> 递归包时要达到的深度 <a class="header-anchor" href="#depth-递归包时要达到的深度" aria-label="Permalink to &quot;`--depth` 递归包时要达到的深度&quot;">​</a></h3><ul><li>默认值：<code>1</code>，如果设置了 <code>--all</code>, 那么就是 <code>Infinity</code></li><li>类型：<code>null | number</code></li></ul><p>递归包时要达到的深度。如果未设置，将仅显示根项目的直接依赖项。如果设置了<code> --all</code>，则会显示所有依赖项。</p>',17),t=[n];function d(c,r,h,p,u,_){return e(),l("div",null,t)}const b=a(o,[["render",d]]);export{k as __pageData,b as default};
