import{_ as s,c as a,o as e,aR as i}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"配置选项","description":"","frontmatter":{},"headers":[],"relativePath":"babel/configOptions.md","filePath":"02_工程化/05_babel/03_配置选项.md","lastUpdated":1739447932000}'),n={name:"babel/configOptions.md"},l=i(`<h1 id="配置选项" tabindex="-1">配置选项 <a class="header-anchor" href="#配置选项" aria-label="Permalink to &quot;配置选项&quot;">​</a></h1><p>配置项可以通过多种方式传递给 <code>babel</code>，主要取决于<a href="/wzb_knowledge_base/babel/home.html#babel-的使用方式">如何使用 babel</a>。</p><p>除了在浏览器上受限于文件系统的问题，其他都是会读取配置文件，除了配置文件，还有以下方式：</p><ul><li><p>传递给 <code>@babel/cli</code>：选项将需要 <code>kebab-case</code>名称</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> babel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --root-mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 相当于传递 rootMode 配置选项</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>主流工具集成：例如 <a href="https://webpack.docschina.org/loaders/babel-loader/" target="_blank" rel="noreferrer">babel-loader</a>，需要查看集成工具的配置</p></li><li><p>编程方式：直接传递 <code>options</code> 对象</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">babel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, options, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  result; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; { code, map, ast }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><a href="https://www.babeljs.cn/docs/options/" target="_blank" rel="noreferrer">具体配置选项可查看官网</a></p><h2 id="主要选项" tabindex="-1">主要选项 <a class="header-anchor" href="#主要选项" aria-label="Permalink to &quot;主要选项&quot;">​</a></h2><p>这些选项只允许作为<a href="/wzb_knowledge_base/babel/home.html#babel-core-编程的方式"> Babel 编程方式</a>传递，直接传递给 <code>babel</code>。</p><h3 id="cwd-工作目录" tabindex="-1">cwd：工作目录 <a class="header-anchor" href="#cwd-工作目录" aria-label="Permalink to &quot;cwd：工作目录&quot;">​</a></h3><p>类型：<code>string</code> 默认值：<code>process.cwd()</code></p><p>程序选项中的所有路径都将相对于解析的工作目录。</p><h3 id="caller-标识自身" tabindex="-1">caller：标识自身 <a class="header-anchor" href="#caller-标识自身" aria-label="Permalink to &quot;caller：标识自身&quot;">​</a></h3><p><code>babel</code> 的集成工具可以将 <code>caller</code> 对象传递给 <code>Babel</code>以标识自己，并传递与功能相关的标志以供配置、预设和插件使用。</p><p>例如 <code>babel-loader</code>，此时将允许插件和预设决定，由于支持 ES 模块，它们将跳过将 ES 模块编译为 CommonJS 模块。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">babel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  caller: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;web&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    supportsStaticESM: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    supportsDynamicImport: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    supportsTopLevelAwait: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="filename-编译文件名" tabindex="-1">filename：编译文件名 <a class="header-anchor" href="#filename-编译文件名" aria-label="Permalink to &quot;filename：编译文件名&quot;">​</a></h3><p>类型：<code>string</code></p><p>配置当前编译的代码关联的文件名(直接调用 <code>babel.transform</code> 进行编译时，并不明确文件名)</p><p>文件名是可选的，但当文件名未知时，并非 Babel 的所有功能都可用，因为一部分选项依赖于文件名来实现其功能。</p><p>用户可能遇到的三种主要情况是：</p><ul><li>文件名暴露给插件。一些插件可能需要文件名的存在。</li><li>类似<a href="https://www.babeljs.cn/docs/options#test" target="_blank" rel="noreferrer"><code>&quot;test&quot;</code></a>,<a href="https://www.babeljs.cn/docs/options#exclude" target="_blank" rel="noreferrer"><code>&quot;exclude&quot;</code></a>和<a href="https://www.babeljs.cn/docs/options#ignore" target="_blank" rel="noreferrer"><code>&quot;ignore&quot;</code></a>的选项需要文件名来匹配字符串/正则表达式。</li><li><code>.babelrc.json</code>或者<code>.babelrc</code>文件是相对于正在编译的文件加载的。如果省略此选项，Babel 将表现得好像<code>babelrc: false</code>已设置。</li></ul><h2 id="加载配置选项" tabindex="-1">加载配置选项 <a class="header-anchor" href="#加载配置选项" aria-label="Permalink to &quot;加载配置选项&quot;">​</a></h2><p><strong>这些选项影响着加载配置文件</strong></p><h3 id="root-概念根文件夹" tabindex="-1">root：概念根文件夹 <a class="header-anchor" href="#root-概念根文件夹" aria-label="Permalink to &quot;root：概念根文件夹&quot;">​</a></h3><p>类型：<code>string</code></p><p>默认：<code>opts.cwd</code></p><p>配置位置：仅在<a href="/wzb_knowledge_base/babel/home.html#babel-core-编程的方式"> Babel 的编程选项</a>中允许</p><p>将根据 &quot;rootMode&quot; 处理的初始路径，以确定当前 Babel 项目的概念根文件夹。这主要用于两种情况：</p><ul><li>检查默认<a href="https://www.babeljs.cn/docs/options#configfile" target="_blank" rel="noreferrer"><code>&quot;configFile&quot;</code></a>值时的基目录</li><li>“babelrcroots” 的默认值</li></ul><h3 id="rootmode-搜索全局配置文件的模式" tabindex="-1">rootMode：搜索全局配置文件的模式 <a class="header-anchor" href="#rootmode-搜索全局配置文件的模式" aria-label="Permalink to &quot;rootMode：搜索全局配置文件的模式&quot;">​</a></h3><p>类型：<code>&quot;root&quot; | &quot;upward&quot; | &quot;upward-optional&quot;</code></p><p>默认：<code>&quot;root&quot;</code></p><p>配置位置：仅在<a href="/wzb_knowledge_base/babel/home.html#babel-core-编程的方式"> Babel 的编程选项</a>中允许</p><p>版本：<code>v7.1.0</code></p><h2 id="插件和预设选项" tabindex="-1">插件和预设选项 <a class="header-anchor" href="#插件和预设选项" aria-label="Permalink to &quot;插件和预设选项&quot;">​</a></h2><h3 id="plugins-插件数组" tabindex="-1">plugins：插件数组 <a class="header-anchor" href="#plugins-插件数组" aria-label="Permalink to &quot;plugins：插件数组&quot;">​</a></h3><ul><li>类型：<code>Array&lt;PluginEntry | Plugin&gt;</code> - <code>PluginEntry</code> 见下方</li><li>默认值：<code>[]</code></li></ul><p>处理此文件时要激活的插件数组。</p><h3 id="presets-预设数组" tabindex="-1">presets：预设数组 <a class="header-anchor" href="#presets-预设数组" aria-label="Permalink to &quot;presets：预设数组&quot;">​</a></h3><ul><li>类型：<code>Array&lt;PresetEntry&gt;</code> - <code>PresetEntry</code> 见下方</li><li>默认值：<code>[]</code></li></ul><p>处理此文件时要激活的一组预设。</p><p>注意：预设的格式与插件相同，只是名称规范化需要“preset-”而不是“plugin-”，并且预设不能是<code>Plugin</code>.</p><h3 id="plugin-preset-entries-插件-预设-配置格式" tabindex="-1">Plugin/Preset entries：插件/预设 配置格式 <a class="header-anchor" href="#plugin-preset-entries-插件-预设-配置格式" aria-label="Permalink to &quot;Plugin/Preset entries：插件/预设 配置格式&quot;">​</a></h3><ul><li><code>PluginEntry</code> / <code>PresetEntry</code>：插件和预设注册的格式</li></ul><p>单个插件/预设可以有以下几种不同的结构：</p><ul><li><code>EntryTarget</code>- 个人插件</li><li><code>[EntryTarget, EntryOptions]</code>- 带有选项的单个插件</li><li><code>[EntryTarget, EntryOptions, string]</code>- 带有选项和名称的单个插件(名称是用来合并同一插件的)</li><li><code>ConfigItem</code>- 由<code>babel.createConfigItem()</code>创建的插件配置项。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // EntryTarget</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;@babel/plugin-transform-classes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // [EntryTarget, EntryOptions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/plugin-transform-arrow-functions&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { spec: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // [EntryTarget, EntryOptions, string]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/plugin-transform-for-of&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { loose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ConfigItem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  babel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConfigItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/plugin-transform-spread&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>[EntryTarget, EntryOptions, string]</code>各个选项的意义如下：</p><ul><li><p><code>EntryTarget</code>：类型：<code>string | {} | Function</code>，可以来自几个不同的源</p><ul><li><code>string</code>：<code>babel</code> 内部会 <code>require</code> 的插件/预设标识符。标识符将通过<a href="https://www.babeljs.cn/docs/options/#name-normalization" target="_blank" rel="noreferrer">名称规范化</a>后传递给插件/预设。</li><li><code>{} | Function</code>：用户自身 <code>require</code> 一个实际的插件/预设对象或函数。</li></ul></li><li><p><code>EntryOptions</code>：类型：<code>undefined | {} | false</code>，选项在执行时传递给每个插件/预设。</p><ul><li><p><code>undefined | {}</code>：<code>undefined</code>将被规范化为一个空对象。</p></li><li><p><code>false</code>：表示这个插件/预设被禁用，在进行排序时会很有用，但需要一个单独的条件来决定是否启用了某些功能</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会被禁用这个插件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">overrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运用在 src 文件时，会启用这个插件，并且在 &#39;one&#39; 和 &#39;three&#39; 之间执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li><li><p><code>string</code>：为每个插件/预设实例分配一个名称。当想要实例化一个插件的两个独立实例，必须为每个实例分配一个名称以消除它们的歧义。</p></li></ul><h2 id="输出目标" tabindex="-1">输出目标 <a class="header-anchor" href="#输出目标" aria-label="Permalink to &quot;输出目标&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">注意</p><ol><li><p><code>targets</code> 选项是用来确定目标环境的，查看<a href="https://www.babeljs.cn/docs/babel-helper-compilation-targets/" target="_blank" rel="noreferrer"><code>babel</code> 工具包解析 targets</a>，最终会输出一个目标对象：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;11.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  chrome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;61.0.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><code>targets</code> 选项中会结合 <code>targets.browsers</code>、<code>targets.esmodules</code>、<code>targets[ie | chrome | edge]</code> 的值取交集作为最终结果</p></li><li><p>如果没有指定 <code>targets</code> 选项，默认去会搜索 browserslist 文件或引用 package.json 中的 browserslist 键，作为支持的环境。但是注意：<code>targets</code>选项和 <code>browserslist</code> 值不会进行合并，优先取 <code>targets</code>选项</p></li></ol></div><h3 id="targets-支持环境" tabindex="-1">targets：支持环境 <a class="header-anchor" href="#targets-支持环境" aria-label="Permalink to &quot;targets：支持环境&quot;">​</a></h3><ul><li>类型：<code>string | Array&lt;string&gt; | { [string]: string }</code></li><li>默认：<code>{}</code></li><li>配置位置：允许在 Babel 的编程选项中，或在配置文件</li><li>版本：<code>v7.13.0</code></li></ul><p><code>targets</code> 是用来确定项目支持的环境(Node 环境或浏览器环境)</p><ul><li><p>可以是与<a href="https://github.com/ai/browserslist" target="_blank" rel="noreferrer">browserslist 兼容的</a>查询（带有<a href="https://www.babeljs.cn/docs/options/#ineffective-browserslist-queries" target="_blank" rel="noreferrer">警告</a>）</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;targets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt; 0.25%, not dead&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>或支持环境版本的对象：支持的环境：<code>android</code>, <code>chrome</code>, <code>edge</code>, <code>electron</code>, <code>firefox</code>, <code>ie</code>, <code>ios</code>, <code>node</code>, <code>opera</code>, <code>rhino</code>, <code>safari</code>, <code>samsung</code>。如果未指定次要版本，Babel 会将其解释为 MAJOR.0. 例如，&quot;node&quot;: 12 将被视为 Node.js 12.0。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;targets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;chrome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;58&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;11&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>不指定值时(没有目标时)：Babel 会假设目标是最旧的浏览器(例如，@babel/preset-env 将所有 ES2015-ES2020 代码转换为 ES5 兼容)</p><p>这种行为与 <a href="https://github.com/browserslist/browserslist#queries" target="_blank" rel="noreferrer">browserslist</a> 不同，browserslist 会使用默认值(<code>\\&gt; 0.5%, last 2 versions, Firefox ESR, not dead</code>)，如果需要使用默认查询，需要显式传递(在 babel8 可能会重新设计)</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;targets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;defaults&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>targets.esmodules</code>：<code>boolean</code>类型，当为 <code>true</code>，会假设环境为支持 <code>ES</code> 模块的浏览器。</p><blockquote><p><strong>注意点：</strong></p><ul><li><p><code>babel</code>会将 <code>targets.esmodules: true</code> 解析成如下浏览器列表：<code>chrome &gt;= 61, and_chr &gt;= 61, edge &gt;= 16, firefox &gt;= 60, and_ff &gt;= 60, node &gt;= 13.2.0, opera &gt;= 48, op_mob &gt;= 48, safari &gt;= 10.1, ios &gt;= 10.3, samsung &gt;= 8.2, android &gt;= 61, electron &gt;= 2.0, ios_saf &gt;= 10.3</code></p></li><li><p><strong>当同时指定 browsers 和 esmodules 目标时，它们将相交。</strong></p></li><li><p><code>targets.esmodules</code> 只是表示目标环境是支持 <code>ES</code> 模块的，不会根据这个配置控制是否编译 <code>import/export</code> 模块语法。<strong>如果需要不编译 import/export 语法，有如下方式：</strong></p><ul><li><p>插件/预设 配置项控制，例如：@babel/preset-env 通过 <a href="https://www.babeljs.cn/docs/babel-preset-env/#modules" target="_blank" rel="noreferrer"><code>modules: false</code></a></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;useBuiltIns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;usage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;corejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.6.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 保留 ES 模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>Babel 的编程程序中通过 <a href="https://www.babeljs.cn/docs/options/#caller" target="_blank" rel="noreferrer"><code>caller</code></a> 配置项</p></li></ul></li></ul></blockquote></li><li><p><code>targets.browsers</code>：类型：<code>string | Array&lt;string&gt;</code>，使用 <a href="https://github.com/ai/browserslist" target="_blank" rel="noreferrer">browserslist</a> 选择浏览器的查询。语法与 <code>browserslist</code> 一致</p></li></ul><h3 id="browserslistconfigfile-是否允许使用-browserslist-配置源" tabindex="-1">browserslistConfigFile：是否允许使用 <code>browserslist 配置源</code> <a class="header-anchor" href="#browserslistconfigfile-是否允许使用-browserslist-配置源" aria-label="Permalink to &quot;browserslistConfigFile：是否允许使用 \`browserslist 配置源\`&quot;">​</a></h3><ul><li>类型：<code>boolean | string</code></li><li>默认：<code>true</code></li><li>配置位置：允许在 Babel 的编程选项中，或在配置文件</li><li>版本：<code>v7.13.0</code></li></ul><p>控制是否使用 <a href="https://github.com/ai/browserslist#queries" target="_blank" rel="noreferrer">browserslist 配置源</a>，包括搜索任何 browserslist 文件或引用 package.json 中的 browserslist 键。</p><p>如果指定了字符串，则它必须表示 browserslist 配置文件的路径。</p><p><strong>注意：只有在没有配置 <code>targets</code> 选项时，才会尝试去加载 browserslist 配置源</strong></p><h3 id="browserslistenv-使用-browserslist-的环境" tabindex="-1">browserslistEnv：使用 browserslist 的环境 <a class="header-anchor" href="#browserslistenv-使用-browserslist-的环境" aria-label="Permalink to &quot;browserslistEnv：使用 browserslist 的环境&quot;">​</a></h3><ul><li>类型：<code>string</code></li><li>默认：<code>undefined</code></li><li>配置位置：允许在 Babel 的编程选项中，或在配置文件</li><li>版本：<code>v7.13.0</code></li></ul><p>配置要使用的<a href="https://github.com/browserslist/browserslist#configuring-for-different-environments" target="_blank" rel="noreferrer">Browserslist 环境</a>。</p><p><strong>Browserslist 可以根据环境配置不同的环境，此时 <code>browserslistEnv</code> 配置使用 Browserslist 时使用的环境值</strong></p><h2 id="配置合并选项" tabindex="-1">配置合并选项 <a class="header-anchor" href="#配置合并选项" aria-label="Permalink to &quot;配置合并选项&quot;">​</a></h2><h3 id="extends-扩展配置" tabindex="-1">extends：扩展配置 <a class="header-anchor" href="#extends-扩展配置" aria-label="Permalink to &quot;extends：扩展配置&quot;">​</a></h3><ul><li>类型：<code>string</code></li><li>配置位置：不允许在 <code>presets</code> 预设内</li></ul><p>用来扩展其他配置文件。当前配置的优先级更高，扩展文件的优先级更低</p><h3 id="env-根据环境扩展配置" tabindex="-1">env：根据环境扩展配置 <a class="header-anchor" href="#env-根据环境扩展配置" aria-label="Permalink to &quot;env：根据环境扩展配置&quot;">​</a></h3><ul><li>类型：<code>{ [envKey: string]: Options }</code></li><li>配置位置：不能嵌套在另一个<code>env</code>块内。</li></ul><p><code>env</code> 的 <code>Options</code> 允许嵌套整个配置选项，会在匹配 <a href="#envname-当前活动环境"><code>envName</code></a> 时启用选项</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sourceType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 当 NODE_ENV 为 test，会命中 test 环境配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      sourceType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>注意：<code>env[envKey]</code> 选项优先级更高，将合并到最顶层的配置项上</strong></p><h3 id="overrides-提供一组选项" tabindex="-1">overrides：提供一组选项 <a class="header-anchor" href="#overrides-提供一组选项" aria-label="Permalink to &quot;overrides：提供一组选项&quot;">​</a></h3><ul><li>类型：<code>Array&lt;Options&gt;</code></li><li>配置位置：不能嵌套在另一个<code>overrides</code>对象内或<code>env</code>块内。</li></ul><p>允许用户提供一组选项，这些选项将一次<a href="https://www.babeljs.cn/docs/options/#merging" target="_blank" rel="noreferrer">合并</a>到当前配置中。此功能最好与<a href="https://www.babeljs.cn/docs/options/#test" target="_blank" rel="noreferrer"><code>&quot;test&quot;</code></a>/ <a href="https://www.babeljs.cn/docs/options/#include" target="_blank" rel="noreferrer"><code>&quot;include&quot;</code></a>/<a href="https://www.babeljs.cn/docs/options/#exclude" target="_blank" rel="noreferrer"><code>&quot;exclude&quot;</code></a> 选项一起使用，以对特定条件执行不一样的配置。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">overrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./vendor/large.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当匹配到 test 模式时，会启用 compact 功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compact: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="test-include-包含" tabindex="-1">test/include：包含 <a class="header-anchor" href="#test-include-包含" aria-label="Permalink to &quot;test/include：包含&quot;">​</a></h3><ul><li>类型：<code>MatchPattern | Array&lt;MatchPattern&gt;</code>( <a href="https://www.babeljs.cn/docs/options/#matchpattern" target="_blank" rel="noreferrer"><code>MatchPattern</code></a>)</li></ul><p>如果所有模式都不匹配，则当前配置对象被认为是非活动的，并在配置处理期间被忽略。</p><p><strong><code>include</code> 是 <code>test</code> 的同义词</strong></p><p><strong>注意：这些切换不会影响编程和配置加载选项，因为它们在准备合并的配置之前很久就被考虑进去了</strong></p><h3 id="exclude-排除" tabindex="-1">exclude：排除 <a class="header-anchor" href="#exclude-排除" aria-label="Permalink to &quot;exclude：排除&quot;">​</a></h3><ul><li>类型：<code>MatchPattern | Array&lt;MatchPattern&gt;</code>( <a href="https://www.babeljs.cn/docs/options/#matchpattern" target="_blank" rel="noreferrer"><code>MatchPattern</code></a>)</li></ul><p>如果任何模式匹配，则当前配置对象被认为是非活动的，并在配置处理期间被忽略。</p><p><strong>注意：这些切换不会影响编程和配置加载选项，因为它们在准备合并的配置之前很久就被考虑进去了</strong></p><h3 id="ignore-忽略编译" tabindex="-1">ignore：忽略编译 <a class="header-anchor" href="#ignore-忽略编译" aria-label="Permalink to &quot;ignore：忽略编译&quot;">​</a></h3><ul><li>类型：( <code>Array&lt;MatchPattern&gt;</code>)<a href="https://www.babeljs.cn/docs/options/#matchpattern" target="_blank" rel="noreferrer"><code>MatchPattern</code></a></li><li>配置位置：不允许在 <code>presets</code> 预设内</li></ul><p>如果任何模式匹配，Babel 将立即停止当前构建的所有处理。</p><div class="warning custom-block"><p class="custom-block-title">ignore 与 exclude 的区别</p><p><code>exclude</code> 满足时，不使用 <code>babel</code> 进行处理，原样输出文件</p><p><code>ignore</code> 满足时，直接不进行文件编译，不输出文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出文件目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ignore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出文件目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	|-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><h3 id="only-只包含编译" tabindex="-1">only：只包含编译 <a class="header-anchor" href="#only-只包含编译" aria-label="Permalink to &quot;only：只包含编译&quot;">​</a></h3><ul><li>类型：( <code>Array&lt;MatchPattern&gt;</code>)<a href="https://www.babeljs.cn/docs/options/#matchpattern" target="_blank" rel="noreferrer"><code>MatchPattern</code></a></li><li>配置位置：不允许在 <code>presets</code> 预设内</li></ul><p>如果所有模式都不匹配，Babel 将立即停止当前构建的所有处理。</p><p><code>only</code> 和 <code>test/include</code> 的区别与 <code>ignore</code> 与 <code>exclude</code> 的区别一样，<code>test/include</code> 不匹配只会跳过 <code>babel</code> 处理，直接输出源文件内容，而<code>only</code> 会直接跳过编译，不输出文件</p><h2 id="合并配置项" tabindex="-1">合并配置项 <a class="header-anchor" href="#合并配置项" aria-label="Permalink to &quot;合并配置项&quot;">​</a></h2><h3 id="plugin-preset-合并" tabindex="-1">Plugin/Preset 合并 <a class="header-anchor" href="#plugin-preset-合并" aria-label="Permalink to &quot;Plugin/Preset 合并&quot;">​</a></h3>`,95),t=[l];function r(p,o,h,d,c,k){return e(),a("div",null,t)}const u=s(n,[["render",r]]);export{E as __pageData,u as default};
