import{_ as a,c as s,o as i,aR as e,eR as t,eS as l,eT as r,eU as n,eV as p,eW as d,eX as o,eY as h}from"./chunks/framework.DLAwTCsc.js";const D=JSON.parse('{"title":"断点","description":"","frontmatter":{},"headers":[],"relativePath":"devtools/sources/break.md","filePath":"04_更多/02_开发者工具/22_源代码_断点.md","lastUpdated":1739447932000}'),c={name:"devtools/sources/break.md"},k=e('<h1 id="断点" tabindex="-1">断点 <a class="header-anchor" href="#断点" aria-label="Permalink to &quot;断点&quot;">​</a></h1><p>开发者工具提供了各类断点，以满足不同时机时暂停执行代码</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果设置了断点, 但是没有触发，可以检查下触发断点位置的文件是否在忽略列表中。</p></div><h2 id="断点类型概览" tabindex="-1">断点类型概览 <a class="header-anchor" href="#断点类型概览" aria-label="Permalink to &quot;断点类型概览&quot;">​</a></h2><table><thead><tr><th>断点类型</th><th>时机</th></tr></thead><tbody><tr><td><a href="#代码行断点">代码行</a></td><td>暂停在确切的代码区域上。</td></tr><tr><td><a href="#条件断点">条件代码行</a></td><td>在确切的代码区域暂停，但仅当条件成立时。</td></tr><tr><td><a href="#记录代码行断点">日志点</a></td><td>在不暂停执行的情况下将消息记录到<strong>控制台</strong>。</td></tr><tr><td><a href="#dom-更改断点">DOM</a></td><td>暂停更改或移除特定 DOM 节点或其子节点的代码。</td></tr><tr><td><a href="#xhr-提取断点">XHR</a></td><td>当 XHR 网址包含字符串模式时暂停。</td></tr><tr><td><a href="#事件监听器断点">事件监听器</a></td><td>暂停在事件（例如 <code>click</code>）触发后运行的代码。</td></tr><tr><td><a href="#异常断点">异常</a></td><td>暂停抛出已捕获或未捕获异常的代码行。</td></tr><tr><td><a href="#函数断点">函数</a></td><td>每当调用特定函数时暂停。</td></tr><tr><td><a href="#可信类型断点">可信类型</a></td><td>出现<a href="https://www.w3.org/TR/trusted-types/" target="_blank" rel="noreferrer">可信类型</a>违规行为时暂停。</td></tr></tbody></table><h2 id="代码行断点" tabindex="-1">代码行断点 <a class="header-anchor" href="#代码行断点" aria-label="Permalink to &quot;代码行断点&quot;">​</a></h2><p>开发者工具总是会在执行这行代码之前暂停，有两种方式设置代码行断点：</p><ul><li><p>在 <code>编辑器</code> 窗格中点击对应的行号</p></li><li><p>在代码中设置：从代码中调用 <code>debugger</code> 可在该行暂停。</p></li></ul><p><img src="'+t+'" alt="image" loading="lazy"></p><h2 id="条件断点" tabindex="-1">条件断点 <a class="header-anchor" href="#条件断点" aria-label="Permalink to &quot;条件断点&quot;">​</a></h2><p>仅当满足设置的条件时, 才会暂停代码执行，设置条件断点：</p><ol><li><p>在 <code>编辑器</code> 窗格中，代码行左侧是行号列。右键点击该行。</p></li><li><p>选择添加条件断点。代码行下方会显示一个对话框。</p></li><li><p>在对话框中输入条件。</p></li><li><p>按 <code>Enter</code> 键激活断点。行号列顶部会显示一个带问号的橙色图标。</p></li></ol><p><img src="'+l+'" alt="image" loading="lazy"></p><h2 id="记录代码行断点" tabindex="-1">记录代码行断点 <a class="header-anchor" href="#记录代码行断点" aria-label="Permalink to &quot;记录代码行断点&quot;">​</a></h2><p>使用日志代码行断点 (logpoint) 将消息记录到 <code>控制台</code> 中，<strong>此操作不会暂停执行</strong>，也不会因 <code>console.log()</code> 调用而使代码杂乱无章。</p><p>设置过程与 <a href="#条件断点">条件断点</a> 类似：</p><ol><li><p>在 <code>编辑器</code> 窗格中，代码行左侧是行号列。右键点击该行。</p></li><li><p>选择添加日志点。代码行下方会显示一个对话框。</p></li><li><p>在对话框中输入您的日志消息。</p></li><li><p>按 <code>Enter</code> 键激活断点。行号列顶部会显示一个包含两个点的粉色图标。</p></li></ol><p><img src="'+r+'" alt="image" loading="lazy"></p><h2 id="dom-更改断点" tabindex="-1">DOM 更改断点 <a class="header-anchor" href="#dom-更改断点" aria-label="Permalink to &quot;DOM 更改断点&quot;">​</a></h2><p>在更改 DOM 节点或其子级的代码上暂停，可以使用 DOM 更改断点</p><p>设置如下：</p><p><img src="'+n+'" alt="image" loading="lazy"></p><p>可以在以下位置找到 DOM 更改断点的列表：</p><ul><li><p>元素 &gt; DOM 断点窗格。</p></li><li><p>源代码 &gt; DOM 断点侧窗格。</p></li></ul><h3 id="dom-更改断点的类型" tabindex="-1">DOM 更改断点的类型 <a class="header-anchor" href="#dom-更改断点的类型" aria-label="Permalink to &quot;DOM 更改断点的类型&quot;">​</a></h3><ul><li><p>子树修改。当移除或添加当前所选节点的子项，或更改子项的内容时触发。在子节点属性发生更改或对当前所选节点进行任何更改时不触发。</p></li><li><p>属性修改：在当前所选节点上添加或移除属性，或属性值发生更改时触发。</p></li><li><p>节点移除：在移除当前选定的节点时触发。</p></li></ul><h3 id="断点触发" tabindex="-1">断点触发 <a class="header-anchor" href="#断点触发" aria-label="Permalink to &quot;断点触发&quot;">​</a></h3><p>当 JS 操作更改了节点后，触发对应的断点</p><p><img src="'+p+'" alt="image" loading="lazy"></p><h2 id="xhr-提取断点" tabindex="-1">XHR/提取断点 <a class="header-anchor" href="#xhr-提取断点" aria-label="Permalink to &quot;XHR/提取断点&quot;">​</a></h2><p>在 <code>XHR</code> 的<strong>请求网址</strong>包含指定字符串时中断，可以使用 <code>XHR/提取断点</code>。开发者工具会在 XHR 调用 <code>send()</code> 的代码行暂停。</p><p><img src="'+d+'" alt="image" loading="lazy"></p><h2 id="事件监听器断点" tabindex="-1">事件监听器断点 <a class="header-anchor" href="#事件监听器断点" aria-label="Permalink to &quot;事件监听器断点&quot;">​</a></h2><p>暂停在事件触发后运行的事件监听器代码上</p><p><img src="'+o+'" alt="image" loading="lazy"></p><h2 id="异常断点" tabindex="-1">异常断点 <a class="header-anchor" href="#异常断点" aria-label="Permalink to &quot;异常断点&quot;">​</a></h2><p>在<strong>抛出已捕获</strong>或<strong>未捕获异常</strong>的代码行暂停，可以使用异常断点。</p><p><img src="'+h+`" alt="image" loading="lazy"></p><h2 id="函数断点" tabindex="-1">函数断点 <a class="header-anchor" href="#函数断点" aria-label="Permalink to &quot;函数断点&quot;">​</a></h2><p>在每次调用特定函数时暂停，请调用 <code>debug(functionName)</code>，其中 <code>functionName</code> 是您要调试的函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DevTools 在这一行暂停。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传递函数对象，而不是字符串。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="可信类型断点" tabindex="-1">可信类型断点 <a class="header-anchor" href="#可信类型断点" aria-label="Permalink to &quot;可信类型断点&quot;">​</a></h2><p><a href="https://developer.chrome.com/docs/devtools/javascript/breakpoints?hl=zh-cn#trusted-type" target="_blank" rel="noreferrer">参考</a></p>`,43),g=[k];function m(u,b,_,E,f,y){return i(),s("div",null,g)}const x=a(c,[["render",m]]);export{D as __pageData,x as default};
