import{_ as s,c as a,o as e,aR as n,dg as i,dh as l,di as r,dj as t}from"./chunks/framework.DLAwTCsc.js";const S=JSON.parse('{"title":"TLS 的连接过程","description":"","frontmatter":{},"headers":[],"relativePath":"https/tls.md","filePath":"03_网络协议/02_https/03_TLS.md","lastUpdated":1739447932000}'),p={name:"https/tls.md"},o=n('<h1 id="tls-的连接过程" tabindex="-1">TLS 的连接过程 <a class="header-anchor" href="#tls-的连接过程" aria-label="Permalink to &quot;TLS 的连接过程&quot;">​</a></h1><p>HTTPS 也就是 HTTP + SSL/TLS + 数字证书，HTTPS 的连接过程也同样要先经过 TCP 层的三次握手建立 TCP 连接，<strong>然后在通过 TLS 建立安全通道，之后就可以通过这个安全通道进行 HTTP 通信了。</strong></p><p><strong>这个“握手”过程与 TCP 有些类似，是 HTTPS 和 TLS 协议里最重要、最核心的部分，懂了它，就“掌握了 HTTPS”。</strong></p><h2 id="tls-协议的组成" tabindex="-1">TLS 协议的组成 <a class="header-anchor" href="#tls-协议的组成" aria-label="Permalink to &quot;TLS 协议的组成&quot;">​</a></h2><p>TLS 包含几个子协议，你也可以理解为它是由几个不同职责的模块组成，比较常用的有记录协议、警报协议、握手协议、变更密码规范协议等。</p><ul><li>记录协议（Record Protocol）规定了 TLS 收发数据的基本单位：记录（record）。它有点像是 TCP 里的 segment，所有的其他子协议都需要通过记录协议发出。<strong>但多个记录数据可以在一个 TCP 包里一次性发出，也并不需要像 TCP 那样返回 ACK。</strong></li><li>警报协议（Alert Protocol）的职责是向对方发出警报信息，有点像是 HTTP 协议里的状态码。比如，protocol_version 就是不支持旧版本，bad_certificate 就是证书有问题，收到警报后另一方可以选择继续，也可以立即终止连接。</li><li>握手协议（Handshake Protocol）是 TLS 里最复杂的子协议，要比 TCP 的 SYN/ACK 复杂的多，浏览器和服务器会在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。</li><li>变更密码规范协议（Change Cipher Spec Protocol），它非常简单，就是一个“通知”，告诉对方，后续的数据都将使用加密保护。那么反过来，在它之前，数据都是明文的。</li></ul><p>下面的这张图简要地描述了 TLS 的握手过程，其中每一个“框”都是一个记录，多个记录组合成一个 TCP 包发送。所以，最多经过两次消息往返（4 个消息）就可以完成握手，然后就可以在安全的通信环境里发送 HTTP 报文，实现 HTTPS 协议。</p><p><img src="'+i+'" alt="img" loading="lazy"></p><h2 id="tls-1-2-的握手过程" tabindex="-1">TLS/1.2 的握手过程 <a class="header-anchor" href="#tls-1-2-的握手过程" aria-label="Permalink to &quot;TLS/1.2 的握手过程&quot;">​</a></h2><p><strong>握手的目标是安全地交换对称密钥，需要三个随机数，第三个随机数“Pre-Master”必须加密传输，绝对不能让黑客破解；</strong></p><p><img src="'+l+`" alt="img" loading="lazy"></p><p>如图：</p><ol><li><p>TCP 三次握手建立 TCP 连接</p></li><li><p>浏览器会首先发一个“Client Hello”消息，也就是跟服务器“打招呼”。里面有客户端的版本号、支持的密码套件，还有一个随机数（Client Random），用于后续生成会话密钥。</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handshake Protocol: Client Hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Version: TLS 1.2 (0x0303) # 支持的 TLS 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Random: 1cbf803321fd2623408dfe…</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Cipher Suites (17 suites) # 密码套件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>以下服务器几个”记录”通过一个 TCP 包发送</p><ol><li><p>服务器返回一个 “Sever Hello” 消息，把版本号对一下，也给出一个随机数（Server Random），然后从客户端的列表里选一个作为本次通信使用的密码套件，例如选择了“TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384”。</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handshake Protocol: Server Hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Version: TLS 1.2 (0x0303) # 相对应的 TLS 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Random: 0e6320f21bae50842e96…</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030) # 从可选密码套件中选择一个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>服务器发送自己的证书(证书链)发给客户端</p></li><li><p>关键的操作：因为服务器选择了 ECDHE 算法，所以它会在证书后发送“Server Key Exchange”消息，<strong>里面是椭圆曲线的公钥（Server Params），用来实现密钥交换算法，再加上自己的私钥签名认证。</strong></p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handshake Protocol: Server Key Exchange</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EC Diffie-Hellman Server Params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Curve Type: named_curve (0x03)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Named Curve: x25519 (0x001d)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Pubkey: 3b39deaf00217894e...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Signature Algorithm: rsa_pkcs1_sha512 (0x0601)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Signature: 37141adac38ea4...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>服务器发送 “Server Hello Done”消息，服务器说：“我的信息就是这些，打招呼完毕。”</p></li></ol></li><li><p><strong>前三步第一个消息往返就结束了（两个 TCP 包），结果是客户端和服务器通过明文共享了三个信息：Client Random、Server Random 和 Server Params。</strong></p><p>以下浏览器几个记录一个 TCP 包发送</p><ol><li><p>客户端进行证书链逐级验证，确认证书的有效性，再用证书公钥验证签名，就确认了服务器的身份，然后，客户端按照密码套件的要求，也生成一个椭圆曲线的公钥（Client Params），用“Client Key Exchange”消息发给服务器。</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handshake Protocol: Client Key Exchange</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EC Diffie-Hellman Client Params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Pubkey: 8c674d0e08dc27b5eaa…</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>现在客户端和服务器手里都拿到了密钥交换算法的两个参数（Client Params、Server Params），就用 ECDHE 算法一阵算，算出了一个新的东西，叫“Pre-Master”，其实也是一个随机数。</p><p>现在客户端和服务器手里有了三个随机数：Client Random、Server Random 和 Pre-Master。用这三个作为原始材料，<strong>就可以生成用于加密会话的主密钥，叫“Master Secret”（加密密钥）</strong>。而黑客因为拿不到“Pre-Master”，所以也就得不到主密钥。</p><p>为什么非得这么麻烦，非要三个随机数呢？这就必须说 TLS 的设计者考虑得非常周到了，他们不信任客户端或服务器伪随机数的可靠性，为了保证真正的“完全随机”“不可预测”，把三个不可靠的随机数混合起来，那么“随机”的程度就非常高了，足够让黑客难以猜测。</p></li><li><p>客户端发一个“Change Cipher Spec”，然后再发一个“Finished”消息，把之前所有发送的数据做个摘要，再加密一下，让服务器做个验证。</p></li></ol></li><li><p>服务器也是同样的操作，发“Change Cipher Spec”和“Finished”消息，双方都验证加密解密 OK，握手正式结束，后面就收发被加密的 HTTP 请求和响应了。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>上述描述的是主流的 TLS 握手过程，而传统的握手过程有两点不同：</p><ol><li>使用 ECDHE 实现密钥交换，而不是 RSA，所以会在服务器端发出“Server Key Exchange”消息。</li><li>因为使用了 ECDHE，客户端可以不用等到服务器发回“Finished”确认握手完毕，立即就发出 HTTP 报文，省去了一个消息往返的时间浪费。</li></ol></div><h3 id="传统的-tls-握手-基于-rsa" tabindex="-1">传统的 TLS 握手 - 基于 RSA <a class="header-anchor" href="#传统的-tls-握手-基于-rsa" aria-label="Permalink to &quot;传统的 TLS 握手 - 基于 RSA&quot;">​</a></h3><p><img src="`+r+'" alt="img" loading="lazy"></p><p>大体的流程没有变，只是“Pre-Master”不再需要用算法生成，而是客户端直接生成随机数，然后用服务器的公钥加密，通过“Client Key Exchange”消息发给服务器。服务器再用私钥解密，这样双方也实现了共享三个随机数，就可以生成主密钥。</p><h3 id="双向认证-客户端证书" tabindex="-1">双向认证 - 客户端证书 <a class="header-anchor" href="#双向认证-客户端证书" aria-label="Permalink to &quot;双向认证 - 客户端证书&quot;">​</a></h3><p>一般而言，我们只需要认证服务端证书，但在安全要求较高的领域，有的时候（比如网上银行）还会使用 U 盾给用户颁发客户端证书，实现“双向认证”，这样会更加安全。</p><p><strong>双向认证的流程也没有太多变化，只是在“Server Hello Done”之后，“Client Key Exchange”之前，客户端要发送“Client Certificate”消息，服务器收到后也把证书链走一遍，验证客户端的身份。</strong></p><h2 id="tls-1-3-的握手过程" tabindex="-1">TLS/1.3 的握手过程 <a class="header-anchor" href="#tls-1-3-的握手过程" aria-label="Permalink to &quot;TLS/1.3 的握手过程&quot;">​</a></h2><p>TLS/1.2 在 2008 年发布，随着时代的发展，在 2018 年推出了 TLS/1.3 协议。</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p>具体见 <a href="https://time.geekbang.org/column/article/110718" target="_blank" rel="noreferrer">极客 - TLS1.3 特性解析</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://time.geekbang.org/column/article/110354" target="_blank" rel="noreferrer">极客-TLS1.2 连接过程解析</a></li><li><a href="https://time.geekbang.org/column/article/110718" target="_blank" rel="noreferrer">极客 - TLS1.3 特性解析</a></li></ul>',26),h=[o];function c(d,E,g,m,k,b){return e(),a("div",null,h)}const T=s(p,[["render",c]]);export{S as __pageData,T as default};
