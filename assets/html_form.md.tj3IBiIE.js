import{_ as e,c as t,o as a,aR as l}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"表单元素","description":"","frontmatter":{},"headers":[],"relativePath":"html/form.md","filePath":"01_前端/01_html/07_form.md","lastUpdated":1739447932000}'),o={name:"html/form.md"},i=l('<h1 id="表单元素" tabindex="-1">表单元素 <a class="header-anchor" href="#表单元素" aria-label="Permalink to &quot;表单元素&quot;">​</a></h1><h2 id="form-元素" tabindex="-1">form 元素 <a class="header-anchor" href="#form-元素" aria-label="Permalink to &quot;form 元素&quot;">​</a></h2><p>form 元素是创建一个表单的开始，所有表单元素应该包含在 form 元素中。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>最好不要嵌套表单，否则表单的行为不可预知。</p><p>HTML5 在 HTML 表单元素中引入<code>form</code>属性。它让您显式地将元素与表单绑定在一起，即使元素不在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" target="_blank" rel="noreferrer"><code>form</code></a>中。不幸的是，就目前而言，跨浏览器对这个特性的实现还不足以使用。</p></div><h3 id="form-元素属性" tabindex="-1">form 元素属性 <a class="header-anchor" href="#form-元素属性" aria-label="Permalink to &quot;form 元素属性&quot;">​</a></h3><ul><li><p>name：表单名称。可用来通过<code>document.forms</code> 访问该表单</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.forms[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myForm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表单 DOM</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>accept-charset：规定服务器可处理的表单数据字符集。</p></li><li><p>autocomplete：用于指示 input 元素是否能够拥有一个默认值，此默认值是由浏览器自动补全的。</p><p><a href="https://www.runoob.com/tags/att-form-autocomplete.html" target="_blank" rel="noreferrer">参考-菜鸟教程</a></p></li></ul><p><strong>下列属性控制提交表单的行为，并且会被按钮的属性重写。</strong></p><ul><li><p>action：表单提交的 URL。</p></li><li><p>enctpe：表单提交数据之前如何对其进行编码。（适用于 method=&quot;post&quot; 的情况）</p><ul><li>application/x-www-form-urlencoded（默认值）</li><li>multipart/form-data（上传文件时需设置）</li><li>text/plain</li></ul></li><li><p>method：表单提交时的 HTTP 方法。目前只支持 GET、POST。</p></li><li><p>novalidate：表单提交时不进行验证。</p></li><li><p>target：表单提交时规定在何处打开 action URL。</p><ul><li>_blank：在新的未命名的浏览上下文中加载。</li><li>_self：默认值。在相同浏览上下文中加载。</li><li>_parent： 在当前上下文的父级浏览上下文中加载，如果没有父级，则与 _self 表现一致。</li><li>_top：在最顶级的浏览上下文中（即当前上下文的一个没有父级的祖先浏览上下文），如果没有父级，则与 _self 表现一致。</li></ul></li></ul><h2 id="表单元素通用属性" tabindex="-1">表单元素通用属性 <a class="header-anchor" href="#表单元素通用属性" aria-label="Permalink to &quot;表单元素通用属性&quot;">​</a></h2><p>下面这些属性适用于所有表单控件，可以对其进行控制。</p><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>autofocus</td><td>是否自动获取焦点</td></tr><tr><td>disabled</td><td>是否禁用。可能从父元素中继承设置，例如: fieldset；=&gt; 禁用后，通过 form 元素获取不到此控件的值</td></tr><tr><td>form</td><td>与之关联的表单的 ID。理论上可以在 form 元素之外定义一个表单元素，但浏览器暂不支持</td></tr><tr><td>name</td><td>表单元素数据 key 值</td></tr><tr><td>value</td><td>表单元素的初始值</td></tr><tr><td>type</td><td>表单元素的类型</td></tr><tr><td>tabIndex</td><td>表单元素的切换（tab）序号</td></tr></tbody></table><h2 id="文本输入框-input" tabindex="-1">文本输入框 <code>&lt;input&gt;</code> <a class="header-anchor" href="#文本输入框-input" aria-label="Permalink to &quot;文本输入框 `&lt;input&gt;`&quot;">​</a></h2><p><code>input</code> 是最基本的表单控件，可以通过不同 <code>type</code> 来让用户输入不同的数据。</p><p>所有文本框除了通用属性，还具有如下属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>readonly</td><td>用户不能修改值 =&gt; 可以通过 form 元素获取此控件的值</td></tr><tr><td>placeholder</td><td>占位符</td></tr><tr><td>size</td><td>规定以字符数计的 <code>&lt;input&gt;</code> 元素的可见宽度。</td></tr><tr><td>maxlength</td><td>允许的最大字符数。</td></tr></tbody></table><h3 id="单行文本框-text" tabindex="-1">单行文本框：text <a class="header-anchor" href="#单行文本框-text" aria-label="Permalink to &quot;单行文本框：text&quot;">​</a></h3><p><code>type</code> 为 <code>text</code> 的 <code>input</code>，创建一个单行文本框。<code>intpu</code> 默认值就是 <code>text</code>，并且在 <code>type</code> 为浏览器不支持的时候，也会是 <code>text</code>。</p><input type="text" id="comment" name="comment" value="单行文本框"><p>单行文本框：</p><ul><li>单行文本框只有一个真正的约束：如果您输入带有换行符的文本，浏览器会在发送数据之前删除这些换行符。也就是说，单行文本框是不会换行的</li></ul><h3 id="密码框-password" tabindex="-1">密码框：password <a class="header-anchor" href="#密码框-password" aria-label="Permalink to &quot;密码框：password&quot;">​</a></h3><p>type：password，创建一个密码框。</p><input type="password" id="pwd" name="pwd"><p>使用密码框：</p><ul><li>数据还是明文的，这只是一个界面特性，无法直接看到数据</li><li>地址栏右边有一个钥匙图标，可以保存其输入的账号密码。 =&gt; 当存在多个时，可以进行选择</li></ul><h3 id="单选框-radio" tabindex="-1">单选框：radio <a class="header-anchor" href="#单选框-radio" aria-label="Permalink to &quot;单选框：radio&quot;">​</a></h3><p>type：radio，创建单选框。通过设置一样的 name 属性分为一组。同一组中只能选中一个项。</p><ul><li><label for="soup">Soup</label><input type="radio" checked id="soup" name="meal" value="soup"></li><li><label for="curry">Curry</label><input type="radio" id="curry" name="meal" value="curry"></li><li><label for="pizza">Pizza</label><input type="radio" id="pizza" name="meal" value="pizza"></li></ul><p>单选框：</p><ul><li>设置 checked 属性的单选框为默认选中项</li><li>控件的 value 属性就是提交值</li></ul><h3 id="复选框-checkbox" tabindex="-1">复选框：checkbox <a class="header-anchor" href="#复选框-checkbox" aria-label="Permalink to &quot;复选框：checkbox&quot;">​</a></h3><p>type：checkbox，创建复选框。与单选框的区别在于可以多选，同样根据 name 进行分组。</p><p><label><input type="checkbox" name="vehicle" value="Bike"> 我有一辆自行车</label><br><label><input type="checkbox" name="vehicle" value="Car"> 我有一辆小轿车</label><br><label><input type="checkbox" name="vehicle" value="Boat"> 我有一艘船</label><br></p><p>复选框：</p><ul><li>设置 checked 属性的单选框为默认选中项</li><li>控件的 value 属性就是提交值</li></ul><h3 id="文件选择框-file" tabindex="-1">文件选择框：file <a class="header-anchor" href="#文件选择框-file" aria-label="Permalink to &quot;文件选择框：file&quot;">​</a></h3><p>type：file，创建文件选择框。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/*&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><input type="file" name="file" id="file" accept="image/*" multiple><p>文件选择框：</p><ul><li>accept：可以设置被接受的文件类型。不验证所选文件的类型；它只是为浏览器提供提示来引导用户选择正确的文件类型。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file#%E5%94%AF%E4%B8%80%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E%E7%AC%A6" target="_blank" rel="noreferrer">MDN-参考</a></li><li>multiple：允许选择多个文件。</li><li>通过 <code>HTMLInputElement.files</code> 可以获取选择的文件对象。</li></ul><h3 id="按钮框" tabindex="-1">按钮框 <a class="header-anchor" href="#按钮框" aria-label="Permalink to &quot;按钮框&quot;">​</a></h3><p>以下有几种按钮框（<strong>一般主要用 button 元素实现按钮</strong>）：</p><ul><li>submit：提交按钮，将表单数据提交到服务器</li><li>reset：重置按钮，将表单数据重置为默认值</li><li>button：可点击按钮，没有默认行为，主要与 js 脚本配合使用</li><li>image：图像按钮，与 submit 行为一致，主要是以图像为按钮</li></ul><h3 id="其他小控件" tabindex="-1">其他小控件 <a class="header-anchor" href="#其他小控件" aria-label="Permalink to &quot;其他小控件&quot;">​</a></h3><p><a href="https://www.runoob.com/tags/att-input-type.html" target="_blank" rel="noreferrer">菜鸟教程</a></p><p>例如 number、month、email 等等作用不是很大，在移动端可以通过 type：number 等让键盘默认为数字。</p><h2 id="多行文本框-textarea" tabindex="-1">多行文本框 <code>textarea</code> <a class="header-anchor" href="#多行文本框-textarea" aria-label="Permalink to &quot;多行文本框 `textarea`&quot;">​</a></h2><p>textarea 与 input:text(单行文本框)的主要区别是，允许用户输入包含硬换行符(即按回车)的文本。</p><p>支持的其他属性：</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea#attr-cols" target="_blank" rel="noreferrer"><code>cols</code></a></td><td><code>20</code></td><td>文本控件的可见宽度，平均字符宽度。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea#attr-rows" target="_blank" rel="noreferrer"><code>rows</code></a></td><td></td><td>控制的可见文本行数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea#attr-wrap" target="_blank" rel="noreferrer"><code>wrap</code></a></td><td><code>soft</code></td><td>表示控件是如何包装文本的。可能的值：<code>hard</code> 或 <code>soft</code></td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>textarea 只接受文本内容，所以将任何 HTML 内容放入 textarea 中都呈现为纯文本内容。</li><li>textarea 不支持 value 属性，只需要将默认的文本放在元素开始和结束标记之间。</li><li>在大多数浏览器，会在右下角有一个拖放操作，可用 CSS 设置 resize: none 来关闭。</li><li>textarea 并不会自适应高度，此时我们需要结合 js 来设置高度。</li></ol></div><h2 id="下拉选择框-select、option、optgroup" tabindex="-1">下拉选择框：<code>select</code>、<code>option</code>、<code>optgroup</code> <a class="header-anchor" href="#下拉选择框-select、option、optgroup" aria-label="Permalink to &quot;下拉选择框：`select`、`option`、`optgroup`&quot;">​</a></h2><p>选择框由 <code>select</code> 元素创建的，通过 <code>option</code> 元素定义选项，通过 <code>optgrou</code> 定义其分组</p><select id="groups" name="groups" multiple><optgroup label="fruits"><option>Banana</option><option selected>Cherry</option><option>Lemon</option></optgroup><optgroup label="vegetables"><option>Carrot</option><option>Eggplant</option><option>Potato</option></optgroup></select><p>注意：</p><ul><li>select 元素的 multiple 属性：支持多选(同时按下 Cmd/Ctrl 并点击多个值)</li><li>option 元素的 selected 属性：设置选择项默认值（如果没有设置的选项，默认为第一个）</li><li>option 元素的 value 属性：表单提交时的值，默认为元素标记之间内容值。</li><li>optgroup 元素的 disabled 属性：可以设置一组是否禁用。</li><li><strong>当为多选时，select 的 value 值不是选中的全部值，此时应该遍历 option 选项，通过 option 的 selected 属性来判断时是否选中</strong></li></ul><h2 id="按钮-button" tabindex="-1">按钮：<code>button</code> <a class="header-anchor" href="#按钮-button" aria-label="Permalink to &quot;按钮：`button`&quot;">​</a></h2><p>与 <a href="#按钮框"><code>input</code> 按钮框</a>类似，有三种类型。</p><p>type：submit、reset、submit 三种类型。</p><p>可以重写 <code>form</code> 元素的表单提交属性，<a href="#form-元素属性">form 属性</a></p><h2 id="其他元素" tabindex="-1">其他元素 <a class="header-anchor" href="#其他元素" aria-label="Permalink to &quot;其他元素&quot;">​</a></h2><h3 id="label-标注-input-元素" tabindex="-1"><code>&lt;label&gt;</code>：标注 <code>input</code> 元素 <a class="header-anchor" href="#label-标注-input-元素" aria-label="Permalink to &quot;`&lt;label&gt;`：标注 `input` 元素&quot;">​</a></h3><p>主要有以下优点：</p><ul><li>标签文本不仅与其相应的文本输入元素在视觉上相关联，程序中也是如此。 这意味着，当用户聚焦到这个表单输入元素时，屏幕阅读器可以读出标签，让使用辅助技术的用户更容易理解应输入什么数据。</li><li>你可以点击关联的标签来聚焦或者激活这个输入元素，就像直接点击输入元素一样。这扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</li></ul><p>有两种标注方式：</p><ol><li>通过 <code>for</code> 属性绑定到 <code>input</code> 元素。<code>for</code> 绑定的是 <code>input</code> 元素的 <code>id</code>。</li><li><code>label</code> 元素包含 <code>input</code> 元素</li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>一个 input 可以与多个标签相关联。</li><li>点击或者轻触（tap）与表单控件相关联的 <code>&lt;label&gt;</code> 也可以触发关联控件的 <code>click</code> 事件。</li><li><strong>通常可利用这个特性来定制化表单控件</strong></li></ul></div><h3 id="other" tabindex="-1">other <a class="header-anchor" href="#other" aria-label="Permalink to &quot;other&quot;">​</a></h3><p><a href="https://www.runoob.com/tags/ref-byfunc.html" target="_blank" rel="noreferrer">菜鸟教程-元素参考</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Basic_native_form_controls" target="_blank" rel="noreferrer">MDN</a></p><p><a href="https://www.runoob.com/tags/ref-byfunc.html" target="_blank" rel="noreferrer">菜鸟</a></p>',73),r=[i];function d(p,s,n,c,h,u){return a(),t("div",null,r)}const k=e(o,[["render",d]]);export{b as __pageData,k as default};
