import{_ as s,c as e,o as a,aR as i,cv as n}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"scripts 字段","description":"","frontmatter":{},"headers":[],"relativePath":"npm/scripts.md","filePath":"02_工程化/06_npm/06_脚本.md","lastUpdated":1739447932000}'),p={name:"npm/scripts.md"},l=i(`<h1 id="scripts-字段" tabindex="-1">scripts 字段 <a class="header-anchor" href="#scripts-字段" aria-label="Permalink to &quot;scripts 字段&quot;">​</a></h1><p><code>package.json</code> 文件的 <code>“scripts”</code> 属性支持许多<strong>内置脚本</strong>及其<strong>预设生命周期事件</strong>以及<strong>任意脚本</strong>。这些命令可以通过 <code>npm run-script &lt;stage&gt;</code> 或简称 <code>npm run &lt;stage&gt;</code> 来执行。</p><h2 id="npm-run-的基础原理" tabindex="-1">npm run 的基础原理 <a class="header-anchor" href="#npm-run-的基础原理" aria-label="Permalink to &quot;npm run 的基础原理&quot;">​</a></h2><p>流程：<code>npm run &lt;stage&gt;</code> -&gt; 将当前项目的 <code>node_modules/.bin</code> 的绝对路径加入到环境变量 <code>PATH</code> -&gt; 执行对应系统的可执行文件 -&gt; 执行对应的 <code>bin</code> 字段对应的文件</p><h3 id="_1-bin-目录" tabindex="-1">1. .bin 目录 <a class="header-anchor" href="#_1-bin-目录" aria-label="Permalink to &quot;1. .bin 目录&quot;">​</a></h3><p>当 <code>install</code> 安装包时, 如果包的 <code>package.json</code> 文件中存在 <code>bin</code> 字段时, 就会自动在 <code>node_modules/.bin</code> 中创建操作系统的可执行文件，这几个可执行文件会通过 <code>node</code> 执行指定 <code>bin</code> 字段对应的文件。</p><div class="tip custom-block"><p class="custom-block-title">npm 生成的可执行文件</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># unix 系默认的可执行文件，必须输入完整文件名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue-cli-service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># windows cmd 中默认的可执行文件，当我们不添加后缀名时，自动根据 pathext 查找文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue-cli-service.cmd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows PowerShell 中可执行文件，可以跨平台</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue-cli-service.ps1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><h3 id="_2-path-环境变量" tabindex="-1">2. PATH 环境变量 <a class="header-anchor" href="#_2-path-环境变量" aria-label="Permalink to &quot;2. PATH 环境变量&quot;">​</a></h3><p>每当执行 <code>npm run</code> 时，会自动新建一个 <code>Shell</code>，这个 <code>Shell</code> 会将当前项目的 <code>node_modules/.bin</code> 的绝对路径加入到环境变量 <code>PATH</code> 中，执行结束后，再将环境变量 <code>PATH</code> 恢复原样。</p><p>在当前项目下执行 <code>npm run env</code> 查看脚本运行时的环境变量，可以看到 <code>PATH 环境变量</code> 为：</p><p><img src="`+n+`" alt="img" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>PATH 环境变量，是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到哪些目录下去寻找。</p></div><h2 id="多命令运行" tabindex="-1">多命令运行 <a class="header-anchor" href="#多命令运行" aria-label="Permalink to &quot;多命令运行&quot;">​</a></h2><p>有的项目在启动时可能需要同时执行多个任务，多个任务的执行顺序决定了项目的表现。</p><h3 id="串行执行" tabindex="-1">串行执行 <a class="header-anchor" href="#串行执行" aria-label="Permalink to &quot;串行执行&quot;">​</a></h3><p>串行执行，要求前一个任务执行成功以后才能执行下一个任务，使用<code>&amp;&amp;</code>符号来连接。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="并行执行" tabindex="-1">并行执行 <a class="header-anchor" href="#并行执行" aria-label="Permalink to &quot;并行执行&quot;">​</a></h3><p>并行执行，就是多个命令可以同时的平行执行，使用<code>&amp;</code>符号来连接。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>在执行 <code>npm run</code> 脚本过程中，<code>npm</code>会设置一些特殊的 env 环境变量</p><ul><li><p>其中 <code>package.json</code> 中的所有字段，都会被设置为以 <code>npm_package_</code> 开头的环境变量。</p><p>例如可以通过 <code>process.env.npm_package_name</code> 可以获取到 <code>package.json</code> 中 <code>name</code> 字段的值</p></li><li><p><code>npm</code> 相关的所有配置也会被设置为以 <code>npm_config_</code> 开头的环境变量。</p></li><li><p>特殊的环境变量 <code>npm_lifecycle_event</code>，表示正在运行的脚本名称</p></li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这些环境变量只能在 <code>npm run</code> 的脚本执行环境内拿到，正常执行的 <code>node</code> 脚本是获取不到的。</p></div><h2 id="脚本类型" tabindex="-1">脚本类型 <a class="header-anchor" href="#脚本类型" aria-label="Permalink to &quot;脚本类型&quot;">​</a></h2><p>支持如下几种类型脚本：</p><h3 id="自定义脚本" tabindex="-1">自定义脚本 <a class="header-anchor" href="#自定义脚本" aria-label="Permalink to &quot;自定义脚本&quot;">​</a></h3><p>用户在 <code>package.json</code> 中的 <code>scripts</code> 中定义的脚本，可通过 <code>npm run</code> 执行</p><h3 id="pre-和-post-脚本" tabindex="-1">pre 和 post 脚本 <a class="header-anchor" href="#pre-和-post-脚本" aria-label="Permalink to &quot;pre 和 post 脚本&quot;">​</a></h3><p>要为 <code>package.json</code> 的 <code>“scripts”</code> 部分中定义的任何脚本创建 <code>“pre”</code> 或 <code>“post”</code> 脚本，只需创建另一个具有匹配名称的脚本并将 <code>“pre”</code> 或 <code>“post”</code> 添加到它们的开头即可。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;precompress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ executes BEFORE the \`compress\` script }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;compress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ run command to compress files }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postcompress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ executes AFTER \`compress\` script }}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时运行 <code>npm run compress</code> 会依次执行 <code>precompress</code>、<code>compress</code>、<code>postcompress</code>。</p><h3 id="生命周期脚本" tabindex="-1"><a href="https://docs.npmjs.com/cli/v10/using-npm/scripts#life-cycle-scripts" target="_blank" rel="noreferrer">生命周期脚本</a> <a class="header-anchor" href="#生命周期脚本" aria-label="Permalink to &quot;[生命周期脚本](https://docs.npmjs.com/cli/v10/using-npm/scripts#life-cycle-scripts)&quot;">​</a></h3><p>有一些特殊的生命周期脚本仅在某些情况下发生。</p><ul><li><code>prepare</code>, <code>prepublish</code>, <code>prepublishOnly</code>, <code>prepack</code>, <code>postpack</code>, <code>dependencies</code></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903870578032647?searchId=20240506151306F59F9A92B48741EFD8DF#heading-18" target="_blank" rel="noreferrer">掘金 - npm</a></li></ul>`,37),c=[l];function t(o,r,d,h,k,u){return a(),e("div",null,c)}const g=s(p,[["render",t]]);export{b as __pageData,g as default};
