import{_ as e,c as a,o as t,aR as l}from"./chunks/framework.DLAwTCsc.js";const u=JSON.parse('{"title":"HTML 全局属性","description":"","frontmatter":{},"headers":[],"relativePath":"html/global.md","filePath":"01_前端/01_html/02_全局属性.md","lastUpdated":1739447932000}'),o={name:"html/global.md"},r=l('<h1 id="html-全局属性" tabindex="-1">HTML 全局属性 <a class="header-anchor" href="#html-全局属性" aria-label="Permalink to &quot;HTML 全局属性&quot;">​</a></h1><p>全局属性是所有 HTML 共有的属性; 可以用于所有元素, 即使对有些元素不起作用</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>我们可以在所有的 HTML 元素上指定全局属性，甚至是在标准里没有指定的元素。这意味着任何非标准元素仍必须能够应用这些属性，即使使用这些元素意味着文档不再是 html5 兼容的。例如，虽然<code>&lt;foo&gt;</code>不是一个有效的 HTML 元素，但是 html5 兼容的浏览器隐藏了标记为<code>&lt;foo hidden&gt;...&lt;foo&gt;</code>的内容。</p></div><p>除了一些基本的 HTML 全局属性, 还存在以下全局属性(以下不会深入, 知道即可):</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-xml:lang" target="_blank" rel="noreferrer"><strong><code>xml:lang</code></strong></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-xml:base" target="_blank" rel="noreferrer"><strong><code>xml:base</code></strong></a> ——两者都是从 XHTML 规范继承，但为了兼容性而被保留的。 =&gt; 边缘化的功能</li><li>多重<code>aria-*</code>属性，用于改善可访问性。 =&gt; 在目前来讲, 可访问性一般不会运用</li><li>事件处理程序 属性; <code>onabort</code>, <code>onautocomplete</code>, <code>onautocompleteerror</code> 等等</li></ul><h2 id="全局属性列表" tabindex="-1">全局属性列表 <a class="header-anchor" href="#全局属性列表" aria-label="Permalink to &quot;全局属性列表&quot;">​</a></h2><h3 id="class-类名" tabindex="-1">class: 类名 <a class="header-anchor" href="#class-类名" aria-label="Permalink to &quot;class: 类名&quot;">​</a></h3><p>以空格分隔的类名列表</p><h3 id="style-样式" tabindex="-1">style: 样式 <a class="header-anchor" href="#style-样式" aria-label="Permalink to &quot;style: 样式&quot;">​</a></h3><p>含要应用于元素的 CSS 样式声明。</p><h3 id="id-唯一标识符" tabindex="-1">id: 唯一标识符 <a class="header-anchor" href="#id-唯一标识符" aria-label="Permalink to &quot;id: 唯一标识符&quot;">​</a></h3><p>该标识符在整个文档中必须是唯一的。</p><h3 id="tabindex-焦点管理相关" tabindex="-1">tabindex: 焦点管理相关 <a class="header-anchor" href="#tabindex-焦点管理相关" aria-label="Permalink to &quot;tabindex: 焦点管理相关&quot;">​</a></h3><p>整数属性，指示元素是否可以获取输入焦点（可聚焦），是否应该参与顺序键盘导航，如果是，则表示哪个位置。它可能需要几个值：</p><ul><li>负值表示该元素应该是可聚焦的，但不应通过顺序键盘导航到达;</li><li><code>0</code> 表示元素应通过顺序键盘导航可聚焦和可到达，但其相对顺序由平台约定定义;</li><li>正值意味着元素应该可以通过顺序键盘导航进行聚焦和访问;元素聚焦的顺序是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-tabindex" target="_blank" rel="noreferrer"><strong>tabindex</strong></a>的增加值。如果多个元素共享相同的<code>tabindex</code>，则它们的相对顺序遵循它们在文档中的相对位置。</li></ul><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=tabindex" target="blank">HTML</a> 试试</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>没有定义 tabindex 时, 通过 tab 切换是按照表单定义顺序的</p><p>可以配置 js 实现更精确的焦点管理, 待学习模块</p></div><h3 id="title-表示元素信息" tabindex="-1">title: 表示元素信息 <a class="header-anchor" href="#title-表示元素信息" aria-label="Permalink to &quot;title: 表示元素信息&quot;">​</a></h3><p>包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户,但不是必须的。</p><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=title" target="blank">HTML</a> 试试</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>浏览器内置的 tip 显示效果不佳, 一般不使用, 可自定义实现</p></div><h3 id="draggable-是否可拖拽" tabindex="-1">draggable: 是否可拖拽 <a class="header-anchor" href="#draggable-是否可拖拽" aria-label="Permalink to &quot;draggable: 是否可拖拽&quot;">​</a></h3><p>一种枚举属性, 指示是否可以拖动元素, 有以下的值:</p><ul><li><code>true</code>, 这表明元素可能被拖动</li><li><code>false</code>, 这表明元素可能不会被拖动</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>完整的可拖拽需要配置其他接口(e.g <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API" target="_blank" rel="noreferrer">Drag and Drop API (en-US)</a> )实现, 具体见(模块待编写)</p></div><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=draggable" target="blank">HTML</a> 试试</p><h3 id="contenteditable-是否可编辑" tabindex="-1">contenteditable: 是否可编辑 <a class="header-anchor" href="#contenteditable-是否可编辑" aria-label="Permalink to &quot;contenteditable: 是否可编辑&quot;">​</a></h3><p>一个枚举属性, 表示元素是否可编辑</p><ul><li>true 或者空字符串, 表示元素是可被编辑的</li><li>false, 表明元素不能被编辑</li></ul><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=contenteditable" target="blank">HTML</a> 试试</p><h3 id="data-自定义属性" tabindex="-1">data-*: 自定义属性 <a class="header-anchor" href="#data-自定义属性" aria-label="Permalink to &quot;data-\\*: 自定义属性&quot;">​</a></h3><p>H5 统一了自定义属性的属性, 通过 dataset 接口就可以用来操作元素的自定义属性, 详情见..(暂未实现)</p><h3 id="dir-文本方向的枚举" tabindex="-1">dir: 文本方向的枚举 <a class="header-anchor" href="#dir-文本方向的枚举" aria-label="Permalink to &quot;dir: 文本方向的枚举&quot;">​</a></h3><p>指示元素的枚举属性, 取值范围</p><ul><li>ltr, 指从<em>左</em>到<em>右</em>，用于那种从左向右书写的语言（比如英语）；</li><li>rtl, 指从<em>右</em>到<em>左</em>，用于那种从右向左书写的语言（比如阿拉伯语）；</li><li>auto, 指由用户代理决定方向。它在解析元素中字符时会运用一个基本算法，直到发现一个具有强方向性的字符，然后将这一方向应用于整个元素。</li></ul><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=dir" target="blank">HTML</a> 试试</p><h3 id="hidden-隐藏元素" tabindex="-1">hidden: 隐藏元素 <a class="header-anchor" href="#hidden-隐藏元素" aria-label="Permalink to &quot;hidden: 隐藏元素&quot;">​</a></h3><p>实现类似与 <code>diaplay: none</code> 的效果, 但不会从 DOM 中销毁, 也就是通过 DOM 接口还是可以进行操作的</p><p>打开这个 <a href="/wzb_knowledge_base/html/01.html?test=hidden" target="blank">HTML</a> 试试</p><h3 id="autocapitalize-文本输入是否和如何自动大写" tabindex="-1">autocapitalize:文本输入是否和如何自动大写 <a class="header-anchor" href="#autocapitalize-文本输入是否和如何自动大写" aria-label="Permalink to &quot;autocapitalize:文本输入是否和如何自动大写&quot;">​</a></h3><p>控制用户的文本输入是否和如何自动大写，它可以有以下的值：</p><ul><li><code>off</code> or <code>none</code>，没有应用自动大写（所有字母都默认为小写字母）。</li><li><code>on</code> or <code>sentences</code>，每个句子的第一个字母默认为大写字母;所有其他字母都默认为小写字母。</li><li><code>words</code>，每个单词的第一个字母默认为大写字母;所有其他字母都默认为小写字母。</li><li><code>characters</code>，所有的字母都应该默认为大写。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这个属性主要是移动设备使用, 用来控制输入字母时行为</p></div><h2 id="更多全局属性" tabindex="-1">更多全局属性 <a class="header-anchor" href="#更多全局属性" aria-label="Permalink to &quot;更多全局属性&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-class" target="_blank" rel="noreferrer">参考 MDN</a></p>',45),i=[r];function d(c,s,n,h,b,p){return t(),a("div",null,i)}const _=e(o,[["render",d]]);export{u as __pageData,_ as default};
