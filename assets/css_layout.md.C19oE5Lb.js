import{_ as a,c as e,o as s,aR as t}from"./chunks/framework.DLAwTCsc.js";const m=JSON.parse('{"title":"CSS 布局","description":"","frontmatter":{},"headers":[],"relativePath":"css/layout.md","filePath":"01_前端/02_css/11_布局概述.md","lastUpdated":1739447932000}'),l={name:"css/layout.md"},o=t('<h1 id="css-布局" tabindex="-1">CSS 布局 <a class="header-anchor" href="#css-布局" aria-label="Permalink to &quot;CSS 布局&quot;">​</a></h1><p>CSS 布局模式，有时简称为布局，是一种基于盒子与其兄弟和祖辈盒子的交互方式来确定盒子的位置和大小的算法。</p><p>CSS 布局技术的演变大致如下：<strong>主要方法是设定<code>display</code>属性的值。</strong></p><ul><li><a href="/wzb_knowledge_base/css/normal_flow.html">正常布局流</a>：浏览器默认的 HTML 布局方式。</li><li><a href="/wzb_knowledge_base/css/flatandposition.html#浮动">浮动</a>：浮动到左侧或右侧，并且从正常布局流(normal flow)中移除，这时候其他的周围内容就会在这个被设置浮动(float)的元素周围环绕。</li><li><a href="/wzb_knowledge_base/css/flatandposition.html#定位">定位</a>：把一个元素从它原本在正常布局流(normal flow)中应该在的位置移动到另一个位置。</li><li><a href="/wzb_knowledge_base/css/flexBox.html">弹性盒子(Flexbox)</a>：用于创建横向或是纵向的一维页面布局</li><li><a href="/wzb_knowledge_base/css/grid.html">Grid 布局</a>：用于同时在两个维度上把元素按行和列排列整齐。</li></ul>',4),_=[o];function r(n,i,c,d,f,h){return s(),e("div",null,_)}const S=a(l,[["render",r]]);export{m as __pageData,S as default};
