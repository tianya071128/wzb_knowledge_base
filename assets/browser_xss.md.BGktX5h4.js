import{_ as s,c as a,o as i,aR as n,cd as l,ce as e,cf as p}from"./chunks/framework.DLAwTCsc.js";const u=JSON.parse('{"title":"跨站脚本攻击（XSS）","description":"","frontmatter":{},"headers":[],"relativePath":"browser/xss.md","filePath":"01_前端/04_浏览器/05_跨站脚本攻击_XSS.md","lastUpdated":1739447932000}'),t={name:"browser/xss.md"},r=n('<h1 id="跨站脚本攻击-xss" tabindex="-1">跨站脚本攻击（XSS） <a class="header-anchor" href="#跨站脚本攻击-xss" aria-label="Permalink to &quot;跨站脚本攻击（XSS）&quot;">​</a></h1><p>XSS(Cross Site Scripting - “跨站脚本”)，为了与 &quot;CSS&quot; 区分，故简称 XSS：指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>最开始的时候，这种攻击是通过跨域来实现的，所以叫“跨域脚本”。但是发展到现在，往 HTML 文件中注入恶意代码的方式越来越多了，所以是否跨域注入脚本已经不是唯一的注入手段了，但是 XSS 这个名字却一直保留至今。</p></div><h2 id="xss-的危害" tabindex="-1">XSS 的危害 <a class="header-anchor" href="#xss-的危害" aria-label="Permalink to &quot;XSS 的危害&quot;">​</a></h2><p>当页面被注入了恶意 JavaScript 脚本时，浏览器无法区分这些脚本是被恶意注入的还是正常的页面内容，所以恶意注入 JavaScript 脚本也拥有所有的脚本权限：</p><ul><li>窃取 Cookie 信息：通过 <code>“document.cookie”</code> 获取 Cookie 信息，通过 ajax 技术发送到其他服务器上</li><li>监听用户行为：通过 <code>“addEventListener”</code> 接口监听各类事件，比如监听表单，获取用户输入信息</li><li>操作 DOM：例如伪造假的登录窗口，生成浮窗广告等等</li><li>以及其他能够通过脚本做到的事情</li></ul><h2 id="恶意脚本是怎样注入的" tabindex="-1">恶意脚本是怎样注入的 <a class="header-anchor" href="#恶意脚本是怎样注入的" aria-label="Permalink to &quot;恶意脚本是怎样注入的&quot;">​</a></h2><p>通常情况下，主要有<strong>存储型 XSS 攻击</strong>、<strong>反射型 XSS 攻击</strong>和<strong>基于 DOM 的 XSS 攻击</strong>三种方式来注入恶意脚本。</p><h3 id="存储型-xss-攻击" tabindex="-1">存储型 XSS 攻击 <a class="header-anchor" href="#存储型-xss-攻击" aria-label="Permalink to &quot;存储型 XSS 攻击&quot;">​</a></h3><p>存储型 XSS 攻击大致需要经过如下步骤：</p><ul><li>利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；</li><li>用户向网站请求包含了恶意 JavaScript 脚本的页面；</li><li>用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。</li></ul><p>参考下图：</p><p><img src="'+l+'" alt="img" loading="lazy"></p><h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h4><p>2015 年喜马拉雅就被曝出了存储型 XSS 漏洞。</p><p>用户设置专辑名称时，服务器对关键字过滤不严格，比如可以将专辑名称设置为一段 JavaScript，如下图所示：</p><p><img src="'+e+'" alt="img" loading="lazy"></p><p>当提交时，喜马拉雅的服务器会保存该段 JavaScript 代码到数据库中。然后当用户打开黑客设置的专辑时，这段代码就会在用户的页面里执行（如下图），这样就可以获取用户的 Cookie 等数据信息。</p><p><img src="'+p+`" alt="img" loading="lazy"></p><p>当用户打开黑客设置的专辑页面时，服务器也会将这段恶意 JavaScript 代码返回给用户，因此这段恶意脚本就在用户的页面中执行了。</p><p>恶意脚本可以通过 XMLHttpRequest 或者 Fetch 将用户的 Cookie 数据上传到黑客的服务器，黑客拿到了用户 Cookie 信息之后，就可以利用 Cookie 信息在其他机器上登录该用户的账号，并利用用户账号进行一些恶意操作。</p><h3 id="反射型-xss-攻击" tabindex="-1">反射型 XSS 攻击 <a class="header-anchor" href="#反射型-xss-攻击" aria-label="Permalink to &quot;反射型 XSS 攻击&quot;">​</a></h3><p>反射型 XSS 攻击：恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。</p><p>可以点击如下链接，作用是将 URL 中 xss 参数的内容显示在页面。</p><ul><li>打开这个<a href="/vuepress_test/security/xss?xss=123" target="_blank">链接</a>，这样在页面中展示就是“123”了</li><li>打开这个<a href="/vuepress_test/security/xss?xss=&lt;script&gt;alert(&#39;你被xss攻击了&#39;)&lt;/script&gt;" target="_blank">链接</a>，xss 参数的脚本就会被注入到页面中，就会在页面上弹出弹框</li></ul><div class="tip custom-block"><p class="custom-block-title">服务端代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 创建模板</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../template/tpl-user.art&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      xss: query.xss,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;反射型 XSS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html; charset=utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(html);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div><p>通过上面的示例，反射型 XSS 攻击就是用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端。</p><p>在实际操作中，<strong>黑客经常会通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接，所以对于一些链接我们一定要慎之又慎</strong>。</p><p>另外需要注意的是，<strong>Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方</strong>。</p><h3 id="基于-dom-的-xss-攻击" tabindex="-1">基于 DOM 的 XSS 攻击 <a class="header-anchor" href="#基于-dom-的-xss-攻击" aria-label="Permalink to &quot;基于 DOM 的 XSS 攻击&quot;">​</a></h3><p>基于 DOM 的 XSS 攻击是不涉及到 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是<strong>在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据</strong>。</p><h2 id="如何防范-xss-攻击" tabindex="-1">如何防范 XSS 攻击 <a class="header-anchor" href="#如何防范-xss-攻击" aria-label="Permalink to &quot;如何防范 XSS 攻击&quot;">​</a></h2><p>上述 XSS 攻击方式都有一个共同点：就是首先往浏览器中注入恶意脚本，然后再通过恶意脚本将用户信息发送至黑客部署的恶意服务器上。所以要阻止 XSS 攻击，我们可以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现：</p><ol><li><p>服务端或客户端对输入(输出)的字符进行过滤或转码</p><p>例如，过滤或转码后的字符展示在页面上，也只不过是普通字符：</p><div class="language-tex vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code:&lt;script&gt;alert(&#39;你被xss攻击了&#39;)&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 对其进行过滤后，只存在：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 或者对其进行转码：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code:&amp;lt;script&amp;gt;alert(&#39;你被xss攻击了&#39;)&amp;lt;/script&amp;gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>充分利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">内容安全策略 ( CSP )</a></p><p>实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能：</p><ul><li>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的；</li><li>禁止向第三方域提交数据，这样用户数据也不会外泄；</li><li>禁止执行内联脚本和未授权的脚本；</li><li>还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。</li></ul></li><li><p>使用 Cookie 的 HttpOnly 属性</p><p>很多 XSS 攻击都是盗用 Cookie 的，此时可以将 Cookie 设置为 HttpOnly 标志，这个 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。</p></li><li><p>使用 https 加强通信过程中的数据安全</p><p>可以使用 https 的安全特性加强数据安全，这样其他人就很难劫持页面数据。</p></li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://time.geekbang.org/column/article/152807" target="_blank" rel="noreferrer">极客-跨站脚本攻击（XSS）</a></li></ul>`,36),h=[r];function k(o,c,d,E,S,g){return i(),a("div",null,h)}const m=s(t,[["render",k]]);export{u as __pageData,m as default};
