import{_ as e,c as o,o as r,aR as l,aX as a}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"盒模型","description":"","frontmatter":{},"headers":[],"relativePath":"css/the_box_model.md","filePath":"01_前端/02_css/06_盒模型.md","lastUpdated":1739447932000}'),t={name:"css/the_box_model.md"},i=l('<h1 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h1><p><strong>CSS 中万物皆盒，所有的元素都被一个个的“盒子”包围着，理解这些“盒子”的基本原理，是使用 CSS 实现准确布局、处理元素排列的关键。</strong></p><p><strong>CSS 基础框盒模型</strong>是 CSS 规范的一个模块，它定义了一种长方形的盒子 —— 包括它们各自的内边距（padding）与外边距（margin ），将所有元素表示为一个个矩形的盒子（box）。</p><p><strong>CSS 视觉格式化模型</strong>（visual formatting model）会根据盒模型来生成元素，对其进行布置、编排、布局</p><h2 id="盒类型" tabindex="-1">盒类型 <a class="header-anchor" href="#盒类型" aria-label="Permalink to &quot;盒类型&quot;">​</a></h2><p>根据盒子在页面流中的行为方式以及与页面上其他盒子的关系可以分为以下三类：</p><ul><li><strong>区块盒子</strong>： <ul><li>盒子会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noreferrer"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noreferrer"><code>height</code></a> 属性可以发挥作用。</li><li>内边距、外边距和边框会将其他元素从当前盒子周围“推开”。</li><li>如果未指定 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noreferrer"><code>width</code></a>，方框将沿行向扩展，以填充其容器中的可用空间。在大多数情况下，盒子会变得与其容器一样宽，占据可用空间的 100%。</li></ul></li><li><strong>行内盒子</strong>： <ul><li>盒子不会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noreferrer"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noreferrer"><code>height</code></a> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul></li><li>特殊类型 <strong>行内块盒子</strong>，介于 <code>inline</code> 和 <code>block</code> 之间的中间位置，拥有部分的块级的效果： <ul><li>设置 <code>width</code> 和<code>height</code> 属性会生效。</li><li><code>padding</code>、<code>margin</code> 和 <code>border</code> 会推开其他元素。</li></ul></li></ul><h2 id="盒模型的组成" tabindex="-1">盒模型的组成 <a class="header-anchor" href="#盒模型的组成" aria-label="Permalink to &quot;盒模型的组成&quot;">​</a></h2><p>CSS 一个元素的盒子有如下部分组成：</p><ul><li><strong>Content box</strong>: 这个区域是用来显示内容，大小可以通过设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noreferrer"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noreferrer"><code>height</code></a>.</li><li><strong>Padding box</strong>: 包围在内容区域外部的空白区域； 大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding" target="_blank" rel="noreferrer"><code>padding</code></a> 相关属性设置。</li><li><strong>Border box</strong>: 边框盒包裹内容和内边距。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border" target="_blank" rel="noreferrer"><code>border</code></a> 相关属性设置。</li><li><strong>Margin box</strong>: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin" target="_blank" rel="noreferrer"><code>margin</code></a> 相关属性设置。</li></ul><p><img src="'+a+'" alt="img" loading="lazy"></p><div class="warning custom-block"><p class="custom-block-title">注</p><p>margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。盒子的范围到边框为止 —— 不会延伸到 margin。</p><p>对于滚动条，滚动条在边框(Border)和内边距(Padding)之间</p></div><h2 id="盒模型种类" tabindex="-1">盒模型种类 <a class="header-anchor" href="#盒模型种类" aria-label="Permalink to &quot;盒模型种类&quot;">​</a></h2><p>有两种盒模型类型：标准盒模型和替代(IE)盒模型：</p><ul><li><p>标准盒模型下，属性 <code>width</code>和 <code>height</code> 设置的是 <code>Content box</code></p></li><li><p>替代(IE)盒模型，属性 <code>width</code>和 <code>height</code> 设置的是 Conten + Padding + Border</p></li></ul><p>通过 <code>box-sizing</code> 属性来切换这两种盒模型，默认浏览器会使用标准模型(但是 Internet Explorer 默认使用替代盒模型)</p><h2 id="视觉格式化模型" tabindex="-1">视觉格式化模型 <a class="header-anchor" href="#视觉格式化模型" aria-label="Permalink to &quot;视觉格式化模型&quot;">​</a></h2><p>CSS 视觉格式化模型（<em>visual formatting model</em>）是用来处理和在视觉媒体上显示文档时使用的计算规则。</p><p>视觉格式化模型会根据 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noreferrer">CSS 盒子模型</a> 将文档中的元素转换为一个个盒子，每个盒子的布局由以下因素决定：</p><ul><li>盒子的尺寸：精确指定、由约束条件指定或没有指定</li><li>盒子的类型：行内盒子（inline）、行内级盒子（inline-level）、原子行内级盒子（atomic inline-level）、块盒子（block）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/Box_positioning_scheme" target="_blank" rel="noreferrer">定位方案（positioning scheme）</a>：普通流定位、浮动定位或绝对定位</li><li>文档树中的其它元素：即当前盒子的子元素或兄弟元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" target="_blank" rel="noreferrer">视口</a>尺寸与位置</li><li>所包含的图片的尺寸</li><li>其他的某些外部因素</li></ul><p>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model" target="_blank" rel="noreferrer">MDN-视觉格式化模型</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noreferrer">MDN-CSS 基础框盒模型介绍</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model" target="_blank" rel="noreferrer">MDN-视觉格式化模型</a></li></ul>',23),d=[i];function n(h,c,s,g,p,_){return r(),o("div",null,d)}const m=e(t,[["render",n]]);export{b as __pageData,m as default};
