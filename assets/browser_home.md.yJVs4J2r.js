import{_ as a,c as r,o as e,aR as o,bP as t,bQ as i,bR as l,bS as s}from"./chunks/framework.DLAwTCsc.js";const f=JSON.parse('{"title":"Chrome 基础架构","description":"","frontmatter":{},"headers":[],"relativePath":"browser/home.md","filePath":"01_前端/04_浏览器/01_Chrome基础架构.md","lastUpdated":1739447932000}'),n={name:"browser/home.md"},h=o('<h1 id="chrome-基础架构" tabindex="-1">Chrome 基础架构 <a class="header-anchor" href="#chrome-基础架构" aria-label="Permalink to &quot;Chrome 基础架构&quot;">​</a></h1><p>浏览器中的网络流程、页面渲染过程，JavaScript 执行流程，以及 Web 安全理论等等这些功能都是分散在浏览器的各个<strong>功能组件</strong>中的，<a href="https://www.zhihu.com/question/290767285/answer/1200063036" target="_blank" rel="noreferrer">可参考这个链接</a></p><h2 id="线程-vs-进程" tabindex="-1">线程 VS 进程 <a class="header-anchor" href="#线程-vs-进程" aria-label="Permalink to &quot;线程 VS 进程&quot;">​</a></h2><p><strong>进程就是一个程序的运行实例</strong>，启动一个程序(进程)的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。</p><p><strong>线程是程序执行的最小单位，是依附于进程的。不能单独存在，由进程来启动和管理的。多线程可以并行处理任务</strong></p><p>单线程和多线程处理的对比图如下：</p><p><img src="'+t+'" alt="img" loading="lazy"></p><h3 id="进程和线程的关系" tabindex="-1">进程和线程的关系 <a class="header-anchor" href="#进程和线程的关系" aria-label="Permalink to &quot;进程和线程的关系&quot;">​</a></h3><ol><li><p>进程中的任意一线程执行出错，都会导致整个进程的崩溃。</p></li><li><p>线程之间可以共享进程中的数据。线程之间可以对进程的公共数据进行读写操作。</p><p><img src="'+i+'" alt="img" loading="lazy"></p></li><li><p>当进程关闭之后，操作系统会回收进程所占用的内存。<strong>即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</strong></p></li><li><p>进程之间的内容相互隔离。进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据。<strong>所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的</strong>。如果进程之间需要进行数据的通信，这时候，就需要使用用于<strong>进程间通信（IPC）的机制</strong>了。</p></li></ol><h2 id="单进程浏览器时代-早期架构" tabindex="-1">单进程浏览器时代 - 早期架构 <a class="header-anchor" href="#单进程浏览器时代-早期架构" aria-label="Permalink to &quot;单进程浏览器时代 - 早期架构&quot;">​</a></h2><p>早在 2007 年之前，市面上浏览器都是单进程的。<strong>单进程浏览器是指浏览器的所有功能模块都是运行在同一进程里</strong>，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。</p><p>这种架构也是导致单进程浏览器不稳定、不流畅和不安全的一个主要因素：</p><ul><li>不稳定：早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程之中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。</li><li>不流畅：页面的渲染模块、JavaScript 执行环境以及插件都是运行在同一个线程中的，这就意味着同一时刻只能有一个模块可以执行。</li><li>不安全：插件可以使用 C/C++ 等代码编写，通过插件可以获取到操作系统的任意资源。页面脚本，它可以通过浏览器的漏洞来获取系统权限。</li></ul><h2 id="多进程浏览器时代" tabindex="-1">多进程浏览器时代 <a class="header-anchor" href="#多进程浏览器时代" aria-label="Permalink to &quot;多进程浏览器时代&quot;">​</a></h2><p>通过多进程架构改善单进程的问题</p><h3 id="早期多进程架构" tabindex="-1">早期多进程架构 <a class="header-anchor" href="#早期多进程架构" aria-label="Permalink to &quot;早期多进程架构&quot;">​</a></h3><p>如图是 2008 年 Chrome 发布时的进程架构：</p><p><img src="'+l+'" alt="img" loading="lazy"></p><p>从图中可以看出，Chrome 的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程之中，而进程之间是通过 IPC 机制进行通信（如图中虚线部分）。</p><ul><li>解决不稳定的问题：由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面</li><li>解决不流畅的问题：每个进程都是相互独立的，页面的脚本执行阻塞的也只是当前页面的渲染，而不会影响其他页面。对于内存泄露，当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。</li><li>解决不安全的问题：采用多进程架构的额外好处是可以使用<strong>安全沙箱(沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据)</strong>，Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。<strong>对于浏览器主进程才具有访问系统数据的权限</strong></li></ul><h3 id="目前多进程架构" tabindex="-1">目前多进程架构 <a class="header-anchor" href="#目前多进程架构" aria-label="Permalink to &quot;目前多进程架构&quot;">​</a></h3><p>最新的 Chrome 进程架构如图：</p><p><img src="'+s+'" alt="img" loading="lazy"></p><p>最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程(标签页)和多个插件进程(多插件)。</p><ul><li>浏览器进程。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li>GPU 进程。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li>网络进程。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li>渲染进程。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，<strong>默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程</strong>。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><div class="tip custom-block"><p class="custom-block-title">查看浏览器的进程</p><p>可以点击 Chrome 浏览器右上角的“选项”菜单，选择“更多工具”子菜单，点击“任务管理器”，这将打开 Chrome 的任务管理器的窗口</p></div><h3 id="多进程架构带来的问题" tabindex="-1">多进程架构带来的问题 <a class="header-anchor" href="#多进程架构带来的问题" aria-label="Permalink to &quot;多进程架构带来的问题&quot;">​</a></h3><p>虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：</p><ul><li><strong>更高的资源占用</strong>。因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</li><li><strong>更复杂的体系架构</strong>。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.zhihu.com/question/290767285/answer/1200063036" target="_blank" rel="noreferrer">知乎-浏览器内核真的很复杂吗？</a></p><p><a href="https://time.geekbang.org/column/article/113513" target="_blank" rel="noreferrer">极客时间-Chrome 架构</a></p>',32),p=[h];function c(m,d,_,g,u,b){return e(),r("div",null,p)}const P=a(n,[["render",c]]);export{f as __pageData,P as default};
