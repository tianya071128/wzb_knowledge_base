import{_ as s,c as a,o as i,aR as e}from"./chunks/framework.DLAwTCsc.js";const u=JSON.parse('{"title":"DOM API","description":"","frontmatter":{},"headers":[],"relativePath":"js/DOMAPI.md","filePath":"01_前端/03_js/11_DOM_节点操作.md","lastUpdated":1739447932000}'),l={name:"js/DOMAPI.md"},n=e(`<h1 id="dom-api" tabindex="-1">DOM API <a class="header-anchor" href="#dom-api" aria-label="Permalink to &quot;DOM API&quot;">​</a></h1><p>这里主要介绍常用的，其他的可参考：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noreferrer">MDN-DOM 接口</a></p><p><a href="https://www.runoob.com/jsref/dom-obj-document.html" target="_blank" rel="noreferrer">菜鸟教程</a></p><h2 id="节点关系" tabindex="-1">节点关系 <a class="header-anchor" href="#节点关系" aria-label="Permalink to &quot;节点关系&quot;">​</a></h2><ul><li>children 属性: 访问子节点; childNodes 的元素版</li><li>firstElementChild 属性: 指向第一个子元素;firstChild 的元素版</li><li>lastElementChild 属性: 指向最后一个子元素; lastChild 的元素版</li><li>previousElementSibling 属性: 指向前一个同辈元素; previousSibling 的元素版</li><li>nextElementSibling 属性: 指向后一个同辈元素; nextSibling 的元素版</li><li>parentNode 属性: 访问父节点</li><li>ownerDocument 属性: 表示整个文档的文档节点</li><li>hasChildNodes()方法: 包含一或多个子节点时返回 true</li><li>childElementCount 属性: 返回子元素(不包含文本节点和注释)的个数。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这几个 API 会返回注释或文本节点，兼容 IE8-，但不常用：</p><ul><li>previousSibling 属性: 上一个子节点, 对于第一个节点, 属性值为 null</li><li>nextSibling 属性: 下一个子节点, 对于最后一个节点, 属性值为 null</li><li>firstChild 属性: 访问父节点的第一个子节点</li><li>lastChild 属性: 访问父节点的最后一个子节点</li><li>childNodes 属性: 访问子节点</li></ul></div><h2 id="查找节点" tabindex="-1">查找节点 <a class="header-anchor" href="#查找节点" aria-label="Permalink to &quot;查找节点&quot;">​</a></h2><ul><li><p>document.getElementById(<em>elementID</em>)：返回对拥有指定 ID 的第一个对象的引用。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这个不能在元素对象上使用，只在 document 对象上存在这个方法，这个方法在 Document 类型上存在，而在 Element 类型上没有实现</p></div></li><li><p>getElementsByClassName(<em>classname</em>)：返回文档中所有指定类名的元素集合，作为 NodeList 对象。</p></li><li><p>querySelector(<em>CSS 选择器</em>)：返回匹配指定 CSS 选择器元素的第一个子元素 。</p></li><li><p>querySelectorAll(selectors)：返回文档中匹配指定 CSS 选择器的所有元素，返回 NodeList 对象。</p></li><li><p>element.matches(css 选择器字符串): 如果元素匹配则该选择符返回 true，否则返回 false.<em>注意兼容性。</em></p></li><li><p>特殊集合</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.anchors </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含文档中所有带name特性的&lt;a&gt;元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.forms </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含文档中所有的&lt;form&gt;元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.images </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含文档中所有的 &lt;img&gt; 元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.links</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含文档中所有带 href特性的 &lt;a&gt; 元素。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="创建节点" tabindex="-1">创建节点 <a class="header-anchor" href="#创建节点" aria-label="Permalink to &quot;创建节点&quot;">​</a></h2><ul><li><code>document.createElement(tag)</code> — 用给定的标签创建一个元素节点，</li><li><code>document.createTextNode(value)</code> — 创建一个文本节点（很少使用），</li><li><code>elem.cloneNode(deep)</code> — 克隆元素，如果 <code>deep==true</code> 则与其后代一起克隆。</li><li><code>document.createDocumentFragment()</code>：创建文档片段</li></ul><h2 id="操作节点" tabindex="-1">操作节点 <a class="header-anchor" href="#操作节点" aria-label="Permalink to &quot;操作节点&quot;">​</a></h2><ul><li><em>element</em>.appendChild(<em>node</em>)：向节点的子节点列表的末尾添加新的子节点。</li><li><em>element</em>.insertBefore(<em>newnode,existingnode</em>)：在已有的子节点前插入一个新的子节点。</li><li><em>element</em>.replaceChild(<em>newnode</em>,<em>oldnode</em>)：将某个子节点替换为另一个。</li><li><em>element</em>.removeChild(<em>node</em>)：从子节点列表中删除某个节点。</li><li><em>element</em>.compareDocumentPosition(<em>node</em>)：按照文档顺序，比较当前节点与指定节点的文档位置。</li><li>innerHTML 属性: 返回与调用元素的所有子节点(包括元素、注释和文本节点）对应的 HTML 标记 -- 可读写</li><li>outerHTML 属性: 返回与调用它的元素及所有子节点(包括元素、注释和文本节点）对应的 HTML 标记 -- 可读写</li></ul><h2 id="特性、属性操作" tabindex="-1">特性、属性操作 <a class="header-anchor" href="#特性、属性操作" aria-label="Permalink to &quot;特性、属性操作&quot;">​</a></h2><h3 id="特性、属性的对比" tabindex="-1">特性、属性的对比 <a class="header-anchor" href="#特性、属性的对比" aria-label="Permalink to &quot;特性、属性的对比&quot;">​</a></h3><ul><li>特性（attribute）— 写在 HTML 中的内容。</li><li>属性（property）— DOM 对象中的内容。</li></ul><p>简略的对比：</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">属性</th><th style="text-align:left;">特性</th></tr></thead><tbody><tr><td style="text-align:left;">类型</td><td style="text-align:left;">任何值，标准的属性具有规范中描述的类型</td><td style="text-align:left;">字符串</td></tr><tr><td style="text-align:left;">名字</td><td style="text-align:left;">名字（name）是大小写敏感的</td><td style="text-align:left;">名字（name）是大小写不敏感的</td></tr></tbody></table><p>操作特性的方法：</p><ul><li><code>elem.hasAttribute(name)</code> — 检查是否存在这个特性。</li><li><code>elem.getAttribute(name)</code> — 获取这个特性值。</li><li><code>elem.setAttribute(name, value)</code> — 设置这个特性值。</li><li><code>elem.removeAttribute(name)</code> — 移除这个特性。</li><li><code>elem.attributes</code> — 所有特性的集合。</li></ul><p>在大多数情况下，最好使用 DOM 属性。仅当 DOM 属性无法满足开发需求，并且我们真的需要特性时，才使用特性，例如：</p><ul><li>我们需要一个非标准的特性。但是如果它以 <code>data-</code> 开头，那么我们应该使用 <code>dataset</code>。</li><li>我们想要读取 HTML 中“所写的”值。对应的 DOM 属性可能不同，例如 <code>href</code> 属性一直是一个 <strong>完整的</strong> URL，但是我们想要的是“原始的”值。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>特性和属性几乎可以看成一个东西，但是有一些区分</p><p><a href="https://zh.javascript.info/dom-attributes-and-properties" target="_blank" rel="noreferrer">JS 教程-特性和属性</a></p><p><a href="https://stackoverflow.com/questions/10280250/getattribute-versus-element-object-properties" target="_blank" rel="noreferrer">stackoverflow</a></p></div><h3 id="自定义数据属性-dataset" tabindex="-1">自定义数据属性：dataset <a class="header-anchor" href="#自定义数据属性-dataset" aria-label="Permalink to &quot;自定义数据属性：dataset&quot;">​</a></h3><p>dataset 属性的值是 DOMStringMap 的一个实例. 在这个实例中, 每个 data-name 形式的属性都会有一个对应的属性, *<em>属性名没有 data-前缀</em></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取得自定义属性的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.appId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.myname;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.appId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.myname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Michael&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="节点-class-管理" tabindex="-1">节点 class 管理 <a class="header-anchor" href="#节点-class-管理" aria-label="Permalink to &quot;节点 class 管理&quot;">​</a></h2><p>管理 class，主要有两种方式：</p><h3 id="classname" tabindex="-1">className <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;className&quot;">​</a></h3><p>是一个字符串值，是管理 Element 元素的整个类，并不好操作。</p><h3 id="classlist" tabindex="-1">classList <a class="header-anchor" href="#classlist" aria-label="Permalink to &quot;classList&quot;">​</a></h3><p>H5 推出的专门用来管理类的，classList 是一个新的集合类型 DOMTokenList 的实例。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将给定的字符串值添加到列表中, 如果值已经存在, 就不添加了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示列表中是否存在给定的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从列表中删除给定的字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果列表中已经存在给定的值, 删除它; 如果列表中没有给定的值, 添加它</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="节点-style-管理" tabindex="-1">节点 style 管理 <a class="header-anchor" href="#节点-style-管理" aria-label="Permalink to &quot;节点 style 管理&quot;">​</a></h2><p>管理 style，通常有如下方式：</p><h3 id="style-对象" tabindex="-1">style 对象 <a class="header-anchor" href="#style-对象" aria-label="Permalink to &quot;style 对象&quot;">​</a></h3><p><code>element.style</code> 返回的是一个 <code>CSSStyleDeclaration</code> 对象，它是一个 CSS 声明块，CSS 属性键值对的集合。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration" target="_blank" rel="noreferrer">对象上存在样式信息和各种与样式相关的方法和属性</a></p><p>一般通过 <code>element.style.[属性]</code> 进行样式的读写，其他 <code>CSSStyleDeclaration</code> 相关 API 用的较少</p><div class="warning custom-block"><p class="custom-block-title">用 style.cssText 进行完全的重写</p><p>想要以字符串的形式设置完整的样式，可以使用特殊属性 <code>style.cssText</code>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 我们可以在这里设置特殊的样式标记，例如 &quot;important&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.style.cssText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`color: red !important;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    background-color: yellow;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    width: 100px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    text-align: center;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过设置一个特性（attribute）来实现同样的效果：<code>div.setAttribute(&#39;style&#39;, &#39;color: red...&#39;)</code>。</p></div><h3 id="getcomputedstyle-方法" tabindex="-1">getComputedStyle 方法 <a class="header-anchor" href="#getcomputedstyle-方法" aria-label="Permalink to &quot;getComputedStyle 方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Element}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 需要被读取样式值的元素。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pseudo</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 伪元素（如果需要），例如 ::before。空字符串或无参数则意味着元素本身。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {CSSStyleDeclaration}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 只读对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComputedStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, [pseudo]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意点</p><ol><li><p>返回的是解析值，也就是最后的单位都是固定的，如 <code>px</code>。<a href="https://zh.javascript.info/styles-and-classes#ji-suan-yang-shi-getcomputedstyle" target="_blank" rel="noreferrer">计算值和解析值</a></p></li><li><p>访问返回对象的样式时最好使用完整的属性：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getComputedStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style.margin); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Firefox 中是空字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style.marginLeft); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样访问最佳</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在许多在线的演示代码中，<code>getComputedStyle</code>是通过 <code>document.defaultView</code> 对象来调用的。大部分情况下，这是不需要的。在 firefox3.6 上访问子框架内的样式才需要如此</p></li></ol></div>`,42),t=[n];function p(h,r,d,k,c,o){return i(),a("div",null,t)}const g=s(l,[["render",p]]);export{u as __pageData,g as default};
