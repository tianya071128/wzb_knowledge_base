import{_ as e,c as s,o as i,aR as n,cL as a,cM as p,cN as l}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"依赖分类","description":"","frontmatter":{},"headers":[],"relativePath":"npm/depend.md","filePath":"02_工程化/06_npm/22_依赖分类.md","lastUpdated":1739447932000}'),d={name:"npm/depend.md"},t=n(`<h1 id="依赖分类" tabindex="-1">依赖分类 <a class="header-anchor" href="#依赖分类" aria-label="Permalink to &quot;依赖分类&quot;">​</a></h1><h2 id="dependencies-依赖" tabindex="-1">dependencies - 依赖 <a class="header-anchor" href="#dependencies-依赖" aria-label="Permalink to &quot;dependencies - 依赖&quot;">​</a></h2><p>依赖关系在一个简单的对象中指定，该对象将包名称映射到版本范围。</p><h2 id="devdependencies-开发依赖" tabindex="-1">devDependencies - 开发依赖 <a class="header-anchor" href="#devdependencies-开发依赖" aria-label="Permalink to &quot;devDependencies - 开发依赖&quot;">​</a></h2><p>有一些依赖是只在项目构建过程中使用，但是不会构建到输出文件中，在这种情况下，最好将这些附加项映射到 <code>devDependencies</code> 对象中。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>这个依赖下的包与 <code>dependencies</code> 一样，都会下载到 <code>node_modules</code> 文件夹下。两者行为是一致的</p></div><h2 id="peerdependencies-对等依赖" tabindex="-1">peerDependencies - 对等依赖 <a class="header-anchor" href="#peerdependencies-对等依赖" aria-label="Permalink to &quot;peerDependencies - 对等依赖&quot;">​</a></h2><p>用于指定你正在开发的模块所依赖的版本以及用户安装的依赖包版本的兼容性。 例如：<code>ant-design</code>库依赖于 <code>react</code>和 <code>react-dom</code>，此时 <code>ant-design</code> 的 <code>package.json</code> 文件下就存在如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react-dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时不同的包管理工具的行为不同：</p><ul><li><p>项目下没有预先安装 <code>peerDependencies</code> 包时</p><ul><li>Yarn 不会安装 <code>peerDependencies</code> 依赖</li><li>npm：会安装 <code>peerDependencies</code> 的依赖，并且提取到 node_modules 下</li><li>pnpm：会安装 <code>peerDependencies</code> 的依赖，但不会提取到 node_modules 下</li></ul></li><li><p>项目下已有 <code>peerDependencies</code> 所需的依赖包，且版本符合要求</p><ul><li>各个包管理工具表现一致，不执行其他操作</li></ul></li><li><p>项目下已有 <code>peerDependencies</code> 所需的依赖包，但版本符合不要求</p><ul><li><p>Yarn：报一个不够明显的警告，但安装是成功的 <img src="`+a+'" alt="img" loading="lazy"></p></li><li><p>npm：安装会直接报错，并且安装不成功 <img src="'+p+'" alt="img" loading="lazy"></p></li><li><p>pnpm：会报警告，但安装是成功的。 <img src="'+l+`" alt="img" loading="lazy"></p></li></ul></li></ul><h2 id="bundleddependencies-捆绑包依赖" tabindex="-1">bundledDependencies - <strong>捆绑包依赖</strong> <a class="header-anchor" href="#bundleddependencies-捆绑包依赖" aria-label="Permalink to &quot;bundledDependencies - **捆绑包依赖**&quot;">​</a></h2><p><code>bundledDependencies</code> 的值是一个数组，数组里可以指定一些模块，这些模块将在这个包发布时被一起打包。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;awesome-web-framework&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bundleDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;renderized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;super-streams&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="optionaldependencies-可选依赖" tabindex="-1">optionalDependencies - 可选依赖 <a class="header-anchor" href="#optionaldependencies-可选依赖" aria-label="Permalink to &quot;optionalDependencies - 可选依赖&quot;">​</a></h2><p>某些场景下，依赖包可能不是强依赖的，这个依赖包的功能可有可无，当这个依赖包无法被获取到时，你希望 <code>npm install</code> 继续运行，而不会导致失败，你可以将这个依赖放到 <code>optionalDependencies</code> 中，注意 <code>optionalDependencies</code> 中的配置将会覆盖掉 <code>dependencies</code> 所以只需在一个地方进行配置。 当然，引用 <code>optionalDependencies</code> 中安装的依赖时，一定要做好异常处理，否则在模块获取不到时会导致报错。</p>`,16),o=[t];function c(r,h,k,u,E,m){return i(),s("div",null,o)}const _=e(d,[["render",c]]);export{b as __pageData,_ as default};
