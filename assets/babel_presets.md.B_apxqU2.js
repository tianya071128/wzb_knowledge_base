import{_ as s,c as a,o as i,aR as e}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"预设(presets)","description":"","frontmatter":{},"headers":[],"relativePath":"babel/presets.md","filePath":"02_工程化/05_babel/04_预设.md","lastUpdated":1739447932000}'),n={name:"babel/presets.md"},l=e(`<h1 id="预设-presets" tabindex="-1">预设(presets) <a class="header-anchor" href="#预设-presets" aria-label="Permalink to &quot;预设(presets)&quot;">​</a></h1><p>Babel 预设可以作为 Babel 插件和配置 选项 的共享集。预设会集成插件或其他配置项，<strong>可以根据预设配置项(设定目标环境)来设定不同的插件集合和配置项</strong></p><h2 id="使用预设" tabindex="-1">使用预设 <a class="header-anchor" href="#使用预设" aria-label="Permalink to &quot;使用预设&quot;">​</a></h2><p>类型：<code>Array&lt;PresetEntry&gt;</code> -- <a href="/wzb_knowledge_base/babel/configOptions.html#plugin-preset-entries-插件-预设-配置格式">PresetEntry</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;babel-preset-myPreset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 npm 中查找</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./myProject/myPreset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相对路径也是可以的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="预设选项" tabindex="-1">预设选项 <a class="header-anchor" href="#预设选项" aria-label="Permalink to &quot;预设选项&quot;">​</a></h3><p>插件和预设都可以通过将名称和选项对象包装在你的配置的一个数组内来指定选项。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;loose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="使用多个预设" tabindex="-1">使用多个预设 <a class="header-anchor" href="#使用多个预设" aria-label="Permalink to &quot;使用多个预设&quot;">​</a></h3><p>可以根据项目环境使用多个预设，最终编译成指定环境的代码。</p><p>例如在 <code>react typescript</code> 项目中，可以使用 <code>@babel/preset-typescript</code>、<code>@babel/preset-react</code>、<code>@babel/preset-env</code>预设： <code>@babel/preset-typescript</code> 将 <code>typescript</code> 语法编译为 <code>js</code> 语法，<code>@babel/preset-react</code> 将 <code>react</code> 语法编译成 <code>js</code>语法，<code>@babel/preset-env</code> 将 <code>js</code> 语法根据目标环境进行编译</p><h2 id="预设排序" tabindex="-1">预设排序 <a class="header-anchor" href="#预设排序" aria-label="Permalink to &quot;预设排序&quot;">​</a></h2><p>预设排序是倒序（从最后一个到第一个）。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将按以下顺序运行：c，b，然后 a。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="stage-x-实验性预设-已废弃" tabindex="-1">Stage-X(实验性预设-已废弃) <a class="header-anchor" href="#stage-x-实验性预设-已废弃" aria-label="Permalink to &quot;Stage-X(实验性预设-已废弃)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">废弃和使用提案方式</p><p>从 babel7 开始，已经开始废弃 Stage-X 预设。因为这些提案本身容易变更，查看官方博客<a href="https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets" target="_blank" rel="noreferrer">Removing Babel&#39;s Stage Presets</a></p><p>从 babel7 开始，需要使用提案的语法，主要有以下手段：</p><ul><li>使用单个提案插件，查看<a href="https://www.babeljs.cn/docs/plugins-list/" target="_blank" rel="noreferrer">插件列表</a></li><li>预设中集成，可自行创建预设 <ul><li><code>@babel/preset-env</code> 预设中开启 <code>shippedProposals</code> 选项将包括一些浏览器已经实施的第 3 阶段提案。</li></ul></li></ul></div><p><a href="https://github.com/tc39" target="_blank" rel="noreferrer">TC39</a> 将提案分为以下几个阶段：</p><ul><li><a href="https://www.babeljs.cn/docs/babel-preset-stage-0" target="_blank" rel="noreferrer">Stage 0</a> - 稻草人：只是一个想法，可能是 Babel 插件。</li><li><a href="https://www.babeljs.cn/docs/babel-preset-stage-1" target="_blank" rel="noreferrer">Stage 1</a> - 提案：这值得努力。</li><li><a href="https://www.babeljs.cn/docs/babel-preset-stage-2" target="_blank" rel="noreferrer">Stage 2</a> - 草案：初始规范。</li><li><a href="https://www.babeljs.cn/docs/babel-preset-stage-3" target="_blank" rel="noreferrer">Stage 3</a> - 候选：完整的规范和初始的浏览器实现。</li><li>Stage 4 - 完成：将被添加到下一个年度发行版中。</li></ul><p>有关更多信息，请务必查阅 <a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">当前的 TC39 提案</a> 及其 <a href="https://tc39.github.io/process-document" target="_blank" rel="noreferrer">流程文档</a>。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>慎用 Stage 3 以下的提案：因为 Stage 3 的语法还不稳定，可能会变更，此时 Stage 3 语法插件就需要随之更新</p><p>但 Stage 3 并且被浏览器实现的一般不会变化，插件就可以继续使用，无需更新</p></div><h2 id="创建预设" tabindex="-1">创建预设 <a class="header-anchor" href="#创建预设" aria-label="Permalink to &quot;创建预设&quot;">​</a></h2><ol><li><p>遵循命名约定 <code>babel-preset-*</code> 创建一个新项目</p></li><li><p>创建 <code>npm</code> 工程，可以使用 <code>npm init</code> 初始化项目，生成 <code>package.json</code> 文件</p></li><li><p>导出一份配置(类似于 <code>babel.config.js</code> )对象(或函数)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出函数，可以使用 配置API</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/plugin-proposal-class-properties&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), { loose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/plugin-proposal-object-rest-spread&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol>`,22),t=[l];function p(r,h,k,d,o,c){return i(),a("div",null,t)}const g=s(n,[["render",p]]);export{b as __pageData,g as default};
