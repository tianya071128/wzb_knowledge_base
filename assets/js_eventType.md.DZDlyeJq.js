import{_ as s,c as i,o as a,aR as t}from"./chunks/framework.DLAwTCsc.js";const g=JSON.parse('{"title":"事件类型","description":"","frontmatter":{},"headers":[],"relativePath":"js/eventType.md","filePath":"01_前端/03_js/14_DOM_事件类型.md","lastUpdated":1739447932000}'),n={name:"js/eventType.md"},l=t(`<h1 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h1><p>浏览器定义了很多中事件。所发生的事件的类型决定了事件对象中会保存什么信息。DOM3 Events 定义了的事件类型如下：</p><ul><li>用户界面事件（UIEvent）：涉及与 BOM 交互的通用浏览器事件。</li><li>焦点事件（FocusEvent）：在元素获得和失去焦点时触发。</li><li>鼠标事件（MouseEvent）：使用鼠标在页面上执行某些操作时触发。</li><li>滚轮事件（WheelEvent）：使用鼠标滚轮（或类似设备）时触发。</li><li>输入事件（InputEvent）：向文档中输入文本时触发。</li><li>键盘事件（KeyboardEvent）：使用键盘在页面上执行某些操作时触发。</li><li>合成事件（CompositionEvent）：在使用某种 IME（Input Method Editor，输入法编辑器）输入字符时触发。</li><li>除了这些事件类型之外，HTML5 还定义了另一组事件，而浏览器通常在 DOM 和 BOM 上实现专有事件。这些专有事件基本上都是根据开发者需求而不是按照规范增加的，因此不同浏览器的实现可能不同。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noreferrer">这是一份事件参考</a></p><h2 id="用户界面事件" tabindex="-1">用户界面事件 <a class="header-anchor" href="#用户界面事件" aria-label="Permalink to &quot;用户界面事件&quot;">​</a></h2><table><thead><tr><th>事件名称</th><th>触发时机</th></tr></thead><tbody><tr><td>load</td><td>在 window 上当页面加载完成后触发，在窗套（&lt;frameset&gt;）上当所有窗格（&lt;frame&gt;）都加载完成后触发，在&lt;img&gt;元素上当图片加载完成后触发，在&lt;object&gt;元素上当相应对象加载完成后触发。</td></tr><tr><td>unload</td><td>在 window 上当页面完全卸载后触发，在窗套上当所有窗格都卸载完成后触发，在&lt;object&gt;元素上当相应对象卸载完成后触发。</td></tr><tr><td>abort</td><td>在&lt;object&gt;元素上当相应对象加载完成前被用户提前终止下载时触发。</td></tr><tr><td>error</td><td>在 window 上当 JavaScript 报错时触发，在&lt;img&gt;元素上当无法加载指定图片时触发，在&lt;object&gt;元素上当无法加载相应对象时触发，在窗套上当一个或多个窗格无法完成加载时触发。</td></tr><tr><td>select</td><td>在文本框（&lt;input&gt;或 textarea）上当用户选择了一个或多个字符时触发。</td></tr><tr><td>resize</td><td>在 window 或窗格上当窗口或窗格被缩放时触发。</td></tr><tr><td>scroll</td><td>当用户滚动包含滚动条的元素时在元素上触发。&lt;body&gt;元素包含已加载页面的滚动条。</td></tr></tbody></table><h3 id="load-加载完成" tabindex="-1">load：加载完成 <a class="header-anchor" href="#load-加载完成" aria-label="Permalink to &quot;load：加载完成&quot;">​</a></h3><ol><li><p>对于 window 对象上，load 事件会在整个页面（包括所有外部资源如图片、JavaScript 文件和 CSS 文件）加载完成后触发。</p></li><li><p>对于图片，在图片加载完成后触发。<strong>下载图片并不一定要把&lt;img&gt;元素添加到文档，只要给它设置了 src 属性就会立即开始下载。</strong></p><details class="details custom-block"><summary>查看代码</summary><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;图片加载完成&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/img/64.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></details></li><li><p>对于脚本，在脚本加载完成后触发。<strong>与图片不同，要下载 JavaScript 文件必须同时指定 src 属性并&lt;script&gt;元素添加到文档中。</strong></p><p><strong>值得注意的是，会先执行加载的脚本，在执行 load 事件，这也是 webpack 中获取异步 chunk 时的原理</strong></p><details class="details custom-block"><summary>查看代码</summary><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;脚本加载并执行完成&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/js/test.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></details></li></ol><h2 id="焦点事件" tabindex="-1">焦点事件 <a class="header-anchor" href="#焦点事件" aria-label="Permalink to &quot;焦点事件&quot;">​</a></h2><table><thead><tr><th>事件名称</th><th>触发时机</th></tr></thead><tbody><tr><td>blur</td><td>失去焦点，不会冒泡</td></tr><tr><td>focus</td><td>当元素获得焦点时触发。不会冒泡</td></tr><tr><td>focusin</td><td>当元素获得焦点时触发。这个事件是 focus 的冒泡版。</td></tr><tr><td>focusout</td><td>当元素失去焦点时触发。这个事件是 blur 的通用版。</td></tr></tbody></table><p>。。。</p><p>事件还是查看列表吧</p>`,12),e=[l];function h(p,r,d,k,E,o){return a(),i("div",null,e)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
