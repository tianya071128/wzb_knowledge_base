import{_ as a,c as e,o as t,aR as o,by as l,bz as r}from"./chunks/framework.DLAwTCsc.js";const g=JSON.parse('{"title":"JS 执行机制-作用域、作用域链","description":"","frontmatter":{},"headers":[],"relativePath":"js/scope.md","filePath":"01_前端/03_js/08_JS执行机制-作用域、作用域链.md","lastUpdated":1739447932000}'),i={name:"js/scope.md"},s=o('<h1 id="js-执行机制-作用域、作用域链" tabindex="-1">JS 执行机制-作用域、作用域链 <a class="header-anchor" href="#js-执行机制-作用域、作用域链" aria-label="Permalink to &quot;JS 执行机制-作用域、作用域链&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">你不知道的 JavaScript 上 P4</p><p>几乎所有语言的最基础模型之一就是在变量中存储值，并且在稍后取出或修改这些值。在变量中存储值和取出值的能力，给程序赋予了状态。</p><p>这就引伸出一些问题：这些变量被存储在哪里？程序如何在需要的时候找到它们？</p><p>这些问题需要一组明确定义的规则，它定义了如何存储变量，以及如何找到这些变量。我们称这组规则为：<strong>作用域</strong>。</p></div><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><p><strong>简单来说，作用域 指程序中定义变量的区域，它决定了当前执行代码对变量的访问权限。</strong></p><p>在 JS 中，主要有以下几种作用域：</p><ul><li><p>全局作用域：全局作用域为程序的最外层作用域，一直存在。</p></li><li><p>函数作用域：<strong>函数作用域只有函数被定义时才会创建</strong>，函数调用时会创建函数作用域，并将其压入到函数的作用域链的顶端形成作用域链。</p></li><li><p>块作用域：</p><ul><li><p>在 ES6 之前，块作用域比较少，主要可以通过 <code>with</code>、<code>try...catch(e) {}</code>等少数地方才存在</p><p><img src="'+l+'" alt="image-20211125110314240" loading="lazy"></p></li><li><p>ES6 正式推出了 <code>let</code>、<code>const</code> 声明块级作用域的方式。</p></li></ul></li></ul><h2 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h2><p>当一个块或函数嵌套在另一个块或函数中时，就产生了作用域链。当查找变量时，在当前作用域无法找到时，引擎就会在作用域链中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>作用域和作用域链是规定变量访问的一套机制。</p><p>原型和原型链是对象属性访问的一套机制。</p></div><h3 id="作用域链何时创建的" tabindex="-1">作用域链何时创建的？ <a class="header-anchor" href="#作用域链何时创建的" aria-label="Permalink to &quot;作用域链何时创建的？&quot;">​</a></h3><p>当一个函数被创建时，就会根据函数位置（JS 是词法作用域）来创建函数的非自身作用域链，<strong>函数对象内部属性 [[Scopes]] 就引用着这个作用域链</strong>,，而不需要等到函数执行时创建。</p><p>等到函数调用时，就会将函数的作用域添加到已经创建好的作用域链最前端。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>因为 JS 是词法作用域，函数创建时根据函数定义的位置就可以推断出函数的作用域链（不包含自身的）。</p><p>而函数自身的作用域需要等到函数调用时才能确定（函数调用时才能确定的 this、变量、实参等）</p></div><h2 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-label="Permalink to &quot;词法作用域&quot;">​</a></h2><p>作用域有两种主要的工作模式:</p><ol><li>词法作用域：最为普遍的，为大多数语言所采用的，也是 JS 使用的模式</li><li>动态作用域：仍有一些编程语言在使用（比如 Bash 脚本、Perl 中的一些模式等）</li></ol><p><strong>词法作用域：词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况下是这样的，如果存在 eval、with 时，情况会变得复杂，一般最佳实践是不要使用这个）。</strong></p><p>编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><h2 id="创建词法作用域的方式" tabindex="-1">创建词法作用域的方式 <a class="header-anchor" href="#创建词法作用域的方式" aria-label="Permalink to &quot;创建词法作用域的方式&quot;">​</a></h2><p>除了全局存在全局作用域外，JS 中的作用域创建主要有两种：函数作用域和块作用域(主要由 ES6 正式推出)</p><h3 id="函数作用域" tabindex="-1">函数作用域 <a class="header-anchor" href="#函数作用域" aria-label="Permalink to &quot;函数作用域&quot;">​</a></h3><p>如上所述，JS 的作用域工作模式是词法作用域，由书写位置可以确定函数创建时引用的父作用域了，从函数的创建 -&gt; 函数的执行 -&gt; 函数执行完毕分析一下函数作用域的行为</p><ul><li><p><a href="/wzb_knowledge_base/js/function.html#闭包给惰性解析带来的问题">函数的创建</a></p><p>当创建一个函数时，JS 引擎的<strong>预解析器</strong>就会先进行函数进行快速解析，引用的父作用域变量就会被复制到堆中，<strong>函数的 [[Scopes]] 属性引用着这些数据</strong></p></li><li><p><a href="/wzb_knowledge_base/js/executionContext.html#执行上下文的生命周期">函数的执行</a></p><p>函数执行时，先进行编译，创建函数的执行上下文，将函数执行上下文的变量环境等推入到函数创建时的 [[Scopes]] 的前端，形成作用域链 -- 涉及到块作用域时，作用域链会根据函数执行过程中变化，见下文。</p></li><li><p>函数执行完毕</p><p>函数执行完成后，就会退出调用栈，所占用的栈空间就会被销毁。</p></li></ul><h3 id="块作用域" tabindex="-1">块作用域 <a class="header-anchor" href="#块作用域" aria-label="Permalink to &quot;块作用域&quot;">​</a></h3><p>ES6 通过引用 <code>const</code> 和 <code>let</code> 声明变量的方式引用块作用域，JS 引擎通过在词法环境内部，维护了一个小型栈结构，栈底是函数最外层的变量，进入一个作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成之后，该作用域的信息就会从栈顶弹出，这就是词法环境的结构。<a href="https://time.geekbang.org/column/article/126339" target="_blank" rel="noreferrer">参考极客-块级作用域</a></p><p>块作用域的执行机制如下图所示，观察右侧 Scope 的变化：</p><p><img src="'+r+'" alt="动画1" loading="lazy"></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.zhihu.com/question/36751764" target="_blank" rel="noreferrer">知乎-JS 中的作用域链是在什么时候建立的？</a></li><li><a href="https://time.geekbang.org/column/article/126339" target="_blank" rel="noreferrer">极客-块级作用域</a></li><li><a href="https://juejin.cn/post/6844904165672484871" target="_blank" rel="noreferrer">掘金-面试官：说说作用域和闭包吧</a></li><li>书籍-你不知道的 JavaScript 上</li></ul>',29),p=[s];function c(n,h,d,_,u,b){return t(),e("div",null,p)}const S=a(i,[["render",c]]);export{g as __pageData,S as default};
