import{_ as a,c as e,o as r,aR as t,dM as o,dN as l,dO as i,dP as s,dQ as p,dR as c,dS as d,dT as h,dU as n,dV as m,dW as u,dX as _,dY as b,dZ as g,d_ as q,d$ as f,e0 as k,e1 as P,e2 as v,e3 as x,e4 as S,e5 as y}from"./chunks/framework.DLAwTCsc.js";const M=JSON.parse('{"title":"控制台(Console)","description":"","frontmatter":{},"headers":[],"relativePath":"devtools/console.md","filePath":"04_更多/02_开发者工具/10_控制台.md","lastUpdated":1739447932000}'),z={name:"devtools/console.md"},$=t('<h1 id="控制台-console" tabindex="-1">控制台(Console) <a class="header-anchor" href="#控制台-console" aria-label="Permalink to &quot;控制台(Console)&quot;">​</a></h1><p>控制台有两个主要用途：<a href="https://developer.chrome.com/docs/devtools/console?hl=zh-cn#view" target="_blank" rel="noreferrer">查看记录的消息</a>和<a href="https://developer.chrome.com/docs/devtools/console?hl=zh-cn#javascript" target="_blank" rel="noreferrer">运行 JavaScript</a>。</p><h2 id="控制台设置" tabindex="-1">控制台设置 <a class="header-anchor" href="#控制台设置" aria-label="Permalink to &quot;控制台设置&quot;">​</a></h2><p>可对控制台进行设置</p><p><img src="'+o+'" alt="img" loading="lazy"></p><h3 id="隐藏网络" tabindex="-1">隐藏网络 <a class="header-anchor" href="#隐藏网络" aria-label="Permalink to &quot;隐藏网络&quot;">​</a></h3><p>默认情况下，浏览器将网络消息记录到控制台，可设置将其消息隐藏。</p><p><img src="'+l+'" alt="img" loading="lazy"></p><h3 id="保留日志" tabindex="-1">保留日志 <a class="header-anchor" href="#保留日志" aria-label="Permalink to &quot;保留日志&quot;">​</a></h3><p>默认情况下，控制台会在您加载新页面时清除全部消息，可设置跨页面加载时保留消息</p><h3 id="仅限已选择的上下文" tabindex="-1">仅限已选择的上下文 <a class="header-anchor" href="#仅限已选择的上下文" aria-label="Permalink to &quot;仅限已选择的上下文&quot;">​</a></h3><p>页面中可能存在多个 &lt;iframe&gt; 引用，此时页面就存在多个上下文。默认情况下，控制台会展示所有上下文打印的消息，可通过设置只展示指定的上下文消息</p><p><img src="'+i+'" alt="img" loading="lazy"></p><h3 id="在控制台中对相似消息进行分组" tabindex="-1">在控制台中对相似消息进行分组 <a class="header-anchor" href="#在控制台中对相似消息进行分组" aria-label="Permalink to &quot;在控制台中对相似消息进行分组&quot;">​</a></h3><p>默认情况下, 控制台会将相似消息进行分组, 只输出一条, 禁用后会每条消息都列出来</p><p><img src="'+s+'" alt="img" loading="lazy"></p><h3 id="在控制台中显示-cors-错误" tabindex="-1">在控制台中显示 CORS 错误 <a class="header-anchor" href="#在控制台中显示-cors-错误" aria-label="Permalink to &quot;在控制台中显示 CORS 错误&quot;">​</a></h3><p>默认情况下，控制台会显示网络请求因跨源资源共享 (CORS) 而失败的 CORS 错误。可通过设置“在控制台中显示 CORS 错误”进行设置</p><h3 id="记录-xmlhttprequest" tabindex="-1">记录 XMLHttpRequest <a class="header-anchor" href="#记录-xmlhttprequest" aria-label="Permalink to &quot;记录 XMLHttpRequest&quot;">​</a></h3><p>用于设置是否记录所有 XMLHttpRequest 和 Fetch 请求，默认关闭</p><p><img src="'+p+'" alt="img" loading="lazy"></p><h3 id="及早评估" tabindex="-1">及早评估 <a class="header-anchor" href="#及早评估" aria-label="Permalink to &quot;及早评估&quot;">​</a></h3><p>当在控制台中键入 JavaScript 表达式时，开启及早评估会显示该表达式返回值的预览。打开控制台设置并禁用 及早评估 复选框以关闭返回值预览。</p><p><img src="'+c+'" alt="img" loading="lazy"></p><h3 id="根据历史记录自动补全" tabindex="-1">根据历史记录自动补全 <a class="header-anchor" href="#根据历史记录自动补全" aria-label="Permalink to &quot;根据历史记录自动补全&quot;">​</a></h3><p>当键入表达式时，控制台的自动完成弹出窗口会显示您之前运行的表达式。禁用以停止显示历史记录中的表达式。</p><h2 id="查看消息" tabindex="-1">查看消息 <a class="header-anchor" href="#查看消息" aria-label="Permalink to &quot;查看消息&quot;">​</a></h2><h3 id="查看断点处的消息" tabindex="-1">查看断点处的消息 <a class="header-anchor" href="#查看断点处的消息" aria-label="Permalink to &quot;查看断点处的消息&quot;">​</a></h3><p>可以在 源代码(Source) 面板中添加 日志断点</p><p><img src="'+d+'" alt="img" loading="lazy"></p><h3 id="查看堆栈轨迹" tabindex="-1">查看堆栈轨迹 <a class="header-anchor" href="#查看堆栈轨迹" aria-label="Permalink to &quot;查看堆栈轨迹&quot;">​</a></h3><p>控制台会自动捕获错误和警告的堆栈轨迹。堆栈轨迹是指导致错误或警告的函数调用（帧）的历史记录。控制台会按倒序显示这些帧：最新帧位于顶部。</p><p>如需查看堆栈轨迹，请点击错误或警告旁边的图标。</p><p><img src="'+h+'" alt="img" loading="lazy"></p><h4 id="查看异步堆栈轨迹" tabindex="-1">查看异步堆栈轨迹 <a class="header-anchor" href="#查看异步堆栈轨迹" aria-label="Permalink to &quot;查看异步堆栈轨迹&quot;">​</a></h4><p>如果使用的框架支持，或直接使用浏览器调度基元（例如 setTimeout）时，开发者工具可以通过将异步代码的两部分链接在一起来跟踪异步操作。</p><p>在这种情况下，堆栈轨迹会显示异步操作的“完整故事”。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>开发者工具会根据 console.createTask() API 方法实现此“异步堆栈标记”功能。 开发者工具鼓励框架和抽象类使用此 API。</p></div><h4 id="在堆栈轨迹中显示已知的第三方帧" tabindex="-1">在堆栈轨迹中显示已知的第三方帧 <a class="header-anchor" href="#在堆栈轨迹中显示已知的第三方帧" aria-label="Permalink to &quot;在堆栈轨迹中显示已知的第三方帧&quot;">​</a></h4><p>如果源代码映射包含 ignoreList 字段，默认情况下，Console 会从堆栈轨迹中隐藏来自打包器（例如 webpack）或框架（例如 Angular）生成的源代码的第三方帧。</p><p>如需查看包括第三方帧在内的全栈轨迹，请点击堆栈轨迹底部的 <code>Show N more frame</code>。</p><h2 id="过滤消息" tabindex="-1">过滤消息 <a class="header-anchor" href="#过滤消息" aria-label="Permalink to &quot;过滤消息&quot;">​</a></h2><p>DevTools 提供了许多不同的方法来过滤掉与手头任务无关的消息。</p><h3 id="按日志级别过滤" tabindex="-1">按日志级别过滤 <a class="header-anchor" href="#按日志级别过滤" aria-label="Permalink to &quot;按日志级别过滤&quot;">​</a></h3><p><img src="'+n+'" alt="img" loading="lazy"></p><h3 id="按文本过滤" tabindex="-1">按文本过滤 <a class="header-anchor" href="#按文本过滤" aria-label="Permalink to &quot;按文本过滤&quot;">​</a></h3><p>如果只想查看包含特定字符串的消息，可将该字符串键入过滤器文本框中。</p><p><img src="'+m+'" alt="img" loading="lazy"></p><h3 id="按正则表达式过滤" tabindex="-1">按正则表达式过滤 <a class="header-anchor" href="#按正则表达式过滤" aria-label="Permalink to &quot;按正则表达式过滤&quot;">​</a></h3><p>过滤器文本框支持正则表达式</p><p><img src="'+u+'" alt="img" loading="lazy"></p><h3 id="按-url-过滤消息" tabindex="-1">按 url 过滤消息 <a class="header-anchor" href="#按-url-过滤消息" aria-label="Permalink to &quot;按 url 过滤消息&quot;">​</a></h3><p>在过滤文本框中键入 url:后跟一个 URL 以仅查看来自该 URL 的消息</p><ul><li>键入 -url:后跟 URL 可以隐藏来自指定 URL 的所有消息</li></ul><p><img src="'+_+'" alt="img" loading="lazy"></p><h3 id="按消息来源过滤" tabindex="-1">按消息来源过滤 <a class="header-anchor" href="#按消息来源过滤" aria-label="Permalink to &quot;按消息来源过滤&quot;">​</a></h3><p>边栏中可以根据消息类型和消息来源进行信息过滤</p><p><img src="'+b+'" alt="img" loading="lazy"></p><h2 id="搜索日志" tabindex="-1">搜索日志 <a class="header-anchor" href="#搜索日志" aria-label="Permalink to &quot;搜索日志&quot;">​</a></h2><p>按 Ctrl+F 启用搜索栏，支持正则搜索</p><p><img src="'+g+'" alt="img" loading="lazy"></p><h2 id="运行-javascript" tabindex="-1">运行 JavaScript <a class="header-anchor" href="#运行-javascript" aria-label="Permalink to &quot;运行 JavaScript&quot;">​</a></h2><p>控制台是一个 REPL，代表读取、评估、打印和循环。它读取您输入的 JavaScript，评估您的代码，打印出表达式的结果，然后循环回到第一步。</p><h3 id="实时表达式-live-expression" tabindex="-1">实时表达式(live expression) <a class="header-anchor" href="#实时表达式-live-expression" aria-label="Permalink to &quot;实时表达式(live expression)&quot;">​</a></h3><p>控制台可以创建实时表达式，表达式的值会每 250 毫秒更新一次。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>要键入多行表达式，请按 Shift+Enter 开始新行。</p></div><p><img src="'+q+'" alt="img" loading="lazy"></p><h3 id="选择-javascript-上下文" tabindex="-1">选择 JavaScript 上下文 <a class="header-anchor" href="#选择-javascript-上下文" aria-label="Permalink to &quot;选择 JavaScript 上下文&quot;">​</a></h3><p>可选择 JavaScript 上下文</p><p><img src="'+f+'" alt="img" loading="lazy"></p><h2 id="检查对象属性" tabindex="-1">检查对象属性 <a class="header-anchor" href="#检查对象属性" aria-label="Permalink to &quot;检查对象属性&quot;">​</a></h2><p>控制台可以显示您指定的 JavaScript 对象的交互式属性列表。</p><h3 id="访问器属性" tabindex="-1">访问器属性 <a class="header-anchor" href="#访问器属性" aria-label="Permalink to &quot;访问器属性&quot;">​</a></h3><p>默认情况下，开发者工具不会评估您创建的访问器，如需评估某个对象的自定义访问器，请点击 (...)。</p><p><img src="'+k+'" alt="img" loading="lazy"></p><h3 id="可枚举和非枚举属性" tabindex="-1">可枚举和非枚举属性 <a class="header-anchor" href="#可枚举和非枚举属性" aria-label="Permalink to &quot;可枚举和非枚举属性&quot;">​</a></h3><p>可枚举属性的颜色很亮。非可枚举属性颜色很暗</p><p><img src="'+P+'" alt="img" loading="lazy"></p><h3 id="内部-javascript-属性" tabindex="-1">内部 JavaScript 属性 <a class="header-anchor" href="#内部-javascript-属性" aria-label="Permalink to &quot;内部 JavaScript 属性&quot;">​</a></h3><p><strong>控制台</strong>借用 <a href="https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots" target="_blank" rel="noreferrer">ECMAScript 表示法</a>，将 JavaScript 内部的一些属性用双方括号括起来。无法在代码中与此类属性进行交互。不过，检查这些内容可能很有用。</p><ul><li>任何对象都有一个 [[Prototype]]。</li><li>Map 对象具有包含键控条目的 <code>[[Entries]]</code> 属性。</li><li><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer"><code>Proxy</code> 对象</a>具有以下属性：<code>[[Handler]]</code> 对象、<code>[[Target]]</code> 对象和 <code>[[isRevoked]]</code>（是否关闭）。</li></ul><h3 id="查看函数" tabindex="-1">查看函数 <a class="header-anchor" href="#查看函数" aria-label="Permalink to &quot;查看函数&quot;">​</a></h3><p>在 JavaScript 中，函数也是具有属性的对象。但是，如果在 Console 中输入函数名称，则开发者工具会调用该名称，而不是显示其属性。</p><p>如需查看 JavaScript 内部的函数属性，请使用 console.dir() 命令。</p><p><img src="'+v+'" alt="img" loading="lazy"></p><h2 id="实用程序-api" tabindex="-1">实用程序 API <a class="header-anchor" href="#实用程序-api" aria-label="Permalink to &quot;实用程序 API&quot;">​</a></h2><p>实用程序 API 包含一组用于执行常见任务的便利函数：选择和检查 DOM 元素、查询对象、以可读格式显示数据、停止和启动分析器、监视 DOM 事件和函数调用等。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这些函数仅在您从 Chrome DevTools 控制台调用它们时才有效。如果您尝试在脚本中调用它们，它们将不起作用。</p></div><h3 id="返回最近评估的表达式的值" tabindex="-1">$_: 返回最近评估的表达式的值 <a class="header-anchor" href="#返回最近评估的表达式的值" aria-label="Permalink to &quot;$\\_: 返回最近评估的表达式的值&quot;">​</a></h3><p><img src="'+x+'" alt="img" loading="lazy"></p><h3 id="_0-4" tabindex="-1">$0 - $4 <a class="header-anchor" href="#_0-4" aria-label="Permalink to &quot;$0 - $4&quot;">​</a></h3><p>$0、$1、$2、$3 和 $4 命令用作对在元素面板中检查的最后五个 DOM 元素或在配置文件面板中选择的最后五个 JavaScript 堆对象的历史参考</p><p><img src="'+S+'" alt="img" loading="lazy"></p><h3 id="selector-startnode-选择元素" tabindex="-1">$(selector [, startNode]): 选择元素 <a class="header-anchor" href="#selector-startnode-选择元素" aria-label="Permalink to &quot;$(selector [, startNode]): 选择元素&quot;">​</a></h3><p>可以看做为 document.querySelector()函数的快捷方式. 语法: $(selector [, startNode])</p><ul><li>selector ：CSS 选择器的字符串</li><li>startNode：指定要从中搜索元素的“元素”或节点。 <ul><li>可选参数，默认值为 document。</li></ul></li></ul><p><img src="'+y+'" alt="img" loading="lazy"></p><h3 id="selector-startnode-选择元素数组" tabindex="-1">$$(selector [, startNode]): 选择元素数组 <a class="header-anchor" href="#selector-startnode-选择元素数组" aria-label="Permalink to &quot;$$(selector [, startNode]): 选择元素数组&quot;">​</a></h3><p>此命令等效于调用 Array.from(document.querySelectorAll())</p>',99),R=[$];function J(C,A,T,N,O,j){return r(),e("div",null,R)}const D=a(z,[["render",J]]);export{M as __pageData,D as default};
