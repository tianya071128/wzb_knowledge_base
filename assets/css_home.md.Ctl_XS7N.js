import{_ as s,c as a,o as e,aR as r,aT as i,aU as l,aV as t,aW as n}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"css","description":"","frontmatter":{},"headers":[],"relativePath":"css/home.md","filePath":"01_前端/02_css/01_index.md","lastUpdated":1739447932000}'),o={name:"css/home.md"},h=r('<h1 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h1><p><strong>层叠样式表</strong> (Cascading Style Sheets，缩写为 <strong>CSS</strong>），是一种 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/StyleSheet" target="_blank" rel="noreferrer">样式表</a> 语言，用来描述 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noreferrer">HTML</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/XML/XML_Introduction" target="_blank" rel="noreferrer">XML</a>（包括如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG" target="_blank" rel="noreferrer">SVG</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/MathML" target="_blank" rel="noreferrer">MathML</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/XHTML" target="_blank" rel="noreferrer">XHTML</a> 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p><h2 id="css-模块" tabindex="-1">css 模块 <a class="header-anchor" href="#css-模块" aria-label="Permalink to &quot;css 模块&quot;">​</a></h2><p>CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， CSS3 分成多个小模块且正在标准化中。</p><p>从 CSS3 开始，CSS 就被分成多个小模块分别进行标准化，更新。严格来说，并没有 CSS3 这种统称，只是对 CSS 模块的等级分类，例如：</p><ul><li>CSS Fonts Module Level 4：字体模块已经更新到 Level4;</li><li>CSS Transforms Module Level 1：过渡模块也才到 Level1;</li><li>在这里可查看所有 <a href="https://www.w3.org/Style/CSS/current-work" target="_blank" rel="noreferrer">CSS 模块</a>，更好的是查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noreferrer">MDN</a></li></ul><p><strong>模块化将 CSS 分解为更易于管理的块，并允许对 CSS 进行更直接的增量改进。</strong></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p><strong>CSS 1 和 CSS 2 是一个单一的整体规范，其中所有 CSS 都定义在一个文档中。随着 CSS 成为一种功能更加丰富的语言，各个部分有不同的发展速度，如何维护一个庞大的规范就成了问题。因此现在的 CSS 是模块化的，不同的 CSS 模块有不同的规范，一起构成了现在的 CSS。这些模块之间相互关联，并且处于不同的开发阶段。</strong></p></div><h2 id="css-语法" tabindex="-1">css 语法 <a class="header-anchor" href="#css-语法" aria-label="Permalink to &quot;css 语法&quot;">​</a></h2><p>CSS 主要由以下两个部分构建：</p><ul><li>属性（ <strong>property</strong>）是一个标识符，用可读的名称来表示其特性。</li><li>值（<strong>value</strong>）则描述了浏览器引擎如何处理该特性。每个属性都包含一个有效值的集合，它有正式的语法和语义定义，被浏览器引擎实现。</li></ul><p>以下的语法依次组成：</p><h3 id="css-声明" tabindex="-1">CSS 声明 <a class="header-anchor" href="#css-声明" aria-label="Permalink to &quot;CSS 声明&quot;">​</a></h3><p>一个属性与值的键值对被称为”声明“（declaration）</p><p><img src="'+i+'" alt="image-20220407094329018" loading="lazy"></p><h3 id="css-声明块" tabindex="-1">CSS 声明块 <a class="header-anchor" href="#css-声明块" aria-label="Permalink to &quot;CSS 声明块&quot;">​</a></h3><p>声明会按照<strong>块</strong>的形式被组合。声明块可能为空，也就是包含空的声明。</p><p><img src="'+l+'" alt="image-20220407100019560" loading="lazy"></p><h3 id="css-规则" tabindex="-1">CSS 规则 <a class="header-anchor" href="#css-规则" aria-label="Permalink to &quot;CSS 规则&quot;">​</a></h3><p>一对选择器与声明块称为规则集（ruleset)，常简称为规则（rule)。</p><p><img src="'+t+'" alt="image-20220407100951806" loading="lazy"></p><h3 id="css-语句" tabindex="-1">CSS 语句 <a class="header-anchor" href="#css-语句" aria-label="Permalink to &quot;CSS 语句&quot;">​</a></h3><p>规则是样式表的主体，通常样式表会包括大量的规则列表。但有时候网页的作者也希望在样式表中包括其他的一些信息，比如字符集，导入其它的外部样式表，字体等，这些需要专门的语句表示。</p><p>语句类型：</p><ul><li>规则。如上，将一组 CSS 声明与用选择器定义的条件相关联。</li><li>at 规则（<a href="https://developer.mozilla.org/en/CSS/At-rule" target="_blank" rel="noreferrer">at-rules</a>）。以@ (U+0040 COMMERCIAL AT) 开始，随后是标识符，一直到以分号或右大括号结束。每个 at 规则由其标识符定义，可能有它自己的语法。at 规则涵盖了 meta 信息（比如 @charset @import)，条件信息（比如@media @document), 描述信息（比如@font-face)。</li></ul><p><img src="'+n+`" alt="image-20220407101707961" loading="lazy"></p><h2 id="当浏览器遇到无法解析的-css-代码会发生什么" tabindex="-1">当浏览器遇到无法解析的 CSS 代码会发生什么 <a class="header-anchor" href="#当浏览器遇到无法解析的-css-代码会发生什么" aria-label="Permalink to &quot;当浏览器遇到无法解析的 CSS 代码会发生什么&quot;">​</a></h2><p><strong>如果一个浏览器在解析你所书写的 CSS 规则的过程中遇到了无法理解的属性或者值，它会忽略这些并继续解析下面的 CSS 声明。在你书写了错误的 CSS 代码（或者误拼写），又或者当浏览器遇到对于它来说很新的还没有支持的 CSS 代码的时候上述的情况同样会发生（直接忽略）</strong></p><p>这一特点在你想使用一个很新的 CSS 特性但是不是所有浏览器都支持的时候（浏览器兼容）非常有用：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 当支持 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语法时，就会运用，不支持的话，直接忽略</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="css-兼容性" tabindex="-1">css 兼容性 <a class="header-anchor" href="#css-兼容性" aria-label="Permalink to &quot;css 兼容性&quot;">​</a></h2><p>浏览器并不会同时实现所有的新 CSS，此外很多人也不会使用最新版本的浏览器。也就存在 CSS 兼容性的问题。</p><p>可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers" target="_blank" rel="noreferrer">MDN-支持旧浏览器</a>，此外，更多的是 <code>postcss</code> 的 <code>autoprefixer</code> 等工具进行 css 构建解决 css 兼容性问题</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noreferrer">MDN-CSS</a></li><li><a href="https://www.w3.org/Style/CSS/" target="_blank" rel="noreferrer">w3c-css</a></li></ul>`,35),p=[h];function c(d,S,k,g,C,u){return e(),a("div",null,p)}const _=s(o,[["render",c]]);export{b as __pageData,_ as default};
