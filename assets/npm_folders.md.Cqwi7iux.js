import{_ as e,c as o,o as c,aR as d}from"./chunks/framework.DLAwTCsc.js";const f=JSON.parse('{"title":"文件夹结构","description":"","frontmatter":{},"headers":[],"relativePath":"npm/folders.md","filePath":"02_工程化/06_npm/02_文件夹结构.md","lastUpdated":1739447932000}'),a={name:"npm/folders.md"},n=d('<h1 id="文件夹结构" tabindex="-1">文件夹结构 <a class="header-anchor" href="#文件夹结构" aria-label="Permalink to &quot;文件夹结构&quot;">​</a></h1><p><code>npm</code> 使用的文件夹结构</p><p><code>npm</code> 将各种东西放在你的计算机上。这就是它的工作。</p><ul><li><p>本地安装（默认）：将内容放入当前包根目录的 <code>./node_modules</code> 中。</p></li><li><p>全局安装（使用 -g）：将内容放入 <code>/usr/local</code> 或安装 <code>Node</code> 的任何位置。</p></li></ul><h2 id="前缀" tabindex="-1">前缀 <a class="header-anchor" href="#前缀" aria-label="Permalink to &quot;前缀&quot;">​</a></h2><p><a href="https://docs.npmjs.com/cli/v10/using-npm/config#prefix" target="_blank" rel="noreferrer">前缀配置</a> 默认为安装 <code>Node</code> 的位置。可通过 <code>npm config get prefix</code> 查看。</p><h2 id="node-模块" tabindex="-1">Node 模块 <a class="header-anchor" href="#node-模块" aria-label="Permalink to &quot;Node 模块&quot;">​</a></h2><p>包被放入 <a href="https://docs.npmjs.com/cli/v10/using-npm/config#prefix" target="_blank" rel="noreferrer"><code>prefix</code></a> 下的 <code>node_modules</code> 文件夹中。</p><p>作用域包的安装方式相同，只不过它们被分组到相关 <code>node_modules</code> 文件夹的子文件夹中，并以 <code>@</code> 符号为该作用域前缀的名称，</p><h2 id="可执行文件" tabindex="-1">可执行文件 <a class="header-anchor" href="#可执行文件" aria-label="Permalink to &quot;可执行文件&quot;">​</a></h2><p>在全局模式下，可执行文件在 <code>Unix</code> 上链接到 <code>{prefix}/bin</code>，在 <code>Windows</code> 上直接链接到 <code>{prefix}</code>。确保该路径位于终端的 <code>PATH</code> 环境中才能运行它们。</p><p>在本地模式下，可执行文件会链接到 <code>./node_modules/.bin</code> 中，以便通过 <code>npm</code> 运行的脚本可以使用它们。</p><h2 id="手册页面" tabindex="-1">手册页面 <a class="header-anchor" href="#手册页面" aria-label="Permalink to &quot;手册页面&quot;">​</a></h2><p>在全局模式下，手册页链接到 <code>{prefix}/share/man</code>。</p><p>在本地模式下，不会安装手册页。</p><p><strong><code>Windows</code> 系统上未安装手册页</strong>。</p><h2 id="缓存文件" tabindex="-1">缓存文件 <a class="header-anchor" href="#缓存文件" aria-label="Permalink to &quot;缓存文件&quot;">​</a></h2><p>参阅 <a href="https://docs.npmjs.com/cli/v10/commands/npm-cache" target="_blank" rel="noreferrer">npm cache</a>。缓存文件存储在 <code>Posix</code> 上的 <code>~/.npm</code> 中，或 <code>Windows</code> 上的 <code>%LocalAppData%/npm-cache</code> 中。</p><p>这是由<a href="https://docs.npmjs.com/cli/v10/using-npm/config#cache" target="_blank" rel="noreferrer">缓存配置</a>参数控制的。</p><h2 id="临时产生的文件" tabindex="-1">临时产生的文件 <a class="header-anchor" href="#临时产生的文件" aria-label="Permalink to &quot;临时产生的文件&quot;">​</a></h2><p>临时文件默认存储在 <a href="https://docs.npmjs.com/cli/v8/using-npm/config#tmp" target="_blank" rel="noreferrer">tmp 配置</a>指定的文件夹中，该文件夹默认为 <code>TMPDIR</code>、<code>TMP</code> 或 <code>TEMP</code> 环境变量，或者在 <code>Unix</code> 上为 <code>/tmp</code>，在 <code>Windows</code> 上为 <code>c:\\windows\\temp</code>。</p><p>每次运行程序时，临时文件都会在此根目录下获得一个唯一的文件夹，并在成功退出后被删除。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>已弃用：不再使用此设置。 npm 将临时文件存储在缓存中的特殊位置，并且它们由 <a href="https://www.npmjs.com/package/cacache" target="_blank" rel="noreferrer">cacache</a> 管理。</p></div><h2 id="安装逻辑" tabindex="-1">安装逻辑 <a class="header-anchor" href="#安装逻辑" aria-label="Permalink to &quot;安装逻辑&quot;">​</a></h2><p>在本地安装时，<code>npm</code> 首先尝试查找合适的前缀文件夹。这样 <code>npm install foo@1.2.3</code> 就会安装到你的包的合理根目录，即使你碰巧已经进入了其他文件夹。</p><p>从 <code>$PWD</code> 开始，<code>npm</code> 将沿着文件夹树向上查找包含 <code>package.json</code> 文件或 <code>node_modules</code> 文件夹的文件夹。如果找到这样的东西，那么它将被视为有效的“当前目录”，以便运行 <code>npm</code> 命令。</p><p>如果未找到包根目录，则使用当前文件夹。</p><p>任何 <code>bin</code> 文件都符号链接到 <code>./node_modules/.bin/</code>，以便 <code>npm</code> 脚本在必要时可以找到它们。</p>',28),r=[n];function p(t,i,s,l,h,m){return c(),o("div",null,r)}const u=e(a,[["render",p]]);export{f as __pageData,u as default};
