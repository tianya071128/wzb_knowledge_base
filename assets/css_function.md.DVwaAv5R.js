import{_ as a,c as e,o as r,aR as t}from"./chunks/framework.DLAwTCsc.js";const u=JSON.parse('{"title":"css 函数","description":"","frontmatter":{},"headers":[],"relativePath":"css/function.md","filePath":"01_前端/02_css/18_css函数.md","lastUpdated":1739447932000}'),o={name:"css/function.md"},l=t('<h1 id="css-函数" tabindex="-1">css 函数 <a class="header-anchor" href="#css-函数" aria-label="Permalink to &quot;css 函数&quot;">​</a></h1><h2 id="attr" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr" target="_blank" rel="noreferrer">attr</a> <a class="header-anchor" href="#attr" aria-label="Permalink to &quot;[attr](https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr)&quot;">​</a></h2><p><code>attr()</code> 用来获取选择到的元素的某一 HTML 属性值，并用于其样式。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p><strong>attr(attribute-name)</strong></p><ul><li><p><code>attribute-name</code>：引用的 HTML 属性名称</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p><code>attr()</code> 理论上能用于所有的 CSS 属性但目前支持的仅有伪元素的 content 属性，其他的属性和高级特性目前是实验性的</p><p>所以还支持各种高级语法，但是兼容性非常差。</p></div></li></ul><h2 id="calc" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc" target="_blank" rel="noreferrer">calc</a> <a class="header-anchor" href="#calc" aria-label="Permalink to &quot;[calc](https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc)&quot;">​</a></h2><p><code>calc()</code> 函数允许在声明 CSS 属性值时执行一些计算。</p><p>支持如下操作符的组合：+、-、*、/</p><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>+ 和 - 运算符的两边必须要有空白字符。比如，calc(50% -8px) 会被解析成为一个无效的表达式，解析结果是：一个百分比 后跟一个负数长度值。而加有空白字符的、有效的表达式 calc(8px + -50%) 会被解析成为：一个长度 后跟一个加号 再跟一个负百分比。</li><li>* 和 / 这两个运算符前后不需要空白字符，但如果考虑到统一性，仍然推荐加上空白符。</li></ul></div><h2 id="max" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/max" target="_blank" rel="noreferrer">max</a> <a class="header-anchor" href="#max" aria-label="Permalink to &quot;[max](https://developer.mozilla.org/zh-CN/docs/Web/CSS/max)&quot;">​</a></h2><p><code>max()</code> 函数可以从一个逗号分隔的表达式列表中选择最大（正方向）的值作为属性的值</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>max(表达式, [表达式...])，表达式可以是数学运算 (可在 calc() 了解更多信息), 直接数值，或者是其他表达式，例如 attr()，这将会计算成一个合法的参数类型（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length" target="_blank" rel="noreferrer">&lt;length&gt;</a>），也可以是嵌套的 min() 和 max() 函数。</p><h2 id="min" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/min" target="_blank" rel="noreferrer">min</a> <a class="header-anchor" href="#min" aria-label="Permalink to &quot;[min](https://developer.mozilla.org/zh-CN/docs/Web/CSS/min)&quot;">​</a></h2><p><code>min()</code> 允许从逗号分隔符表达式中选择一个最小值作为 CSS 的属性值。</p><h3 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>min(表达式, [表达式...])，与 <code>max</code> 类似，支持嵌套以及其他的函数嵌套</p><h2 id="clamp" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clamp" target="_blank" rel="noreferrer">clamp</a> <a class="header-anchor" href="#clamp" aria-label="Permalink to &quot;[clamp](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clamp)&quot;">​</a></h2><p><code>clamp()</code> 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。</p><p><code>clamp(MIN, VAL, MAX)</code> 其实就是表示 <code>max(MIN, min(VAL, MAX))</code></p><h3 id="语法-3" tabindex="-1">语法 <a class="header-anchor" href="#语法-3" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>clamp() 函数接收三个用逗号分隔的表达式作为参数，按最小值、首选值、最大值的顺序排列。</p><p>当首选值比最小值要小时，则使用最小值。</p><p>当首选值介于最小值和最大值之间时，用首选值。</p><p>当首选值比最大值要大时，则使用最大值。</p><h2 id="var" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var" target="_blank" rel="noreferrer">var</a> <a class="header-anchor" href="#var" aria-label="Permalink to &quot;[var](https://developer.mozilla.org/zh-CN/docs/Web/CSS/var)&quot;">​</a></h2><p><code>var()</code> 函数可以插入一个自定义属性（有时也被称为“CSS 变量”）的值，用来代替非自定义属性中值的任何部分。</p><h3 id="语法-4" tabindex="-1">语法 <a class="header-anchor" href="#语法-4" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>var(变量名, 回退值?)，如果第一个参数引用的自定义属性无效，则该函数将使用第二个值。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>自定义属性的回退值允许使用逗号。例如，var(--foo, red, blue) 将 red, blue 同时指定为回退值；即是说任何在第一个逗号之后到函数结尾前的值都会被考虑为回退值。</p></div>',31),c=[l];function s(d,i,h,p,n,m){return r(),e("div",null,c)}const _=a(o,[["render",s]]);export{u as __pageData,_ as default};
