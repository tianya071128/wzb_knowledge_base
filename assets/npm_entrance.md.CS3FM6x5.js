import{_ as s,c as a,o as e,aR as n}from"./chunks/framework.DLAwTCsc.js";const E=JSON.parse('{"title":"包入口","description":"","frontmatter":{},"headers":[],"relativePath":"npm/entrance.md","filePath":"02_工程化/06_npm/05_包入口.md","lastUpdated":1739447932000}'),i={name:"npm/entrance.md"},t=n(`<h1 id="包入口" tabindex="-1">包入口 <a class="header-anchor" href="#包入口" aria-label="Permalink to &quot;包入口&quot;">​</a></h1><h2 id="package-json-的-type-字段" tabindex="-1">package.json 的 type 字段 <a class="header-anchor" href="#package-json-的-type-字段" aria-label="Permalink to &quot;package.json 的 type 字段&quot;">​</a></h2><p>目前，js 的模块主要有两种类型：</p><ul><li>ES6 模块，简称 ESM</li><li>CommonJS 模块，简称 CJS。</li></ul><p>而 <code>type</code>字段决定 <code>.js</code> 文件模块加载方式，<strong>注意这只是决定了 .js 文件的加载方式</strong>：</p><ul><li><code>type: commonjs</code>：默认值，以 <code>commonJs</code> 方式加载</li><li><code>type: module</code>：以 ESM 方式加载</li></ul><p>总结为一句话：<strong><code>.mjs</code> 文件总是以 <code>ES6</code> 模块加载，<code>.cjs</code> 文件总是以 <code>CommonJS</code> 模块加载，<code>.js</code> 文件的加载取决于 <code>package.json</code> 里面 <code>type</code> 字段的设置。</strong></p><h2 id="main-module-browser-包入口字段" tabindex="-1">main/module/browser：包入口字段 <a class="header-anchor" href="#main-module-browser-包入口字段" aria-label="Permalink to &quot;main/module/browser：包入口字段&quot;">​</a></h2><p>目前前端常见的两种场景，需要分开对待：</p><ol><li>对于构建工具而言，以 <code>webpack</code> 为例：</li></ol><p>当文件是通过构建工具构建的时候，会受到 <a href="https://webpack.docschina.org/configuration/resolve/#resolvemainfields" target="_blank" rel="noreferrer">mainFields</a> 配置项的控制，此时根据 <a href="https://webpack.docschina.org/concepts/targets" target="_blank" rel="noreferrer">target</a> 的不同，默认从不同的字段取入口文件</p><ol start="2"><li>对于 <code>node</code> 而言，还需要根据 <code>type</code> 字段决定，暂时忽略</li></ol><h2 id="package-json-的-types-字段" tabindex="-1">package.json 的 types 字段 <a class="header-anchor" href="#package-json-的-types-字段" aria-label="Permalink to &quot;package.json 的 types 字段&quot;">​</a></h2><p>类型定义文件的字段</p><h2 id="package-json-的-exports-字段" tabindex="-1">package.json 的 exports 字段 <a class="header-anchor" href="#package-json-的-exports-字段" aria-label="Permalink to &quot;package.json 的 exports 字段&quot;">​</a></h2><p><code>exports</code> 字段的优先级高于 <code>main</code> 字段。 <code>exports</code> 自定义导出规则，可以理解为<strong>路径映射</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./unstyled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 类型定义文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/unstyled.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 使用 import 的入口文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/unstyled.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 使用 require 的入口文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/unstyled.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/module-loader#Node-js-%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">Node.js 的模块加载方法 </a></li><li><a href="https://github.com/SunshowerC/blog/issues/8" target="_blank" rel="noreferrer">package.json 中 你还不清楚的 browser，module，main 字段优先级</a></li><li><a href="https://nodejs.cn/api/packages.html#%E5%8C%85%E5%85%A5%E5%8F%A3%E7%82%B9" target="_blank" rel="noreferrer">Node 中文文档</a></li></ul>`,19),l=[t];function p(r,o,h,d,c,k){return e(),a("div",null,l)}const g=s(i,[["render",p]]);export{E as __pageData,g as default};
