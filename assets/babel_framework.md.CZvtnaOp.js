import{_ as a,c as e,o as t,aR as r,cp as o}from"./chunks/framework.DLAwTCsc.js";const m=JSON.parse('{"title":"babel 架构","description":"","frontmatter":{},"headers":[],"relativePath":"babel/framework.md","filePath":"02_工程化/05_babel/07_babal架构.md","lastUpdated":1739447932000}'),l={name:"babel/framework.md"},b=r('<h1 id="babel-架构" tabindex="-1">babel 架构 <a class="header-anchor" href="#babel-架构" aria-label="Permalink to &quot;babel 架构&quot;">​</a></h1><p>Babel 是 JavaScript 转译器，更确切地说是源码到源码的转译器，通常也叫做“转换编译器（transpiler）”。 意思是说你为 Babel 提供一些 JavaScript 代码，Babel 更改这些代码，然后返回给你新生成的代码。</p><h2 id="babel-的转译流程" tabindex="-1">babel 的转译流程 <a class="header-anchor" href="#babel-的转译流程" aria-label="Permalink to &quot;babel 的转译流程&quot;">​</a></h2><p>babel 是 source to source 的转换，整体转译流程分为三步：</p><ul><li><p>parse：通过 parser 把源码转成抽象语法树（AST）</p><blockquote><p>这个过程分为词法分析、语法分析。</p></blockquote></li><li><p>transform：遍历 AST，调用各种 <code>transform 插件</code> 对 AST 进行增删改</p><blockquote><p>会对 AST 进行遍历，处理到不同的 AST 节点会调用注册的相应的插件(插件会注册 visitor 函数)，就可以对 AST 进行增删改操作，返回新的 AST 节点(可以指定是否继续遍历新生成的 AST)</p></blockquote></li><li><p>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap</p><blockquote><p>对处理后的 AST 进行生成，从 AST 根节点进行递归打印，就可以生成目标代码的字符串。</p></blockquote></li></ul><p><img src="'+o+'" alt="img" loading="lazy"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://juejin.cn/book/6946117847848321055" target="_blank" rel="noreferrer">掘金小册-Babel 插件通关秘籍</a></p><p><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noreferrer">babel 手册</a></p>',9),s=[b];function i(p,n,c,_,d,h){return t(),e("div",null,s)}const f=a(l,[["render",i]]);export{m as __pageData,f as default};
