import{_ as s,c as a,o as e,aR as i}from"./chunks/framework.DLAwTCsc.js";const u=JSON.parse('{"title":"官方预设：@babel/preset-env","description":"","frontmatter":{"title":"官方预设：@babel/preset-env","date":"2021-10-21T15:00:00.000Z","permalink":"/babel/presetsEnv","categories":"-- 工程化 -- babel","tags":[null]},"headers":[],"relativePath":"babel/presetsEnv.md","filePath":"02_工程化/05_babel/05_preset-env预设.md","lastUpdated":1739447932000}'),n={name:"babel/presetsEnv.md"},l=i(`<h1 id="官方预设-babel-preset-env" tabindex="-1">官方预设：@babel/preset-env <a class="header-anchor" href="#官方预设-babel-preset-env" aria-label="Permalink to &quot;官方预设：@babel/preset-env&quot;">​</a></h1><p><code>@babel/preset-env</code>是一个<strong>智能预设</strong>，它能根据目标环境来管理需要哪些插件进行语法转换(以及浏览器 polyfill)，允许使用最新的 JS，可以 JS 包更小。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p><code>@babel/preset-env</code> 根据一些开源库，比如<a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer"><code>browserslist(管理环境列表)</code></a>、<a href="https://github.com/kangax/compat-table" target="_blank" rel="noreferrer"><code>compat-table(ECMAScript 兼容性表)</code></a>和<a href="https://github.com/Kilian/electron-to-chromium" target="_blank" rel="noreferrer"><code>electron-to-chromium(Electron到Chromium版本映射)</code></a>.</p><p>我们利用这些数据源来维护我们支持的目标环境<a href="https://github.com/babel/babel/blob/main/packages/babel-compat-data/data/plugins.json" target="_blank" rel="noreferrer">的哪个版本</a>获得了对 JavaScript 语法或浏览器功能的支持的映射，以及这些语法和功能到 Babel 转换插件和 core-js polyfills 的映射。</p><p><strong><code>@babel/preset-env</code> 会获取指定的 <code>targets</code> 的目标环境并根据语法映射得到需要的插件列表传递给 babel</strong></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>@babel/preset-env</code>不会包含任何低于第 3 阶段的 JavaScript 语法提案，因为在 TC39 流程的那个阶段，无论如何它都不会被任何浏览器实现。这些将需要手动包含在内。该<code>shippedProposals</code>选项将包括一些浏览器已经实施的第 3 阶段提案。</p></div><h2 id="使用-browserslist" tabindex="-1">使用 Browserslist <a class="header-anchor" href="#使用-browserslist" aria-label="Permalink to &quot;使用 Browserslist&quot;">​</a></h2><p>对于基于浏览器或 Electron 的项目，建议使用<a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer"><code>.browserslistrc</code></a>文件来指定目标环境。这个文件也被生态系统中许多工具所使用</p><p>默认情况下<code>@babel/preset-env</code>将使用 <a href="https://github.com/ai/browserslist#queries" target="_blank" rel="noreferrer">browserslist 配置源</a> ，除非设置了<a href="https://www.babeljs.cn/docs/babel-preset-env/#targets" target="_blank" rel="noreferrer">targets</a>或<a href="https://www.babeljs.cn/docs/babel-preset-env/#ignorebrowserslistconfig" target="_blank" rel="noreferrer">ignoreBrowserslistConfig</a>选项。也就是说，<a href="https://www.babeljs.cn/docs/babel-preset-env/#targets" target="_blank" rel="noreferrer">targets</a> 和 Browserslist 不会合并处理</p><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><h3 id="targets-目标环境" tabindex="-1">targets：目标环境 <a class="header-anchor" href="#targets-目标环境" aria-label="Permalink to &quot;targets：目标环境&quot;">​</a></h3><p><code>string | Array&lt;string&gt; | { [string]: string }</code></p><ol><li>使用 <code>@babel/preset-env</code> 设置的 <code>targets</code> 选项，没有设置的话：</li><li>使用 <a href="/wzb_knowledge_base/babel/configOptions.html#targets-支持环境"><code>options.targets</code></a> 顶级选项，没有设置的话：</li><li>使用 <a href="https://github.com/ai/browserslist#queries" target="_blank" rel="noreferrer">browserslist 配置源</a> ，没有指定的话：</li><li>使用默认值：假设你的目标是最旧的浏览器</li></ol><p>有关用法，查阅<a href="/wzb_knowledge_base/babel/configOptions.html#targets-支持环境"><code>options.targets</code></a></p><h3 id="modules-模块转换类型" tabindex="-1">modules：模块转换类型 <a class="header-anchor" href="#modules-模块转换类型" aria-label="Permalink to &quot;modules：模块转换类型&quot;">​</a></h3><p><code>&quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | &quot;cjs&quot; | &quot;auto&quot; | false</code>, 默认为<code>&quot;auto&quot;</code>.</p><p>配置将 ES 模块语法转换为哪种模块类型。其中 <code>cjs</code> 只是 <code>commonjs</code> 的别名</p><p><strong><code>@babel/preset-env</code> 会根据其配置决定使用哪种<a href="https://www.babeljs.cn/docs/plugins-list/#%E6%A8%A1%E5%9D%97%E6%A0%BC%E5%BC%8F" target="_blank" rel="noreferrer">模块格式的插件</a></strong></p><ul><li><p><code>false</code>：将保留 ES 模块，import/export 导出语句不转译</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><code>amd</code>：将 ES 模块语句转换为<a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noreferrer">AMD</a>。内部启用 <a href="https://www.babeljs.cn/docs/babel-plugin-transform-modules-amd/" target="_blank" rel="noreferrer">@babel/plugin-transform-modules-amd</a> 插件进行转换</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__esModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p><code>auto</code>：默认情况下使用<a href="https://www.babeljs.cn/docs/options#caller" target="_blank" rel="noreferrer"><code>caller</code></a>数据来确定转换应该转换 ES 模块和模块特性。通常<code>caller</code>数据由 <code>babel</code>集成中指定(例如<code>babel-loader</code>, <code>@rollup/plugin-babel</code>)，不建议用户用户自己传递 <code>caller</code> 数据</p><blockquote><p>在 babel-loader 中，会构建一个 caller 对象传递给 <code>babel</code> 程序</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caller {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;babel-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  supportsStaticESM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  supportsDynamicImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  supportsTopLevelAwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样 <code>@babel/preset-env</code> 就不会转译 ES 模块了，因为转译 ES 模块语法需要交由 <code>webapck</code> 处理</p></blockquote></li></ul><h3 id="usebuiltins-处理-polyfill" tabindex="-1">useBuiltIns：处理 polyfill <a class="header-anchor" href="#usebuiltins-处理-polyfill" aria-label="Permalink to &quot;useBuiltIns：处理 polyfill&quot;">​</a></h3><p><code>&quot;usage&quot;</code>| <code>&quot;entry&quot;</code>| <code>false</code>, 默认为<code>false</code>.</p><p>此选项配置如何处理 <code>polyfill</code>；</p><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li><code>babel</code> 在 <code>7.4.0 </code> 中已经弃用 <code>@babel/polyfill</code>，目前使用开源库 <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a> 和 <a href="https://www.npmjs.com/package/regenerator-runtime" target="_blank" rel="noreferrer">regenerator-runtime(生成器和 async/await 语法)</a> 进行 <code>polyfill</code></li><li>如果指定 <code>usage</code> 或 <code>entry</code>，则最好指定 <code>core-js</code> 版本，<code>babel</code>会根据 <code>core-js</code> 版本来注入最新的 <code>polyfill</code></li></ol></div><ul><li><p><code>useBuiltIns: false</code></p><p>不会自动添加 <code>polyfill</code>，也不会转换 <code>import &quot;core-js&quot;</code> 或 <code>import &quot;@babel/polyfill&quot;</code>添加 <code>polyfill</code></p><p>此时需要自行添加 <code>polyfill</code></p></li><li><p><code>useBuiltIns: &#39;usage&#39;</code>：<strong>最佳方式</strong></p><p>在每个文件中根据目标环境推断出使用需要 <code>polyfill</code> 语法时自动添加特定的导入，而无需做其他工作，可以有效的减少冗余代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/es.promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只会输出 promise 的 polyfill</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>useBuiltIns: &#39;entry&#39;</code></p><p>会启用新插件，将 <code>import &quot;core-js&quot;</code> 和 <code>import &quot;regenerator-runtime/runtime&quot;</code> 转换成目标环境下需要的 <code>polyfill</code>。</p><p>一般而言在入口文件中统一 <code>import &quot;core-js/xxx&quot; </code> 来导入所需的 <code>polyfill</code> 类别，会增大入口文件大小</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;core-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// polyfill 所有 \`core-js\` 特性，包括早期提案：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;core-js/stable&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // polyfill 仅稳定的特性 - ES 和 web 标准：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 - 根据目标环境不同而不同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;core-js/modules/es.string.pad-start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;core-js/modules/es.string.pad-end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>或者只需要一些特定的 <code>polyfill</code>，阅读<a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a>的文档以获取有关不同入口点。例如：填充数组方法和新 <code>Match</code> 提案</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/es/array&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/proposals/math-extensions&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/es.array.unscopables.flat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/es.array.unscopables.flat-map&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.clamp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.deg-per-rad&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.degrees&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.fscale&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.rad-per-deg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.radians&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;core-js/modules/esnext.math.scale&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果 <code>corejs</code> 版本设置为 <code>2</code> 的话，可以 <code>import &#39;@babel/polyfill&#39;;</code>，但实际上还是会导入 <code>core-js</code> 的 <code>polyfill</code> 内容</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;corejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@babel/polyfill&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;core-js/modules/es6.array.copy-within.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;core-js/modules/es6.array.fill.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;core-js/modules/es6.array.filter.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;core-js/modules/es6.array.find.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="corejs-指定-core-js-版本" tabindex="-1">corejs：指定 core-js 版本 <a class="header-anchor" href="#corejs-指定-core-js-版本" aria-label="Permalink to &quot;corejs：指定 core-js 版本&quot;">​</a></h3><p>类型：<code>string</code> | <code>{ version: string, proposals: boolean }</code>，默认为 <code>&quot;2.0&quot;</code></p><p>版本：<code>v7.4.0</code></p><p>在 <code>v7.4.0</code> 版本中，<code>babel</code> 废弃了 <code>@babel/polyfill</code>，而改用 <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a>来支持 <code>ployfill</code></p><p>此选项仅在 <code>useBuiltIns: usage</code> 或 <code>useBuiltIns: entry</code> 时一起使用，用来确保 <code>@babel/preset-env</code> 预设注入与 <code>core-js</code> 版本支持的(最新的) <code>polyfill</code>。建议指定次要版本，否则<code>&quot;3&quot;</code>将被解释为<code>&quot;3.0&quot;</code>可能不包含最新功能的 polyfill。</p><div class="warning custom-block"><p class="custom-block-title">使用提案 polyfill</p><p>默认情况下，只会注入稳定的 ECMAScript 特性的 <code>polyfill</code>，如果想要使用提案语法的话：</p><ul><li>使用 <code>useBuiltIns: entry</code> 时，直接导入一个<a href="https://github.com/zloirock/core-js/tree/master/packages/core-js/proposals" target="_blank" rel="noreferrer">proposal polyfill</a>：<code>import &quot;core-js/proposals/string-replace-all&quot;</code></li><li>使用 <code>useBuiltIns: usage</code> 时，有两种不同选择： <ul><li>设置 <a href="https://www.babeljs.cn/docs/babel-preset-env/#shippedproposals" target="_blank" rel="noreferrer"><code>shippedProposals</code></a> 选项设置为<code>true</code>，这将为已经在浏览器中提供一段时间的提案启用 polyfill 和转换。</li><li>使用<code>corejs: { version: &quot;3.8&quot;, proposals: true }</code>：这将 <code>polyfill</code> 提案语法</li></ul></li></ul></div><h3 id="shippedproposals-启用提案语法" tabindex="-1">shippedProposals：启用提案语法 <a class="header-anchor" href="#shippedproposals-启用提案语法" aria-label="Permalink to &quot;shippedProposals：启用提案语法&quot;">​</a></h3><p><code>boolean</code>, 默认为<code>false</code></p><p>启用对已在浏览器中提供的内置/功能建议的支持，这些提案都是已经在浏览器已经实现的语法，都在 <code>Stage-3</code> 阶段以上</p><p>这些提案语法与 <code>@babel/preset-stage-3</code> 不完全一致，不完全支持 <code>Stage-3</code> 语法，因为提案可以在浏览器实现之前继续更改。</p><h3 id="其他选项" tabindex="-1">其他选项 <a class="header-anchor" href="#其他选项" aria-label="Permalink to &quot;其他选项&quot;">​</a></h3><ul><li><code>debug</code>：<code>console.log</code> 输出根据目标环境启用的 <code>polyfill</code> 和转换插件以及其他选项</li><li><code>include</code>：始终包含的插件数组。</li><li><code>exclude</code>：始终排除/删除的插件数组。</li><li><a href="https://www.babeljs.cn/docs/babel-preset-env/" target="_blank" rel="noreferrer">其他选项</a></li></ul><h2 id="babel-plugin-transform-runtime-提取-babel-辅助方法" tabindex="-1">@babel/plugin-transform-runtime：提取 babel 辅助方法 <a class="header-anchor" href="#babel-plugin-transform-runtime-提取-babel-辅助方法" aria-label="Permalink to &quot;@babel/plugin-transform-runtime：提取 babel 辅助方法&quot;">​</a></h2><p>这个插件是帮我们把一些 babel 的辅助方法由直接写入代码专为按需引入模块的方式引用</p><p><a href="https://www.babeljs.cn/docs/babel-plugin-transform-runtime/" target="_blank" rel="noreferrer">见官网文档</a></p><p>这个插件会有一些问题，见<a href="https://juejin.cn/book/6946117847848321055/section/6947175741821812768" target="_blank" rel="noreferrer">Babel 插件通关秘籍-babel7 的问题</a></p>`,41),p=[l];function t(r,o,h,c,d,k){return e(),a("div",null,p)}const g=s(n,[["render",t]]);export{u as __pageData,g as default};
