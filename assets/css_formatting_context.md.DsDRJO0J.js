import{_ as e,c as r,o as a,aR as t}from"./chunks/framework.DLAwTCsc.js";const b=JSON.parse('{"title":"格式化上下文","description":"","frontmatter":{"title":"格式化上下文","date":"2021-10-21T15:00:00.000Z","permalink":"/css/formatting_context","categories":"-- css -- 格式化上下文","tags":[null]},"headers":[],"relativePath":"css/formatting_context.md","filePath":"01_前端/02_css/08_格式化上下文.md","lastUpdated":1739447932000}'),o={name:"css/formatting_context.md"},l=t('<h1 id="格式化上下文" tabindex="-1">格式化上下文 <a class="header-anchor" href="#格式化上下文" aria-label="Permalink to &quot;格式化上下文&quot;">​</a></h1><p>格式化上下文是一组相关框布局的环境，<strong>不同的格式化上下文根据不同的规则布置它们的框</strong>。例如 flex 格式化上下文根据 flex 规则对框进行布局、块格式化上下文根据块元素规则进行布局等等</p><div class="warning custom-block"><p class="custom-block-title">重点</p><p>当一个盒子建立了一个独立的格式化上下文，它<strong>本质上创建了一个新的、独立的布局环境</strong>；</p><p>除了通过盒子本身的大小调整外，其后代的布局是（通常）不受框外格式化上下文的规则和内容的影响([<a href="https://drafts.csswg.org/css-display/#biblio-css3-exclusions" target="_blank" rel="noreferrer">CSS3-EXCLUSIONS]</a> 能够跨越独立的格式化上下文边界影响内容)。</p></div><h2 id="创建格式化上下文" tabindex="-1">创建格式化上下文 <a class="header-anchor" href="#创建格式化上下文" aria-label="Permalink to &quot;创建格式化上下文&quot;">​</a></h2><p>那什么时候会触发BFC 呢？常见的情况如下：</p><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noreferrer"><code>float</code></a> 值不为 <code>none</code>）</li><li>绝对定位元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noreferrer"><code>position</code></a> 值为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 值为 <code>inline-block</code>）</li><li>表格单元格（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 值为 <code>table-cell</code>，HTML表格单元格默认值）</li><li>表格标题（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 值为 <code>table-caption</code>，HTML表格标题默认值）</li><li>弹性元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 值为 <code>flex</code> 或 <code>inline-flex</code> 元素的直接子元素），如果它们本身既不是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container" target="_blank" rel="noreferrer">flex</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container" target="_blank" rel="noreferrer">grid</a>也不是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Table" target="_blank" rel="noreferrer">table</a>容器</li><li>网格元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 值为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素），如果它们本身既不是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container" target="_blank" rel="noreferrer">flex</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container" target="_blank" rel="noreferrer">grid</a>也不是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Table" target="_blank" rel="noreferrer">table</a>容器</li><li><a href="https://developer.mozilla.org/zh-CN/docs/web/guide/css/block_formatting_context" target="_blank" rel="noreferrer">更多参考</a></li></ul><h2 id="格式化上下文的特性" tabindex="-1">格式化上下文的特性 <a class="header-anchor" href="#格式化上下文的特性" aria-label="Permalink to &quot;格式化上下文的特性&quot;">​</a></h2><p>记住这个规则：如果一个元素具有格式化上下文，内部子元素再怎么翻江倒海、翻云覆雨，都不会影响外部的元素。所以具有<strong>如下特性</strong>：</p><ul><li>包含内部浮动：建立它们的格式化上下文的框会增长到完全包含它们</li><li>排除外部浮动：不允许来自该框外部的浮动突出并影响框内的内容。</li><li>阻止外边距重叠：边距不会跨格式化上下文边界折叠。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>一个盒子要么建立一个新的独立格式化上下文，要么继续在其包含块的格式化上下文中。</p></div><h2 id="格式化上下文类型" tabindex="-1">格式化上下文类型 <a class="header-anchor" href="#格式化上下文类型" aria-label="Permalink to &quot;格式化上下文类型&quot;">​</a></h2><p>因为元素布局环境有多种，根据这些布局环境也区分出不同格式化上下文</p><h3 id="块格式化上下文-bfc" tabindex="-1">块格式化上下文(BFC) <a class="header-anchor" href="#块格式化上下文-bfc" aria-label="Permalink to &quot;块格式化上下文(BFC)&quot;">​</a></h3><p><a href="https://www.w3.org/TR/CSS22/visuren.html#block-formatting" target="_blank" rel="noreferrer">块格式化上下文(<strong>block formatting context</strong>)</a>，其子元素依据块元素的布局规则进行布局</p><h3 id="内联格式化上下文-ifc" tabindex="-1">内联格式化上下文(IFC) <a class="header-anchor" href="#内联格式化上下文-ifc" aria-label="Permalink to &quot;内联格式化上下文(IFC)&quot;">​</a></h3><p><a href="https://www.w3.org/TR/CSS22/visuren.html#inline-formatting" target="_blank" rel="noreferrer">内联格式化上下文(<strong>inline formatting context</strong>)</a>，其子元素按照内联元素的[布局规则]进行布局</p><h3 id="弹性格式化上下文-ffc" tabindex="-1">弹性格式化上下文(FFC) <a class="header-anchor" href="#弹性格式化上下文-ffc" aria-label="Permalink to &quot;弹性格式化上下文(FFC)&quot;">​</a></h3><p><a href="https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context" target="_blank" rel="noreferrer">弹性格式化上下文(<strong>flex formatting context</strong>)</a>，与建立块格式化上下文相同，只是使用 flex 布局而不是块布局。</p><h3 id="网格格式化上下文-gfc" tabindex="-1">网格格式化上下文(GFC) <a class="header-anchor" href="#网格格式化上下文-gfc" aria-label="Permalink to &quot;网格格式化上下文(GFC)&quot;">​</a></h3><p><a href="https://drafts.csswg.org/css-grid-2/#grid-formatting-context" target="_blank" rel="noreferrer">网格格式化上下文(<strong>grid formatting context</strong>)</a>，与建立块格式化上下文相同，只是使用网格布局而不是块布局。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/web/guide/css/block_formatting_context" target="_blank" rel="noreferrer">MDN-块格式化上下文</a></p><p><a href="https://drafts.csswg.org/css-display/#formatting-context" target="_blank" rel="noreferrer">CSS Display Module Level 3</a>：格式化上下文概念规范</p><p><a href="https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context" target="_blank" rel="noreferrer">flex formatting context</a>：弹性格式化上下文</p><p><a href="https://drafts.csswg.org/css-grid-2/#grid-formatting-context" target="_blank" rel="noreferrer">grid formatting context</a>：网格格式化上下文</p>',25),s=[l];function i(n,c,d,h,f,g){return a(),r("div",null,s)}const _=e(o,[["render",i]]);export{b as __pageData,_ as default};
