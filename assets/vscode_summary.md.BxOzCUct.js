import{_ as a,c as e,o as t,aR as l,ch as o,ci as r,cj as i,ck as d,cl as c,cm as s,cn as n,co as h}from"./chunks/framework.DLAwTCsc.js";const P=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"vscode/summary.md","filePath":"02_工程化/01_vscode/02_概述.md","lastUpdated":1739447932000}'),p={name:"vscode/summary.md"},u=l('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><h2 id="用户界面" tabindex="-1">用户界面 <a class="header-anchor" href="#用户界面" aria-label="Permalink to &quot;用户界面&quot;">​</a></h2><p>VS Code 采用了一个通用的用户界面和布局，左边是一个资源管理器，显示您可以访问的所有文件和文件夹，右边是一个编辑器，显示您打开的文件的内容。</p><h3 id="过滤文档树" tabindex="-1">过滤文档树 <a class="header-anchor" href="#过滤文档树" aria-label="Permalink to &quot;过滤文档树&quot;">​</a></h3><p>文档树获取焦点 -&gt; 输入需要筛选的部分文件名 -&gt; 按光标键上下移动 -&gt; <strong>启用过滤器</strong>将仅显示匹配的文件/文件夹 -&gt; 使用“X”<strong>清除</strong>按钮清除过滤器。</p><p><img src="'+o+'" alt="动画1" loading="lazy"></p><h3 id="命令面板" tabindex="-1">命令面板 <a class="header-anchor" href="#命令面板" aria-label="Permalink to &quot;命令面板&quot;">​</a></h3><p>VS code 所有的操作都可以通过命名来实现，最重要的组合键是 <code>Ctrl+Shift+P</code>，<strong>您可以访问 VS Code 的所有功能，包括用于最常见操作的键盘快捷键。</strong></p><p>以下是对许多命令的快捷访问：</p><ul><li><code>Ctrl+P</code>：可让您通过键入名称导航到任何文件或符号</li><li><code>Ctrl+Tab</code>：将循环您打开的最后一组文件</li><li><code>Ctrl+Shift+P</code>：将直接带您进入编辑器命令</li><li><code>Ctrl+Shift+O</code>：可让您导航到文件中的特定符号</li><li><code>Ctrl+G</code>：将让您导航到文件中的特定行</li></ul><p><img src="'+r+'" alt="动画1" loading="lazy"></p><h2 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h2><p>主题分为颜色主题和文件图标主题</p><h3 id="颜色主题" tabindex="-1">颜色主题 <a class="header-anchor" href="#颜色主题" aria-label="Permalink to &quot;颜色主题&quot;">​</a></h3><p>颜色主题让您可以修改 <code>Visual Studio Code</code> 用户界面中的颜色以适应您的偏好和工作环境。</p><h4 id="选择颜色主题" tabindex="-1">选择颜色主题 <a class="header-anchor" href="#选择颜色主题" aria-label="Permalink to &quot;选择颜色主题&quot;">​</a></h4><ol><li>选择 <code>文件 -&gt; 首选项 -&gt; 颜色主题</code> 或 <code>Ctrl+K, Ctrl+T</code> 或 <code>命令中输入：颜色主题</code></li><li>使用 ↕️ 预览主题</li><li>选择您想要的主题，然后按 Enter。</li></ol><p><img src="'+i+'" alt="动画1" loading="lazy"></p><h4 id="在扩展市场中选择颜色主题" tabindex="-1">在扩展市场中选择颜色主题 <a class="header-anchor" href="#在扩展市场中选择颜色主题" aria-label="Permalink to &quot;在扩展市场中选择颜色主题&quot;">​</a></h4><p>在扩展视图中搜索主题：<code>@category:&quot;themes&quot;</code></p><h4 id="自定义颜色主题" tabindex="-1">自定义颜色主题 <a class="header-anchor" href="#自定义颜色主题" aria-label="Permalink to &quot;自定义颜色主题&quot;">​</a></h4><p>可以定制化 VS Code 各区域的颜色，<a href="https://code.visualstudio.com/docs/getstarted/themes#_customizing-a-color-theme" target="_blank" rel="noreferrer">详情见</a></p><h3 id="文件图标主题" tabindex="-1">文件图标主题 <a class="header-anchor" href="#文件图标主题" aria-label="Permalink to &quot;文件图标主题&quot;">​</a></h3><p>文件图标显示在文件资源管理器和选项卡式标题中。</p><h4 id="选择文件图标主题" tabindex="-1">选择文件图标主题 <a class="header-anchor" href="#选择文件图标主题" aria-label="Permalink to &quot;选择文件图标主题&quot;">​</a></h4><ol><li>选择 <code>文件 -&gt; 首选项 -&gt; 文件图标主题</code> 或 <code>命令中输入：文件图标主题</code></li><li>使用 ↕️ 预览主题</li><li>选择您想要的主题，然后按 Enter。</li></ol><h2 id="基本编辑" tabindex="-1">基本编辑 <a class="header-anchor" href="#基本编辑" aria-label="Permalink to &quot;基本编辑&quot;">​</a></h2><h3 id="多项选择-多光标" tabindex="-1">多项选择（多光标） <a class="header-anchor" href="#多项选择-多光标" aria-label="Permalink to &quot;多项选择（多光标）&quot;">​</a></h3><ul><li><code>ctrl + alt + Down/Up</code>：键盘选择</li><li><code>ctrl + 鼠标click</code>：一项项的选择</li><li><code>shift + alt + 鼠标click</code>：一次性选择多项</li><li><code>Ctrl+D</code>：选择相同项</li></ul><p><img src="'+d+'" alt="动画" loading="lazy"></p><h3 id="在指定区域查找" tabindex="-1">在指定区域查找 <a class="header-anchor" href="#在指定区域查找" aria-label="Permalink to &quot;在指定区域查找&quot;">​</a></h3><p>默认情况下，查找操作在编辑器中对整个文件运行。它也可以在选定的文本上运行</p><p>选择需要查找的范围，通过单击“查找小部件”上的汉堡包图标来打开此功能。</p><p><img src="'+c+'" alt="在选择中查找" loading="lazy"></p><h3 id="搜索和替换-正则" tabindex="-1">搜索和替换 - 正则 <a class="header-anchor" href="#搜索和替换-正则" aria-label="Permalink to &quot;搜索和替换 - 正则&quot;">​</a></h3><p>除了常规的搜索和替换，还支持正则高级语法</p><p><a href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noreferrer">参考官方文档</a></p><h3 id="格式化" tabindex="-1">格式化 <a class="header-anchor" href="#格式化" aria-label="Permalink to &quot;格式化&quot;">​</a></h3><ul><li>格式化整个文件：<code>Shift+Alt+F</code>；</li><li><strong>格式化所选文本</strong>：先选择需要格式化的文本 -&gt; <code>Ctrl+K Ctrl+F</code></li></ul><h3 id="折叠" tabindex="-1">折叠 <a class="header-anchor" href="#折叠" aria-label="Permalink to &quot;折叠&quot;">​</a></h3><ul><li><p>折叠/展开区域内的所有区域: <code>Shift + 单击</code></p><p><img src="'+s+'" alt="在选择中查找" loading="lazy"></p></li><li><p>折叠 ( Ctrl+Shift+[ ) 折叠光标处最里面的未折叠区域。</p></li><li><p>展开 ( Ctrl+Shift+] ) 展开光标处的折叠区域。</p></li><li><p>切换折叠 ( Ctrl+K Ctrl+L ) 折叠或展开光标处的区域。</p></li><li><p>递归折叠 ( Ctrl+K Ctrl+[ ) 折叠光标处最里面的未折叠区域和该区域内的所有区域。</p></li><li><p>递归展开 ( Ctrl+K Ctrl+] ) 展开光标处的区域以及该区域内的所有区域。</p></li><li><p>全部折叠 ( Ctrl+K Ctrl+0 ) 折叠编辑器中的所有区域。</p></li><li><p>全部展开 ( Ctrl+K Ctrl+J ) 展开编辑器中的所有区域。</p></li><li><p>折叠层级 X（Ctrl+K Ctrl+2 用于层级 2）折叠层级 X 的所有区域，当前光标位置的区域除外。</p></li><li><p>折叠所有块注释 ( Ctrl+K Ctrl+/ ) 折叠所有以块注释标记开头的区域。</p></li></ul><h2 id="智能感知-intellisense" tabindex="-1">智能感知(IntelliSense) <a class="header-anchor" href="#智能感知-intellisense" aria-label="Permalink to &quot;智能感知(IntelliSense)&quot;">​</a></h2><p>IntelliSense 是各种代码编辑功能的总称，包括：代码完成、参数信息、快速信息和成员列表。</p><h3 id="触发智能感知" tabindex="-1">触发智能感知 <a class="header-anchor" href="#触发智能感知" aria-label="Permalink to &quot;触发智能感知&quot;">​</a></h3><p><strong>VS Code IntelliSense 功能由语言服务提供支持。语言服务基于语言语义和源代码分析提供智能代码完成。如果语言服务知道可能的补全，则 IntelliSense 建议将在您键入时弹出。如果您继续键入字符，则成员（变量、方法等）列表将被过滤为仅包含包含您键入的字符的成员。</strong></p><p>在键入触发字符(例如 JavaScript 中的点字符 ( <code>.</code> ))或通过 <code>Ctrl+Space</code>(修改为了 <code>Ctrl + Alt + Space</code>) 键来触发 IntelliSense 。</p><p><img src="'+n+'" alt="智能感知" loading="lazy"></p><h3 id="js-的智能感知" tabindex="-1">JS 的智能感知 <a class="header-anchor" href="#js-的智能感知" aria-label="Permalink to &quot;JS 的智能感知&quot;">​</a></h3><p>VS Code 内置了 <code>JavaScript</code> 的智能感知功能，是由 TypeScript 团队开发的 <a href="https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio" target="_blank" rel="noreferrer">JavaScript 语法服务</a>，VS Code 内置了很多了类型声明，所以对于大部分项目无需任何配置，但可以通过 <a href="https://code.visualstudio.com/docs/languages/javascript#_jsdoc-support" target="_blank" rel="noreferrer"><code>JSDOC</code></a> 和配置 <code>jsconfig.json</code> 来增强智能感知</p><h2 id="代码导航" tabindex="-1">代码导航 <a class="header-anchor" href="#代码导航" aria-label="Permalink to &quot;代码导航&quot;">​</a></h2><h3 id="跳转文件和跳转行" tabindex="-1">跳转文件和跳转行 <a class="header-anchor" href="#跳转文件和跳转行" aria-label="Permalink to &quot;跳转文件和跳转行&quot;">​</a></h3><ul><li>跳转文件: <code>ctrl + p</code></li><li>跳转文件指定行: <code>ctrl + G</code></li></ul><h3 id="重命名符号" tabindex="-1">重命名符号 <a class="header-anchor" href="#重命名符号" aria-label="Permalink to &quot;重命名符号&quot;">​</a></h3><p>按 <code>F2</code> 重命名 JavaScript 项目中光标下的符号</p><p><img src="https://code.visualstudio.com/assets/docs/languages/javascript/rename.png" alt="重命名变量" loading="lazy"></p><p><strong>注意：这个是 JS 语言的功能，<code>vue</code> 文件暂不支持该功能(或许可以通过扩展支持)，因为 <code>vue</code> 文件从 VS Code 看来，是属于另一种语言。同理，<code>JS</code> 文件查看引用也无法定位到 <code>vue</code> 文件中</strong></p><h2 id="代码片段" tabindex="-1">代码片段 <a class="header-anchor" href="#代码片段" aria-label="Permalink to &quot;代码片段&quot;">​</a></h2><p>代码片段是可以更轻松地输入重复代码模式的模板，例如循环或条件语句。在 Visual Studio Code 中，片段显示在 <code>IntelliSense</code> 中与其他建议混合在一起</p><p><img src="https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif" alt="ajax 片段" loading="lazy"></p><h3 id="创建代码片段" tabindex="-1">创建代码片段 <a class="header-anchor" href="#创建代码片段" aria-label="Permalink to &quot;创建代码片段&quot;">​</a></h3><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets" target="_blank" rel="noreferrer">查看</a></p><h2 id="emmet" tabindex="-1">Emmet <a class="header-anchor" href="#emmet" aria-label="Permalink to &quot;Emmet&quot;">​</a></h2><p><a href="https://docs.emmet.io/" target="_blank" rel="noreferrer">与代码片段的区别</a>：</p><ul><li>代码片段必须先定义，并且不能在运行时扩展它们</li><li><code>Emmet</code> 可以动态解析<em>的类似 CSS 的</em>表达式，并根据您在缩写中键入的内容生成输出。</li></ul><p>例如：</p><p><img src="https://code.visualstudio.com/assets/docs/editor/emmet/emmet.gif" alt="建议/自动完成列表中的 Emmet" loading="lazy"></p><h2 id="重构" tabindex="-1">重构 <a class="header-anchor" href="#重构" aria-label="Permalink to &quot;重构&quot;">​</a></h2><p>通过重构代码而不修改运行时行为来提高项目的质量和可维护性。</p><p>选取需要重构的代码 -&gt; 点击小灯泡 -&gt; 选择重构类型</p><p><img src="'+h+'" alt="在选择中查找" loading="lazy"></p>',70),m=[u];function g(b,f,_,q,S,C){return t(),e("div",null,m)}const x=a(p,[["render",g]]);export{P as __pageData,x as default};
