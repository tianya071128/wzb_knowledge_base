import{_ as s,c as i,o as a,aR as l,bb as n}from"./chunks/framework.DLAwTCsc.js";const g=JSON.parse('{"title":"ES 基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"js/home.md","filePath":"01_前端/03_js/01_ES基本概念.md","lastUpdated":1739447932000}'),p={name:"js/home.md"},e=l('<h1 id="es-基础概念" tabindex="-1">ES 基础概念 <a class="header-anchor" href="#es-基础概念" aria-label="Permalink to &quot;ES 基础概念&quot;">​</a></h1><h2 id="javascript-实现" tabindex="-1">JavaScript 实现 <a class="header-anchor" href="#javascript-实现" aria-label="Permalink to &quot;JavaScript 实现&quot;">​</a></h2><p>虽然 JavaScript 和 ECMAScript 基本上是同义词，完整的 JavaScript 实现包含以下几个部分</p><ul><li>核心（ECMAScript）：即 ECMA-262 定义的语言</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul><h2 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h2><p>ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）。</p><div class="warning custom-block"><p class="custom-block-title">重要概念</p><p>事实上这门语言没有输入和输出，<strong>ES 的语法更多是操作数据结构，并不能直接访问 I/O，以及不能输出内容</strong>。</p><p>将这门语言作为一个基准来定义，可以在它之上构建更稳健的脚本语言。</p><p>在浏览器宿主环境中，通过 DOM 和 BOM 来提供浏览器环境下的功能。</p><p>在 Node 环境中，通过 Node 提供的核心模块访问系统 I/O。</p></div><p>不涉及宿主环境（例如浏览器），在基本的层面上，ES 包括以下部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>运算符</li><li>全局对象</li></ul><h3 id="_1-es-版本" tabindex="-1">1. ES 版本 <a class="header-anchor" href="#_1-es-版本" aria-label="Permalink to &quot;1. ES 版本&quot;">​</a></h3><p>js 诞生于 1995 年，ECMA-262 的第 1 版本质上跟网景的 JavaScript 1.1 相同，只不过删除了所有浏览器特定的代码，外加少量细微的修改。</p><p>ECMA-262 第 2 版只是做了一些编校工作，主要是为了更新之后严格符合 ISO/IEC-16262 的要求，并没有增减或改变任何特性。</p><p>ECMA-262 第 3 版第一次真正对这个标准进行更新，更新了字符串处理、错误定义和数值输出。</p><p>ECMA-262 第 4 版是对这门语言的一次彻底修订。但是因为过于激进，ECMA-262 第 4 版在正式发布之前被放弃。</p><p>ECMAScript 3.1 变成了 ECMA-262 的第 5 版，于 2009 年 12 月 3 日正式发布。第 5 版致力于厘清第 3 版存在的歧义，也增加了新功能。</p><p>ECMA-262 第 6 版，俗称 ES6、ES2015 或 ES Harmony（和谐版），于 2015 年 6 月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。</p><p>后续每年发一次版本，对语言进行轻量的更新。</p><h3 id="_2-es-符合性" tabindex="-1">2. ES 符合性？ <a class="header-anchor" href="#_2-es-符合性" aria-label="Permalink to &quot;2. ES 符合性？&quot;">​</a></h3><p>要成为 ECMAScript 实现，必须满足下列条件：</p><ul><li><p>支持 ECMA-262 中描述的所有“类型、值、对象、属性、函数，以及程序语法与语义”；</p></li><li><p>支持 Unicode 字符标准。</p></li></ul><p>此外，符合性实现还可以满足下列要求。</p><ul><li>增加 ECMA-262 中未提及的“额外的类型、值、对象、属性和函数”。ECMA-262 所说的这些额外内容主要指规范中未给出的新对象或对象的新属性。</li><li>支持 ECMA-262 中没有定义的“程序和正则表达式语法”（意思是允许修改和扩展内置的正则表达式特性）。</li></ul><p><strong>也就是说，要在 ES 语言基础上开发其他语言，需要满足上述条件</strong></p><h3 id="_3-es-兼容性" tabindex="-1">3. ES 兼容性 <a class="header-anchor" href="#_3-es-兼容性" aria-label="Permalink to &quot;3. ES 兼容性&quot;">​</a></h3><p>ES 的实现因为有其标准遵循，所以浏览器对其实现最为规范。</p><p>但因为客户的浏览器版本不一致，所以我们在 ES 层面的兼容性主要是对于 ES 版本方面的兼容性。</p><p>一般而言，使用 babel 之类的语法编译器可以实现 ES 语法的兼容处理，还需要添加 polyfill 对于语法环境的模拟。</p><p><strong>但是有些语法是无法 polyfill 的，例如 vue 使用的 Object.defineProperty 语法。此时在低版本浏览器中是无法兼容的，例如 vue 不兼容 IE9-</strong></p><h2 id="es-语法" tabindex="-1">ES 语法 <a class="header-anchor" href="#es-语法" aria-label="Permalink to &quot;ES 语法&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">《你不知道的 JavaScript-中》p92</p><p>相比“词法”（syntax），“语法”一词对读者来说可能更陌生一些。很多时候二者是同一个意思，都是语言规则的定义。虽然它们之间有一些微小的差别，但我们这里可以忽略不计。JavaScript 语法定义了词法规则（syntax rule，如运算符和关键词等）是如何构成可运行的程序代码的。换句话说，只看词法不看语法会遗漏掉很多重要的细节。所以准确地说，本章介绍的是语法，虽然和开发人员直接打交道的是词法。</p></div><h3 id="es-是动态、弱类型语言" tabindex="-1">ES 是动态、弱类型语言 <a class="header-anchor" href="#es-是动态、弱类型语言" aria-label="Permalink to &quot;ES 是动态、弱类型语言&quot;">​</a></h3><p>编程语言的两组划分：弱类型和强类型，动态类型和静态类型。如下图定义：</p><ul><li>动态类型和静态类型： <ul><li>静态语言：使用之前就需要确认其变量数据类型</li><li>动态语言：在运行过程中需要检查数据类型的语言</li></ul></li><li>弱类型和强类型： <ul><li>弱类型：支持隐式类型转换的语言</li><li>强类型：不支持隐式类型转换的语言</li></ul></li></ul><p><img src="'+n+`" alt="img" loading="lazy"></p><h3 id="语句和表达式" tabindex="-1">语句和表达式 <a class="header-anchor" href="#语句和表达式" aria-label="Permalink to &quot;语句和表达式&quot;">​</a></h3><p>语句和表达式在 ES 中并不能混为一谈，他们有着一些重要差别</p><div class="warning custom-block"><p class="custom-block-title">《你不知道的 JavaScript-中》p93</p><p>“句子”（sentence）是完整表达某个意思的一组词，由一个或多个“短语”（phrase）组成，它们之间由标点符号或连接词（and 和 or 等）连接起来。短语可以由更小的短语组成。有些短语是不完整的，不能独立表达意思；有些短语则相对完整，并且能够独立表达某个意思。这些规则就是英语的语法。</p><p>JavaScript 的语法也是如此。<strong>语句相当于句子，表达式相当于短语，运算符则相当于标点符号和连接词。</strong></p></div><h4 id="语句的结果值" tabindex="-1">语句的结果值 <a class="header-anchor" href="#语句的结果值" aria-label="Permalink to &quot;语句的结果值&quot;">​</a></h4><p>语句也是有结果值的，在浏览器的控制台就会返回。</p><p>在代码中，无法直接获取，但可以通过 <code>eval</code> 间接获取（禁止如此操作）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 eval</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;if (true) { b = 4 + 38; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="表达式的结果值" tabindex="-1">表达式的结果值 <a class="header-anchor" href="#表达式的结果值" aria-label="Permalink to &quot;表达式的结果值&quot;">​</a></h4><p>表达式会产生一个结果值。</p><h3 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h3><p>ES5 新增的严格模式，是一种不同的 JS 解析和执行模型，对于不安全的活动将抛出错误。</p><ul><li><p>全局严格模式：在脚本开头添加 <code>&quot;use strict&quot;</code>;</p></li><li><p>局部严格模式：在函数体开头添加 <code>&quot;use strict&quot;</code>;</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="基础概念-标识符、关键字、保留字" tabindex="-1">基础概念：标识符、关键字、保留字 <a class="header-anchor" href="#基础概念-标识符、关键字、保留字" aria-label="Permalink to &quot;基础概念：标识符、关键字、保留字&quot;">​</a></h3><ul><li><p>标识符：就是变量、函数、属性或函数参数的名称。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>关键字、保留字、true、false 和 null 不能作为标识符。</p></div></li><li><p>关键字：这些关键字有特殊用途，比如表示控制语句的开始和结束，或者执行特定的操作。</p></li><li><p>保留字：未来可能会有特殊用途。</p></li></ul><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p>在应用程序中，使用变量来作为值的符号名。变量的名称又叫做标识符。</p><p>声明变量的方式：</p><ul><li>var</li><li>let</li><li>const</li></ul><h3 id="运算符-也称操作符" tabindex="-1">运算符(也称操作符) <a class="header-anchor" href="#运算符-也称操作符" aria-label="Permalink to &quot;运算符(也称操作符)&quot;">​</a></h3><p>运算符优先级列表：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noreferrer">MDN-运算符优先级</a></p><p>运算符：可用于操作数据值，可用于各种值，<strong>在应用在对象时，运算符通常会调用 valueOf() 和/或 toString()</strong></p><ul><li><p>一元运算符：递增(++)、递减(--)、一元加(+)、一元减(-)</p><ul><li>递增和递减有前缀和后缀之分，前缀递增/递减(a = ++1)变量的值都会在语句被求值之前改变。（在计算机科学中， 这通常被称为具有副作用。）</li><li>一元加(+)：应用到非数值，会执行与使用 Number()转型函数一样的类型转换：</li><li>一元减(-)：应用到非数值，会执行与使用 Number()转型函数一样的类型转换，<strong>然后变成负值</strong>：</li></ul></li><li><p>位运算符：按位非(~)、按位与(&amp;)、按位或(|)、按位异或(^)、左移(&lt;&lt;)、有符号右移(&gt;&gt;)、无符号右移(&gt;&gt;&gt;)</p></li><li><p>布尔运算符：逻辑非(!)、逻辑与(&amp;&amp;)、逻辑或(||)</p></li><li><p>乘性运算符：乘法运算符(*)、除法运算符(/)、取模运算符(%)</p></li><li><p>指数运算符：<strong>ES7 新增</strong></p><ul><li><p>**：作用与 Math.pow() 相同</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>**=：指数赋值运算符</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> squared </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squared </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(squared); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><p>加性运算符：加法运算符（+）、减法运算符（-）</p></li><li><p>关系运算符：小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=）</p></li><li><p>相等运算符：等于运算符（==）、不等于运算符（!=）、全等运算符（===）、不全等运算符（!==）</p></li><li><p>条件运算符(<em>三目</em>运算符)：variable = boolean_expression ? true_value : false_value;</p></li><li><p>赋值运算符：简单赋值（=）、复合赋值使用乘性、加性或位运算符后跟等于号（=）表示。</p></li><li><p>逗号运算符：逗号运算符可以用来在一条语句中执行多个操作。例如：let num1 = 1, num2 = 2, num3 = 3;</p></li></ul><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>ES 将数据类型分为 7 种简单数据类型和 Object 复杂数据类型。</p><p><strong>因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述数据类型表示</strong></p><ul><li><p>简单数据类型：</p><p>Undefined、Null、Boolean、Number、String 和 Symbol（ES6 新增）、BigInt（ES10 新增）</p></li><li><p>复杂数据类型：Object</p></li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在 ECMAScript 中 Object 是所有对象的基类。例如 Array、Function 等等。</p><p>但严格来讲，宿主对象不受 ECMA-262 约束，它们可能会也可能不会继承 Object。</p></div><h4 id="检测数据类型" tabindex="-1">检测数据类型 <a class="header-anchor" href="#检测数据类型" aria-label="Permalink to &quot;检测数据类型&quot;">​</a></h4><ul><li><p>检测基本数据类型使用 typeof -- 检测 null 返回 object（所以不要使用 typeof 检测 null）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>检测 null 可以直接使用全等操作符 --- 因为 Null 数据类型只有一个值</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>检查 undefined 和 null，可以使用不全等操作符（==）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>检测函数也可以使用 typeof 操作符</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>检测数组可以使用 Array.isArray() 方法</p></li><li><p>检测复杂数据类型可以借用 Object.prototype.toString.call(检测值)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Date</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>检测是否原生构造函数：Number、String 等</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Ctor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">native code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Ctor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>检测是否为 promise：因为 promise 可以是 polyfill 的，所以检测是否为对象，并且 .then 和 .catch 为函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val.then </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val.catch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul>`,63),t=[e];function h(r,k,d,c,o,E){return a(),i("div",null,t)}const b=s(p,[["render",h]]);export{g as __pageData,b as default};
